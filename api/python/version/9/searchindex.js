Search.setIndex({"alltitles": {"ABS": [[1379, "abs"]], "ACOS": [[1382, "acos"]], "ACOSD": [[1382, "acosd"]], "ARRAY_AGG": [[1375, "array-agg"]], "ARRAY_CONTAINS": [[1375, "array-contains"]], "ARRAY_GET": [[1375, "array-get"]], "ARRAY_LENGTH": [[1375, "array-length"]], "ARRAY_LOWER": [[1375, "array-lower"]], "ARRAY_MEAN": [[1375, "array-mean"]], "ARRAY_REVERSE": [[1375, "array-reverse"]], "ARRAY_SUM": [[1375, "array-sum"]], "ARRAY_TO_STRING": [[1375, "array-to-string"]], "ARRAY_UNIQUE": [[1375, "array-unique"]], "ARRAY_UPPER": [[1375, "array-upper"]], "ASIN": [[1382, "asin"]], "ASIND": [[1382, "asind"]], "ATAN": [[1382, "atan"]], "ATAN2": [[1382, "atan2"]], "ATAN2D": [[1382, "atan2d"]], "ATAND": [[1382, "atand"]], "AVG": [[1374, "avg"]], "Aggregate": [[1374, null]], "Aggregation": [[203, null], [356, null], [856, null], [965, null]], "Aliases": [[1374, null], [1374, null], [1379, null], [1379, null], [1380, null], [1380, null]], "Array": [[834, null], [1349, null], [1375, null]], "Asserts": [[1388, "asserts"]], "Attributes": [[344, null], [953, null], [1350, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[855, "avro"]], "BIT_AND": [[1376, "bit-and"]], "BIT_COUNT": [[1376, "bit-count"]], "BIT_LENGTH": [[1380, "bit-length"]], "BIT_OR": [[1376, "bit-or"]], "BIT_XOR": [[1376, "bit-xor"]], "Binary": [[835, null], [848, "binary"], [1351, null]], "Bitwise": [[1376, null]], "Boolean": [[836, null], [1352, null]], "CAST": [[1383, "cast"]], "CBRT": [[1379, "cbrt"]], "CEIL": [[1379, "ceil"]], "COALESCE": [[1377, "coalesce"]], "CONCAT": [[1380, "concat"]], "CONCAT_WS": [[1380, "concat-ws"]], "COS": [[1382, "cos"]], "COSD": [[1382, "cosd"]], "COT": [[1382, "cot"]], "COTD": [[1382, "cotd"]], "COUNT": [[1374, "count"]], "CREATE TABLE": [[1387, "create-table"]], "CSV": [[855, "csv"]], "Catalog": [[200, null]], "Categories": [[837, null], [1353, null]], "Clipboard": [[855, "clipboard"]], "Cloud Credentials": [[855, "cloud-credentials"]], "Columns / names": [[839, null]], "Comparison": [[848, "comparison"], [1361, "comparison"]], "Computation": [[345, null], [840, null], [1354, null]], "Conditional": [[1377, null]], "Config": [[202, null]], "Config load, save, state": [[202, "config-load-save-state"]], "Config options": [[202, "config-options"]], "Conjunction": [[848, "conjunction"]], "Conversion": [[853, "conversion"]], "DATE": [[1380, "date"]], "DATE_PART": [[1381, "date-part"]], "DEGREES": [[1382, "degrees"]], "DELETE": [[1387, "delete"]], "DISTINCT": [[1373, "distinct"]], "DIV": [[1379, "div"]], "DROP TABLES": [[1387, "drop-tables"]], "Data types": [[354, null]], "DataFrame": [[349, null]], "DataType": [[354, "datatype"]], "Database": [[855, "database"]], "Delta Lake": [[855, "delta-lake"]], "Descriptive": [[346, null], [954, null], [1355, null]], "Documentation": [[1385, null], [1385, null], [1385, null]], "ENDS_WITH": [[1380, "ends-with"]], "EXCEPT": [[1386, "except"]], "EXP": [[1379, "exp"]], "EXPLAIN": [[1387, "explain"]], "EXTRACT": [[1381, "extract"]], "Errors": [[355, "errors"]], "Examples": [[1, "examples"], [964, "examples"], [1388, "examples"]], "Excel / ODS": [[855, "excel-ods"]], "Exceptions": [[355, null]], "Export": [[347, null], [1356, null]], "Expression SQL": [[1385, "expression-sql"]], "Expression plugins": [[962, "expression-plugins"]], "Expressions": [[842, null]], "Extending the API": [[1, null]], "FIRST": [[1374, "first"]], "FLOOR": [[1379, "floor"]], "FROM": [[1373, "from"]], "Feather / IPC": [[855, "feather-ipc"]], "Frame SQL": [[1385, "frame-sql"]], "Functions": [[841, null], [853, null], [964, "functions"]], "GPUEngine": [[955, null]], "GREATEST": [[1377, "greatest"]], "GROUP BY": [[1373, "group-by"]], "Global SQL": [[1385, "global-sql"]], "GroupBy": [[348, null], [956, null]], "HAVING": [[1373, "having"]], "IF": [[1377, "if"]], "IFNULL": [[1377, "ifnull"]], "INITCAP": [[1380, "initcap"]], "INTERSECT": [[1386, "intersect"]], "IO plugins": [[962, "io-plugins"]], "Iceberg": [[855, "iceberg"]], "Importing": [[964, "importing"]], "InProcessQuery": [[957, null]], "Index": [[0, null]], "Input/output": [[855, null]], "Introduction": [[1385, "introduction"]], "JOIN": [[1373, "join"]], "JSON": [[855, "json"]], "LAST": [[1374, "last"]], "LEAST": [[1377, "least"]], "LEFT": [[1380, "left"]], "LENGTH": [[1380, "length"]], "LIMIT": [[1373, "limit"]], "LN": [[1379, "ln"]], "LOG": [[1379, "log"]], "LOG10": [[1379, "log10"]], "LOG1P": [[1379, "log1p"]], "LOG2": [[1379, "log2"]], "LOWER": [[1380, "lower"]], "LTRIM": [[1380, "ltrim"]], "LazyFrame": [[958, null]], "List": [[843, null], [1358, null]], "MAX": [[1374, "max"]], "MEDIAN": [[1374, "median"]], "MIN": [[1374, "min"]], "MOD": [[1379, "mod"]], "Manipulation/selection": [[351, null], [846, null], [960, null], [1360, null]], "Math": [[1379, null]], "Meta": [[844, null]], "Metadata": [[961, null]], "Methods": [[1385, "methods"]], "Miscellaneous": [[350, null], [845, null], [853, "miscellaneous"], [959, null], [1359, null]], "Multiple Config instances": [[202, "multiple-config-instances"]], "Multiple queries": [[853, "multiple-queries"]], "NORMALIZE": [[1380, "normalize"]], "NULLIF": [[1377, "nullif"]], "Name": [[847, null]], "Nested": [[354, "nested"]], "Numeric": [[354, "numeric"], [848, "numeric"], [1361, "numeric"]], "OCTET_LENGTH": [[1380, "octet-length"]], "OFFSET": [[1373, "offset"]], "ORDER BY": [[1373, "order-by"]], "Operators": [[848, null], [1361, null]], "Other": [[354, "other"]], "PI": [[1379, "pi"]], "POW": [[1379, "pow"]], "Panic": [[355, "panic"]], "Parametric testing": [[1388, "parametric-testing"]], "Parquet": [[855, "parquet"]], "Partition": [[855, "partition"]], "Plot": [[352, null], [1362, null]], "Plugins": [[962, null]], "Polars strategies": [[1388, "polars-strategies"]], "Profiles": [[1388, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[855, "pyarrow-datasets"]], "Python API": [[1385, null]], "Python API reference": [[854, null]], "QUANTILE_CONT": [[1374, "quantile-cont"]], "QUANTILE_DISC": [[1374, "quantile-disc"]], "Querying": [[1385, "querying"]], "RADIANS": [[1382, "radians"]], "REGEXP_LIKE": [[1380, "regexp-like"]], "REPLACE": [[1380, "replace"]], "REVERSE": [[1380, "reverse"]], "RIGHT": [[1380, "right"]], "ROUND": [[1379, "round"]], "RTRIM": [[1380, "rtrim"]], "Random": [[853, "random"]], "SELECT": [[1373, "select"]], "SHOW TABLES": [[1387, "show-tables"]], "SIGN": [[1379, "sign"]], "SIN": [[1382, "sin"]], "SIND": [[1382, "sind"]], "SPLIT_PART": [[1380, "split-part"]], "SQL Clauses": [[1373, null]], "SQL Functions": [[1378, null]], "SQL Interface": [[1384, null]], "SQLContext": [[1385, "sqlcontext"]], "SQRT": [[1379, "sqrt"]], "STARTS_WITH": [[1380, "starts-with"]], "STDDEV": [[1374, "stddev"]], "STRFTIME": [[1381, "strftime"]], "STRING_TO_ARRAY": [[1380, "string-to-array"]], "STRPOS": [[1380, "strpos"]], "STRPTIME": [[1380, "strptime"]], "SUBSTR": [[1380, "substr"]], "SUM": [[1374, "sum"]], "Schema": [[963, null]], "Selectors": [[964, null]], "Serialization": [[350, "serialization"], [959, "serialization"]], "Series": [[1357, null]], "Set Operations": [[1386, null]], "Set operations": [[964, "set-operations"]], "Strategy helpers": [[1388, "strategy-helpers"]], "String": [[354, "string"], [849, null], [1363, null], [1380, null]], "StringCache": [[853, "stringcache"]], "Struct": [[850, null], [1364, null]], "Style": [[353, null]], "TAN": [[1382, "tan"]], "TAND": [[1382, "tand"]], "TIMESTAMP": [[1380, "timestamp"]], "TRUNCATE": [[1387, "truncate"]], "TRY_CAST": [[1383, "try-cast"]], "Table Operations": [[1387, null]], "Temporal": [[354, "temporal"], [851, null], [1365, null], [1381, null]], "Testing": [[1388, null]], "Trigonometry": [[1382, null]], "Types": [[1383, null]], "UNION": [[1386, "union"]], "UNION ALL": [[1386, "union-all"]], "UNION BY NAME": [[1386, "union-by-name"]], "UNNEST": [[1375, "unnest"], [1387, "unnest"]], "UPPER": [[1380, "upper"]], "Unity Catalog": [[201, null]], "Use as a context manager": [[202, "use-as-a-context-manager"]], "Use as a decorator": [[202, "use-as-a-decorator"]], "VARIANCE": [[1374, "variance"]], "WHERE": [[1373, "where"]], "Warnings": [[355, "warnings"]], "Window": [[852, null]], "polars.Catalog": [[187, null]], "polars.Catalog.get_table_info": [[188, null]], "polars.Catalog.list_catalogs": [[189, null]], "polars.Catalog.list_namespaces": [[190, null]], "polars.Catalog.list_tables": [[191, null]], "polars.Catalog.scan_table": [[192, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[204, null]], "polars.DataFrame.__arrow_c_stream__": [[205, null]], "polars.DataFrame.__dataframe__": [[206, null]], "polars.DataFrame.__getitem__": [[207, null]], "polars.DataFrame.approx_n_unique": [[208, null]], "polars.DataFrame.bottom_k": [[209, null]], "polars.DataFrame.cast": [[210, null]], "polars.DataFrame.clear": [[211, null]], "polars.DataFrame.clone": [[212, null]], "polars.DataFrame.collect_schema": [[213, null]], "polars.DataFrame.columns": [[214, null]], "polars.DataFrame.corr": [[215, null]], "polars.DataFrame.count": [[216, null]], "polars.DataFrame.describe": [[217, null]], "polars.DataFrame.deserialize": [[218, null]], "polars.DataFrame.drop": [[219, null]], "polars.DataFrame.drop_in_place": [[220, null]], "polars.DataFrame.drop_nans": [[221, null]], "polars.DataFrame.drop_nulls": [[222, null]], "polars.DataFrame.dtypes": [[223, null]], "polars.DataFrame.equals": [[224, null]], "polars.DataFrame.estimated_size": [[225, null]], "polars.DataFrame.explode": [[226, null]], "polars.DataFrame.extend": [[227, null]], "polars.DataFrame.fill_nan": [[228, null]], "polars.DataFrame.fill_null": [[229, null]], "polars.DataFrame.filter": [[230, null]], "polars.DataFrame.flags": [[231, null]], "polars.DataFrame.fold": [[232, null]], "polars.DataFrame.gather_every": [[233, null]], "polars.DataFrame.get_column": [[234, null]], "polars.DataFrame.get_column_index": [[235, null]], "polars.DataFrame.get_columns": [[236, null]], "polars.DataFrame.glimpse": [[237, null]], "polars.DataFrame.group_by": [[238, null]], "polars.DataFrame.group_by_dynamic": [[239, null]], "polars.DataFrame.hash_rows": [[240, null]], "polars.DataFrame.head": [[241, null]], "polars.DataFrame.height": [[242, null]], "polars.DataFrame.hstack": [[243, null]], "polars.DataFrame.insert_column": [[244, null]], "polars.DataFrame.interpolate": [[245, null]], "polars.DataFrame.is_duplicated": [[246, null]], "polars.DataFrame.is_empty": [[247, null]], "polars.DataFrame.is_unique": [[248, null]], "polars.DataFrame.item": [[249, null]], "polars.DataFrame.iter_columns": [[250, null]], "polars.DataFrame.iter_rows": [[251, null]], "polars.DataFrame.iter_slices": [[252, null]], "polars.DataFrame.join": [[253, null]], "polars.DataFrame.join_asof": [[254, null]], "polars.DataFrame.join_where": [[255, null]], "polars.DataFrame.lazy": [[256, null]], "polars.DataFrame.limit": [[257, null]], "polars.DataFrame.map_rows": [[258, null]], "polars.DataFrame.max": [[259, null]], "polars.DataFrame.max_horizontal": [[260, null]], "polars.DataFrame.mean": [[261, null]], "polars.DataFrame.mean_horizontal": [[262, null]], "polars.DataFrame.median": [[263, null]], "polars.DataFrame.melt": [[264, null]], "polars.DataFrame.merge_sorted": [[265, null]], "polars.DataFrame.min": [[266, null]], "polars.DataFrame.min_horizontal": [[267, null]], "polars.DataFrame.n_chunks": [[268, null]], "polars.DataFrame.n_unique": [[269, null]], "polars.DataFrame.null_count": [[270, null]], "polars.DataFrame.partition_by": [[271, null]], "polars.DataFrame.pipe": [[272, null]], "polars.DataFrame.pivot": [[273, null]], "polars.DataFrame.product": [[274, null]], "polars.DataFrame.quantile": [[275, null]], "polars.DataFrame.rechunk": [[276, null]], "polars.DataFrame.remove": [[277, null]], "polars.DataFrame.rename": [[278, null]], "polars.DataFrame.replace_column": [[279, null]], "polars.DataFrame.reverse": [[280, null]], "polars.DataFrame.rolling": [[281, null]], "polars.DataFrame.row": [[282, null]], "polars.DataFrame.rows": [[283, null]], "polars.DataFrame.rows_by_key": [[284, null]], "polars.DataFrame.sample": [[285, null]], "polars.DataFrame.schema": [[286, null]], "polars.DataFrame.select": [[287, null]], "polars.DataFrame.select_seq": [[288, null]], "polars.DataFrame.serialize": [[289, null]], "polars.DataFrame.set_sorted": [[290, null]], "polars.DataFrame.shape": [[291, null]], "polars.DataFrame.shift": [[292, null]], "polars.DataFrame.shrink_to_fit": [[293, null]], "polars.DataFrame.slice": [[294, null]], "polars.DataFrame.sort": [[295, null]], "polars.DataFrame.sql": [[296, null]], "polars.DataFrame.std": [[297, null]], "polars.DataFrame.sum": [[298, null]], "polars.DataFrame.sum_horizontal": [[299, null]], "polars.DataFrame.tail": [[300, null]], "polars.DataFrame.to_arrow": [[301, null]], "polars.DataFrame.to_dict": [[302, null]], "polars.DataFrame.to_dicts": [[303, null]], "polars.DataFrame.to_dummies": [[304, null]], "polars.DataFrame.to_init_repr": [[305, null]], "polars.DataFrame.to_jax": [[306, null]], "polars.DataFrame.to_numpy": [[307, null]], "polars.DataFrame.to_pandas": [[308, null]], "polars.DataFrame.to_series": [[309, null]], "polars.DataFrame.to_struct": [[310, null]], "polars.DataFrame.to_torch": [[311, null]], "polars.DataFrame.top_k": [[312, null]], "polars.DataFrame.transpose": [[313, null]], "polars.DataFrame.unique": [[314, null]], "polars.DataFrame.unnest": [[315, null]], "polars.DataFrame.unpivot": [[316, null]], "polars.DataFrame.unstack": [[317, null]], "polars.DataFrame.update": [[318, null]], "polars.DataFrame.upsample": [[319, null]], "polars.DataFrame.var": [[320, null]], "polars.DataFrame.vstack": [[321, null]], "polars.DataFrame.width": [[322, null]], "polars.DataFrame.with_columns": [[323, null]], "polars.DataFrame.with_columns_seq": [[324, null]], "polars.DataFrame.with_row_count": [[325, null]], "polars.DataFrame.with_row_index": [[326, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.Expr.abs": [[357, null]], "polars.Expr.add": [[358, null]], "polars.Expr.agg_groups": [[359, null]], "polars.Expr.alias": [[360, null]], "polars.Expr.all": [[361, null]], "polars.Expr.and_": [[362, null]], "polars.Expr.any": [[363, null]], "polars.Expr.append": [[364, null]], "polars.Expr.approx_n_unique": [[365, null]], "polars.Expr.arccos": [[366, null]], "polars.Expr.arccosh": [[367, null]], "polars.Expr.arcsin": [[368, null]], "polars.Expr.arcsinh": [[369, null]], "polars.Expr.arctan": [[370, null]], "polars.Expr.arctanh": [[371, null]], "polars.Expr.arg_max": [[372, null]], "polars.Expr.arg_min": [[373, null]], "polars.Expr.arg_sort": [[374, null]], "polars.Expr.arg_true": [[375, null]], "polars.Expr.arg_unique": [[376, null]], "polars.Expr.arr.all": [[377, null]], "polars.Expr.arr.any": [[378, null]], "polars.Expr.arr.arg_max": [[379, null]], "polars.Expr.arr.arg_min": [[380, null]], "polars.Expr.arr.contains": [[381, null]], "polars.Expr.arr.count_matches": [[382, null]], "polars.Expr.arr.explode": [[383, null]], "polars.Expr.arr.first": [[384, null]], "polars.Expr.arr.get": [[385, null]], "polars.Expr.arr.join": [[386, null]], "polars.Expr.arr.last": [[387, null]], "polars.Expr.arr.max": [[388, null]], "polars.Expr.arr.median": [[389, null]], "polars.Expr.arr.min": [[390, null]], "polars.Expr.arr.n_unique": [[391, null]], "polars.Expr.arr.reverse": [[392, null]], "polars.Expr.arr.shift": [[393, null]], "polars.Expr.arr.sort": [[394, null]], "polars.Expr.arr.std": [[395, null]], "polars.Expr.arr.sum": [[396, null]], "polars.Expr.arr.to_list": [[397, null]], "polars.Expr.arr.to_struct": [[398, null]], "polars.Expr.arr.unique": [[399, null]], "polars.Expr.arr.var": [[400, null]], "polars.Expr.backward_fill": [[401, null]], "polars.Expr.bin.contains": [[402, null]], "polars.Expr.bin.decode": [[403, null]], "polars.Expr.bin.encode": [[404, null]], "polars.Expr.bin.ends_with": [[405, null]], "polars.Expr.bin.reinterpret": [[406, null]], "polars.Expr.bin.size": [[407, null]], "polars.Expr.bin.starts_with": [[408, null]], "polars.Expr.bitwise_and": [[409, null]], "polars.Expr.bitwise_count_ones": [[410, null]], "polars.Expr.bitwise_count_zeros": [[411, null]], "polars.Expr.bitwise_leading_ones": [[412, null]], "polars.Expr.bitwise_leading_zeros": [[413, null]], "polars.Expr.bitwise_or": [[414, null]], "polars.Expr.bitwise_trailing_ones": [[415, null]], "polars.Expr.bitwise_trailing_zeros": [[416, null]], "polars.Expr.bitwise_xor": [[417, null]], "polars.Expr.bottom_k": [[418, null]], "polars.Expr.bottom_k_by": [[419, null]], "polars.Expr.cast": [[420, null]], "polars.Expr.cat.ends_with": [[421, null]], "polars.Expr.cat.get_categories": [[422, null]], "polars.Expr.cat.len_bytes": [[423, null]], "polars.Expr.cat.len_chars": [[424, null]], "polars.Expr.cat.starts_with": [[425, null]], "polars.Expr.cbrt": [[426, null]], "polars.Expr.ceil": [[427, null]], "polars.Expr.clip": [[428, null]], "polars.Expr.cos": [[429, null]], "polars.Expr.cosh": [[430, null]], "polars.Expr.cot": [[431, null]], "polars.Expr.count": [[432, null]], "polars.Expr.cum_count": [[433, null]], "polars.Expr.cum_max": [[434, null]], "polars.Expr.cum_min": [[435, null]], "polars.Expr.cum_prod": [[436, null]], "polars.Expr.cum_sum": [[437, null]], "polars.Expr.cumulative_eval": [[438, null]], "polars.Expr.cut": [[439, null]], "polars.Expr.degrees": [[440, null]], "polars.Expr.deserialize": [[441, null]], "polars.Expr.diff": [[442, null]], "polars.Expr.dot": [[443, null]], "polars.Expr.drop_nans": [[444, null]], "polars.Expr.drop_nulls": [[445, null]], "polars.Expr.dt.add_business_days": [[446, null]], "polars.Expr.dt.base_utc_offset": [[447, null]], "polars.Expr.dt.cast_time_unit": [[448, null]], "polars.Expr.dt.century": [[449, null]], "polars.Expr.dt.combine": [[450, null]], "polars.Expr.dt.convert_time_zone": [[451, null]], "polars.Expr.dt.date": [[452, null]], "polars.Expr.dt.datetime": [[453, null]], "polars.Expr.dt.day": [[454, null]], "polars.Expr.dt.dst_offset": [[455, null]], "polars.Expr.dt.epoch": [[456, null]], "polars.Expr.dt.hour": [[457, null]], "polars.Expr.dt.is_business_day": [[458, null]], "polars.Expr.dt.is_leap_year": [[459, null]], "polars.Expr.dt.iso_year": [[460, null]], "polars.Expr.dt.microsecond": [[461, null]], "polars.Expr.dt.millennium": [[462, null]], "polars.Expr.dt.millisecond": [[463, null]], "polars.Expr.dt.minute": [[464, null]], "polars.Expr.dt.month": [[465, null]], "polars.Expr.dt.month_end": [[466, null]], "polars.Expr.dt.month_start": [[467, null]], "polars.Expr.dt.nanosecond": [[468, null]], "polars.Expr.dt.offset_by": [[469, null]], "polars.Expr.dt.ordinal_day": [[470, null]], "polars.Expr.dt.quarter": [[471, null]], "polars.Expr.dt.replace": [[472, null]], "polars.Expr.dt.replace_time_zone": [[473, null]], "polars.Expr.dt.round": [[474, null]], "polars.Expr.dt.second": [[475, null]], "polars.Expr.dt.strftime": [[476, null]], "polars.Expr.dt.time": [[477, null]], "polars.Expr.dt.timestamp": [[478, null]], "polars.Expr.dt.to_string": [[479, null]], "polars.Expr.dt.total_days": [[480, null]], "polars.Expr.dt.total_hours": [[481, null]], "polars.Expr.dt.total_microseconds": [[482, null]], "polars.Expr.dt.total_milliseconds": [[483, null]], "polars.Expr.dt.total_minutes": [[484, null]], "polars.Expr.dt.total_nanoseconds": [[485, null]], "polars.Expr.dt.total_seconds": [[486, null]], "polars.Expr.dt.truncate": [[487, null]], "polars.Expr.dt.week": [[488, null]], "polars.Expr.dt.weekday": [[489, null]], "polars.Expr.dt.with_time_unit": [[490, null]], "polars.Expr.dt.year": [[491, null]], "polars.Expr.entropy": [[492, null]], "polars.Expr.eq": [[493, null]], "polars.Expr.eq_missing": [[494, null]], "polars.Expr.ewm_mean": [[495, null]], "polars.Expr.ewm_mean_by": [[496, null]], "polars.Expr.ewm_std": [[497, null]], "polars.Expr.ewm_var": [[498, null]], "polars.Expr.exclude": [[499, null]], "polars.Expr.exp": [[500, null]], "polars.Expr.explode": [[501, null]], "polars.Expr.extend_constant": [[502, null]], "polars.Expr.fill_nan": [[503, null]], "polars.Expr.fill_null": [[504, null]], "polars.Expr.filter": [[505, null]], "polars.Expr.first": [[506, null]], "polars.Expr.flatten": [[507, null]], "polars.Expr.floor": [[508, null]], "polars.Expr.floordiv": [[509, null]], "polars.Expr.forward_fill": [[510, null]], "polars.Expr.from_json": [[511, null]], "polars.Expr.gather": [[512, null]], "polars.Expr.gather_every": [[513, null]], "polars.Expr.ge": [[514, null]], "polars.Expr.get": [[515, null]], "polars.Expr.gt": [[516, null]], "polars.Expr.has_nulls": [[517, null]], "polars.Expr.hash": [[518, null]], "polars.Expr.head": [[519, null]], "polars.Expr.hist": [[520, null]], "polars.Expr.implode": [[521, null]], "polars.Expr.index_of": [[522, null]], "polars.Expr.inspect": [[523, null]], "polars.Expr.interpolate": [[524, null]], "polars.Expr.interpolate_by": [[525, null]], "polars.Expr.is_between": [[526, null]], "polars.Expr.is_duplicated": [[527, null]], "polars.Expr.is_finite": [[528, null]], "polars.Expr.is_first_distinct": [[529, null]], "polars.Expr.is_in": [[530, null]], "polars.Expr.is_infinite": [[531, null]], "polars.Expr.is_last_distinct": [[532, null]], "polars.Expr.is_nan": [[533, null]], "polars.Expr.is_not_nan": [[534, null]], "polars.Expr.is_not_null": [[535, null]], "polars.Expr.is_null": [[536, null]], "polars.Expr.is_unique": [[537, null]], "polars.Expr.kurtosis": [[538, null]], "polars.Expr.last": [[539, null]], "polars.Expr.le": [[540, null]], "polars.Expr.len": [[541, null]], "polars.Expr.limit": [[542, null]], "polars.Expr.list.all": [[543, null]], "polars.Expr.list.any": [[544, null]], "polars.Expr.list.arg_max": [[545, null]], "polars.Expr.list.arg_min": [[546, null]], "polars.Expr.list.concat": [[547, null]], "polars.Expr.list.contains": [[548, null]], "polars.Expr.list.count_matches": [[549, null]], "polars.Expr.list.diff": [[550, null]], "polars.Expr.list.drop_nulls": [[551, null]], "polars.Expr.list.eval": [[552, null]], "polars.Expr.list.explode": [[553, null]], "polars.Expr.list.first": [[554, null]], "polars.Expr.list.gather": [[555, null]], "polars.Expr.list.gather_every": [[556, null]], "polars.Expr.list.get": [[557, null]], "polars.Expr.list.head": [[558, null]], "polars.Expr.list.join": [[559, null]], "polars.Expr.list.last": [[560, null]], "polars.Expr.list.len": [[561, null]], "polars.Expr.list.max": [[562, null]], "polars.Expr.list.mean": [[563, null]], "polars.Expr.list.median": [[564, null]], "polars.Expr.list.min": [[565, null]], "polars.Expr.list.n_unique": [[566, null]], "polars.Expr.list.reverse": [[567, null]], "polars.Expr.list.sample": [[568, null]], "polars.Expr.list.set_difference": [[569, null]], "polars.Expr.list.set_intersection": [[570, null]], "polars.Expr.list.set_symmetric_difference": [[571, null]], "polars.Expr.list.set_union": [[572, null]], "polars.Expr.list.shift": [[573, null]], "polars.Expr.list.slice": [[574, null]], "polars.Expr.list.sort": [[575, null]], "polars.Expr.list.std": [[576, null]], "polars.Expr.list.sum": [[577, null]], "polars.Expr.list.tail": [[578, null]], "polars.Expr.list.to_array": [[579, null]], "polars.Expr.list.to_struct": [[580, null]], "polars.Expr.list.unique": [[581, null]], "polars.Expr.list.var": [[582, null]], "polars.Expr.log": [[583, null]], "polars.Expr.log10": [[584, null]], "polars.Expr.log1p": [[585, null]], "polars.Expr.lower_bound": [[586, null]], "polars.Expr.lt": [[587, null]], "polars.Expr.map_batches": [[588, null]], "polars.Expr.map_elements": [[589, null]], "polars.Expr.max": [[590, null]], "polars.Expr.mean": [[591, null]], "polars.Expr.median": [[592, null]], "polars.Expr.meta.eq": [[593, null]], "polars.Expr.meta.has_multiple_outputs": [[594, null]], "polars.Expr.meta.is_column": [[595, null]], "polars.Expr.meta.is_column_selection": [[596, null]], "polars.Expr.meta.is_literal": [[597, null]], "polars.Expr.meta.is_regex_projection": [[598, null]], "polars.Expr.meta.ne": [[599, null]], "polars.Expr.meta.output_name": [[600, null]], "polars.Expr.meta.pop": [[601, null]], "polars.Expr.meta.root_names": [[602, null]], "polars.Expr.meta.serialize": [[603, null]], "polars.Expr.meta.show_graph": [[604, null]], "polars.Expr.meta.tree_format": [[605, null]], "polars.Expr.meta.undo_aliases": [[606, null]], "polars.Expr.meta.write_json": [[607, null]], "polars.Expr.min": [[608, null]], "polars.Expr.mod": [[609, null]], "polars.Expr.mode": [[610, null]], "polars.Expr.mul": [[611, null]], "polars.Expr.n_unique": [[612, null]], "polars.Expr.name.keep": [[613, null]], "polars.Expr.name.map": [[614, null]], "polars.Expr.name.map_fields": [[615, null]], "polars.Expr.name.prefix": [[616, null]], "polars.Expr.name.prefix_fields": [[617, null]], "polars.Expr.name.suffix": [[618, null]], "polars.Expr.name.suffix_fields": [[619, null]], "polars.Expr.name.to_lowercase": [[620, null]], "polars.Expr.name.to_uppercase": [[621, null]], "polars.Expr.nan_max": [[622, null]], "polars.Expr.nan_min": [[623, null]], "polars.Expr.ne": [[624, null]], "polars.Expr.ne_missing": [[625, null]], "polars.Expr.neg": [[626, null]], "polars.Expr.not_": [[627, null]], "polars.Expr.null_count": [[628, null]], "polars.Expr.or_": [[629, null]], "polars.Expr.over": [[630, null]], "polars.Expr.pct_change": [[631, null]], "polars.Expr.peak_max": [[632, null]], "polars.Expr.peak_min": [[633, null]], "polars.Expr.pipe": [[634, null]], "polars.Expr.pow": [[635, null]], "polars.Expr.product": [[636, null]], "polars.Expr.qcut": [[637, null]], "polars.Expr.quantile": [[638, null]], "polars.Expr.radians": [[639, null]], "polars.Expr.rank": [[640, null]], "polars.Expr.rechunk": [[641, null]], "polars.Expr.reinterpret": [[642, null]], "polars.Expr.repeat_by": [[643, null]], "polars.Expr.replace": [[644, null]], "polars.Expr.replace_strict": [[645, null]], "polars.Expr.reshape": [[646, null]], "polars.Expr.reverse": [[647, null]], "polars.Expr.rle": [[648, null]], "polars.Expr.rle_id": [[649, null]], "polars.Expr.rolling": [[650, null]], "polars.Expr.rolling_kurtosis": [[651, null]], "polars.Expr.rolling_map": [[652, null]], "polars.Expr.rolling_max": [[653, null]], "polars.Expr.rolling_max_by": [[654, null]], "polars.Expr.rolling_mean": [[655, null]], "polars.Expr.rolling_mean_by": [[656, null]], "polars.Expr.rolling_median": [[657, null]], "polars.Expr.rolling_median_by": [[658, null]], "polars.Expr.rolling_min": [[659, null]], "polars.Expr.rolling_min_by": [[660, null]], "polars.Expr.rolling_quantile": [[661, null]], "polars.Expr.rolling_quantile_by": [[662, null]], "polars.Expr.rolling_skew": [[663, null]], "polars.Expr.rolling_std": [[664, null]], "polars.Expr.rolling_std_by": [[665, null]], "polars.Expr.rolling_sum": [[666, null]], "polars.Expr.rolling_sum_by": [[667, null]], "polars.Expr.rolling_var": [[668, null]], "polars.Expr.rolling_var_by": [[669, null]], "polars.Expr.round": [[670, null]], "polars.Expr.round_sig_figs": [[671, null]], "polars.Expr.sample": [[672, null]], "polars.Expr.search_sorted": [[673, null]], "polars.Expr.set_sorted": [[674, null]], "polars.Expr.shift": [[675, null]], "polars.Expr.shrink_dtype": [[676, null]], "polars.Expr.shuffle": [[677, null]], "polars.Expr.sign": [[678, null]], "polars.Expr.sin": [[679, null]], "polars.Expr.sinh": [[680, null]], "polars.Expr.skew": [[681, null]], "polars.Expr.slice": [[682, null]], "polars.Expr.sort": [[683, null]], "polars.Expr.sort_by": [[684, null]], "polars.Expr.sqrt": [[685, null]], "polars.Expr.std": [[686, null]], "polars.Expr.str.concat": [[687, null]], "polars.Expr.str.contains": [[688, null]], "polars.Expr.str.contains_any": [[689, null]], "polars.Expr.str.count_matches": [[690, null]], "polars.Expr.str.decode": [[691, null]], "polars.Expr.str.encode": [[692, null]], "polars.Expr.str.ends_with": [[693, null]], "polars.Expr.str.escape_regex": [[694, null]], "polars.Expr.str.explode": [[695, null]], "polars.Expr.str.extract": [[696, null]], "polars.Expr.str.extract_all": [[697, null]], "polars.Expr.str.extract_groups": [[698, null]], "polars.Expr.str.extract_many": [[699, null]], "polars.Expr.str.find": [[700, null]], "polars.Expr.str.find_many": [[701, null]], "polars.Expr.str.head": [[702, null]], "polars.Expr.str.join": [[703, null]], "polars.Expr.str.json_decode": [[704, null]], "polars.Expr.str.json_path_match": [[705, null]], "polars.Expr.str.len_bytes": [[706, null]], "polars.Expr.str.len_chars": [[707, null]], "polars.Expr.str.normalize": [[708, null]], "polars.Expr.str.pad_end": [[709, null]], "polars.Expr.str.pad_start": [[710, null]], "polars.Expr.str.replace": [[711, null]], "polars.Expr.str.replace_all": [[712, null]], "polars.Expr.str.replace_many": [[713, null]], "polars.Expr.str.reverse": [[714, null]], "polars.Expr.str.slice": [[715, null]], "polars.Expr.str.split": [[716, null]], "polars.Expr.str.split_exact": [[717, null]], "polars.Expr.str.splitn": [[718, null]], "polars.Expr.str.starts_with": [[719, null]], "polars.Expr.str.strip_chars": [[720, null]], "polars.Expr.str.strip_chars_end": [[721, null]], "polars.Expr.str.strip_chars_start": [[722, null]], "polars.Expr.str.strip_prefix": [[723, null]], "polars.Expr.str.strip_suffix": [[724, null]], "polars.Expr.str.strptime": [[725, null]], "polars.Expr.str.tail": [[726, null]], "polars.Expr.str.to_date": [[727, null]], "polars.Expr.str.to_datetime": [[728, null]], "polars.Expr.str.to_decimal": [[729, null]], "polars.Expr.str.to_integer": [[730, null]], "polars.Expr.str.to_lowercase": [[731, null]], "polars.Expr.str.to_time": [[732, null]], "polars.Expr.str.to_titlecase": [[733, null]], "polars.Expr.str.to_uppercase": [[734, null]], "polars.Expr.str.zfill": [[735, null]], "polars.Expr.struct.field": [[736, null]], "polars.Expr.struct.json_encode": [[737, null]], "polars.Expr.struct.rename_fields": [[738, null]], "polars.Expr.struct.unnest": [[739, null]], "polars.Expr.struct.with_fields": [[740, null]], "polars.Expr.sub": [[741, null]], "polars.Expr.sum": [[742, null]], "polars.Expr.tail": [[743, null]], "polars.Expr.tan": [[744, null]], "polars.Expr.tanh": [[745, null]], "polars.Expr.to_physical": [[746, null]], "polars.Expr.top_k": [[747, null]], "polars.Expr.top_k_by": [[748, null]], "polars.Expr.truediv": [[749, null]], "polars.Expr.unique": [[750, null]], "polars.Expr.unique_counts": [[751, null]], "polars.Expr.upper_bound": [[752, null]], "polars.Expr.value_counts": [[753, null]], "polars.Expr.var": [[754, null]], "polars.Expr.where": [[755, null]], "polars.Expr.xor": [[756, null]], "polars.LazyFrame.approx_n_unique": [[857, null]], "polars.LazyFrame.bottom_k": [[858, null]], "polars.LazyFrame.cache": [[859, null]], "polars.LazyFrame.cast": [[860, null]], "polars.LazyFrame.clear": [[861, null]], "polars.LazyFrame.clone": [[862, null]], "polars.LazyFrame.collect": [[863, null]], "polars.LazyFrame.collect_async": [[864, null]], "polars.LazyFrame.collect_schema": [[865, null]], "polars.LazyFrame.columns": [[866, null]], "polars.LazyFrame.count": [[867, null]], "polars.LazyFrame.describe": [[868, null]], "polars.LazyFrame.deserialize": [[869, null]], "polars.LazyFrame.drop": [[870, null]], "polars.LazyFrame.drop_nans": [[871, null]], "polars.LazyFrame.drop_nulls": [[872, null]], "polars.LazyFrame.dtypes": [[873, null]], "polars.LazyFrame.explain": [[874, null]], "polars.LazyFrame.explode": [[875, null]], "polars.LazyFrame.fill_nan": [[876, null]], "polars.LazyFrame.fill_null": [[877, null]], "polars.LazyFrame.filter": [[878, null]], "polars.LazyFrame.first": [[879, null]], "polars.LazyFrame.gather_every": [[880, null]], "polars.LazyFrame.group_by": [[881, null]], "polars.LazyFrame.group_by_dynamic": [[882, null]], "polars.LazyFrame.head": [[883, null]], "polars.LazyFrame.inspect": [[884, null]], "polars.LazyFrame.interpolate": [[885, null]], "polars.LazyFrame.join": [[886, null]], "polars.LazyFrame.join_asof": [[887, null]], "polars.LazyFrame.join_where": [[888, null]], "polars.LazyFrame.last": [[889, null]], "polars.LazyFrame.lazy": [[890, null]], "polars.LazyFrame.limit": [[891, null]], "polars.LazyFrame.map_batches": [[892, null]], "polars.LazyFrame.max": [[893, null]], "polars.LazyFrame.mean": [[894, null]], "polars.LazyFrame.median": [[895, null]], "polars.LazyFrame.melt": [[896, null]], "polars.LazyFrame.merge_sorted": [[897, null]], "polars.LazyFrame.min": [[898, null]], "polars.LazyFrame.null_count": [[899, null]], "polars.LazyFrame.pipe": [[900, null]], "polars.LazyFrame.profile": [[901, null]], "polars.LazyFrame.quantile": [[902, null]], "polars.LazyFrame.remote": [[903, null]], "polars.LazyFrame.remove": [[904, null]], "polars.LazyFrame.rename": [[905, null]], "polars.LazyFrame.reverse": [[906, null]], "polars.LazyFrame.rolling": [[907, null]], "polars.LazyFrame.schema": [[908, null]], "polars.LazyFrame.select": [[909, null]], "polars.LazyFrame.select_seq": [[910, null]], "polars.LazyFrame.serialize": [[911, null]], "polars.LazyFrame.set_sorted": [[912, null]], "polars.LazyFrame.shift": [[913, null]], "polars.LazyFrame.show_graph": [[914, null]], "polars.LazyFrame.sink_csv": [[48, null]], "polars.LazyFrame.sink_ipc": [[49, null]], "polars.LazyFrame.sink_ndjson": [[50, null]], "polars.LazyFrame.sink_parquet": [[51, null]], "polars.LazyFrame.slice": [[915, null]], "polars.LazyFrame.sort": [[916, null]], "polars.LazyFrame.sql": [[917, null]], "polars.LazyFrame.std": [[918, null]], "polars.LazyFrame.sum": [[919, null]], "polars.LazyFrame.tail": [[920, null]], "polars.LazyFrame.top_k": [[921, null]], "polars.LazyFrame.unique": [[922, null]], "polars.LazyFrame.unnest": [[923, null]], "polars.LazyFrame.unpivot": [[924, null]], "polars.LazyFrame.update": [[925, null]], "polars.LazyFrame.var": [[926, null]], "polars.LazyFrame.width": [[927, null]], "polars.LazyFrame.with_columns": [[928, null]], "polars.LazyFrame.with_columns_seq": [[929, null]], "polars.LazyFrame.with_context": [[930, null]], "polars.LazyFrame.with_row_count": [[931, null]], "polars.LazyFrame.with_row_index": [[932, null]], "polars.PartitionByKey": [[52, null]], "polars.PartitionMaxSize": [[53, null]], "polars.PartitionParted": [[54, null]], "polars.SQLContext.execute": [[1366, null]], "polars.SQLContext.execute_global": [[1367, null]], "polars.SQLContext.register": [[1368, null]], "polars.SQLContext.register_globals": [[1369, null]], "polars.SQLContext.register_many": [[1370, null]], "polars.SQLContext.tables": [[1371, null]], "polars.SQLContext.unregister": [[1372, null]], "polars.Series.__array__": [[966, null]], "polars.Series.__arrow_c_stream__": [[967, null]], "polars.Series.__getitem__": [[968, null]], "polars.Series.abs": [[969, null]], "polars.Series.alias": [[970, null]], "polars.Series.all": [[971, null]], "polars.Series.any": [[972, null]], "polars.Series.append": [[973, null]], "polars.Series.approx_n_unique": [[974, null]], "polars.Series.arccos": [[975, null]], "polars.Series.arccosh": [[976, null]], "polars.Series.arcsin": [[977, null]], "polars.Series.arcsinh": [[978, null]], "polars.Series.arctan": [[979, null]], "polars.Series.arctanh": [[980, null]], "polars.Series.arg_max": [[981, null]], "polars.Series.arg_min": [[982, null]], "polars.Series.arg_sort": [[983, null]], "polars.Series.arg_true": [[984, null]], "polars.Series.arg_unique": [[985, null]], "polars.Series.arr.all": [[986, null]], "polars.Series.arr.any": [[987, null]], "polars.Series.arr.arg_max": [[988, null]], "polars.Series.arr.arg_min": [[989, null]], "polars.Series.arr.contains": [[990, null]], "polars.Series.arr.count_matches": [[991, null]], "polars.Series.arr.explode": [[992, null]], "polars.Series.arr.first": [[993, null]], "polars.Series.arr.get": [[994, null]], "polars.Series.arr.join": [[995, null]], "polars.Series.arr.last": [[996, null]], "polars.Series.arr.max": [[997, null]], "polars.Series.arr.median": [[998, null]], "polars.Series.arr.min": [[999, null]], "polars.Series.arr.n_unique": [[1000, null]], "polars.Series.arr.reverse": [[1001, null]], "polars.Series.arr.shift": [[1002, null]], "polars.Series.arr.sort": [[1003, null]], "polars.Series.arr.std": [[1004, null]], "polars.Series.arr.sum": [[1005, null]], "polars.Series.arr.to_list": [[1006, null]], "polars.Series.arr.to_struct": [[1007, null]], "polars.Series.arr.unique": [[1008, null]], "polars.Series.arr.var": [[1009, null]], "polars.Series.backward_fill": [[1010, null]], "polars.Series.bin.contains": [[1011, null]], "polars.Series.bin.decode": [[1012, null]], "polars.Series.bin.encode": [[1013, null]], "polars.Series.bin.ends_with": [[1014, null]], "polars.Series.bin.reinterpret": [[1015, null]], "polars.Series.bin.size": [[1016, null]], "polars.Series.bin.starts_with": [[1017, null]], "polars.Series.bitwise_and": [[1018, null]], "polars.Series.bitwise_count_ones": [[1019, null]], "polars.Series.bitwise_count_zeros": [[1020, null]], "polars.Series.bitwise_leading_ones": [[1021, null]], "polars.Series.bitwise_leading_zeros": [[1022, null]], "polars.Series.bitwise_or": [[1023, null]], "polars.Series.bitwise_trailing_ones": [[1024, null]], "polars.Series.bitwise_trailing_zeros": [[1025, null]], "polars.Series.bitwise_xor": [[1026, null]], "polars.Series.bottom_k": [[1027, null]], "polars.Series.cast": [[1028, null]], "polars.Series.cat.ends_with": [[1029, null]], "polars.Series.cat.get_categories": [[1030, null]], "polars.Series.cat.is_local": [[1031, null]], "polars.Series.cat.len_bytes": [[1032, null]], "polars.Series.cat.len_chars": [[1033, null]], "polars.Series.cat.starts_with": [[1034, null]], "polars.Series.cat.to_local": [[1035, null]], "polars.Series.cat.uses_lexical_ordering": [[1036, null]], "polars.Series.cbrt": [[1037, null]], "polars.Series.ceil": [[1038, null]], "polars.Series.chunk_lengths": [[1039, null]], "polars.Series.clear": [[1040, null]], "polars.Series.clip": [[1041, null]], "polars.Series.clone": [[1042, null]], "polars.Series.cos": [[1043, null]], "polars.Series.cosh": [[1044, null]], "polars.Series.cot": [[1045, null]], "polars.Series.count": [[1046, null]], "polars.Series.cum_count": [[1047, null]], "polars.Series.cum_max": [[1048, null]], "polars.Series.cum_min": [[1049, null]], "polars.Series.cum_prod": [[1050, null]], "polars.Series.cum_sum": [[1051, null]], "polars.Series.cumulative_eval": [[1052, null]], "polars.Series.cut": [[1053, null]], "polars.Series.describe": [[1054, null]], "polars.Series.diff": [[1055, null]], "polars.Series.dot": [[1056, null]], "polars.Series.drop_nans": [[1057, null]], "polars.Series.drop_nulls": [[1058, null]], "polars.Series.dt.add_business_days": [[1059, null]], "polars.Series.dt.base_utc_offset": [[1060, null]], "polars.Series.dt.cast_time_unit": [[1061, null]], "polars.Series.dt.century": [[1062, null]], "polars.Series.dt.combine": [[1063, null]], "polars.Series.dt.convert_time_zone": [[1064, null]], "polars.Series.dt.date": [[1065, null]], "polars.Series.dt.datetime": [[1066, null]], "polars.Series.dt.day": [[1067, null]], "polars.Series.dt.dst_offset": [[1068, null]], "polars.Series.dt.epoch": [[1069, null]], "polars.Series.dt.hour": [[1070, null]], "polars.Series.dt.is_business_day": [[1071, null]], "polars.Series.dt.is_leap_year": [[1072, null]], "polars.Series.dt.iso_year": [[1073, null]], "polars.Series.dt.max": [[1074, null]], "polars.Series.dt.mean": [[1075, null]], "polars.Series.dt.median": [[1076, null]], "polars.Series.dt.microsecond": [[1077, null]], "polars.Series.dt.millennium": [[1078, null]], "polars.Series.dt.millisecond": [[1079, null]], "polars.Series.dt.min": [[1080, null]], "polars.Series.dt.minute": [[1081, null]], "polars.Series.dt.month": [[1082, null]], "polars.Series.dt.month_end": [[1083, null]], "polars.Series.dt.month_start": [[1084, null]], "polars.Series.dt.nanosecond": [[1085, null]], "polars.Series.dt.offset_by": [[1086, null]], "polars.Series.dt.ordinal_day": [[1087, null]], "polars.Series.dt.quarter": [[1088, null]], "polars.Series.dt.replace": [[1089, null]], "polars.Series.dt.replace_time_zone": [[1090, null]], "polars.Series.dt.round": [[1091, null]], "polars.Series.dt.second": [[1092, null]], "polars.Series.dt.strftime": [[1093, null]], "polars.Series.dt.time": [[1094, null]], "polars.Series.dt.timestamp": [[1095, null]], "polars.Series.dt.to_string": [[1096, null]], "polars.Series.dt.total_days": [[1097, null]], "polars.Series.dt.total_hours": [[1098, null]], "polars.Series.dt.total_microseconds": [[1099, null]], "polars.Series.dt.total_milliseconds": [[1100, null]], "polars.Series.dt.total_minutes": [[1101, null]], "polars.Series.dt.total_nanoseconds": [[1102, null]], "polars.Series.dt.total_seconds": [[1103, null]], "polars.Series.dt.truncate": [[1104, null]], "polars.Series.dt.week": [[1105, null]], "polars.Series.dt.weekday": [[1106, null]], "polars.Series.dt.with_time_unit": [[1107, null]], "polars.Series.dt.year": [[1108, null]], "polars.Series.dtype": [[1109, null]], "polars.Series.entropy": [[1110, null]], "polars.Series.eq": [[1111, null]], "polars.Series.eq_missing": [[1112, null]], "polars.Series.equals": [[1113, null]], "polars.Series.estimated_size": [[1114, null]], "polars.Series.ewm_mean": [[1115, null]], "polars.Series.ewm_mean_by": [[1116, null]], "polars.Series.ewm_std": [[1117, null]], "polars.Series.ewm_var": [[1118, null]], "polars.Series.exp": [[1119, null]], "polars.Series.explode": [[1120, null]], "polars.Series.extend": [[1121, null]], "polars.Series.extend_constant": [[1122, null]], "polars.Series.fill_nan": [[1123, null]], "polars.Series.fill_null": [[1124, null]], "polars.Series.filter": [[1125, null]], "polars.Series.first": [[1126, null]], "polars.Series.flags": [[1127, null]], "polars.Series.floor": [[1128, null]], "polars.Series.forward_fill": [[1129, null]], "polars.Series.gather": [[1130, null]], "polars.Series.gather_every": [[1131, null]], "polars.Series.ge": [[1132, null]], "polars.Series.get_chunks": [[1133, null]], "polars.Series.gt": [[1134, null]], "polars.Series.has_nulls": [[1135, null]], "polars.Series.has_validity": [[1136, null]], "polars.Series.hash": [[1137, null]], "polars.Series.head": [[1138, null]], "polars.Series.hist": [[1139, null]], "polars.Series.implode": [[1140, null]], "polars.Series.index_of": [[1141, null]], "polars.Series.interpolate": [[1142, null]], "polars.Series.interpolate_by": [[1143, null]], "polars.Series.is_between": [[1144, null]], "polars.Series.is_duplicated": [[1145, null]], "polars.Series.is_empty": [[1146, null]], "polars.Series.is_finite": [[1147, null]], "polars.Series.is_first_distinct": [[1148, null]], "polars.Series.is_in": [[1149, null]], "polars.Series.is_infinite": [[1150, null]], "polars.Series.is_last_distinct": [[1151, null]], "polars.Series.is_nan": [[1152, null]], "polars.Series.is_not_nan": [[1153, null]], "polars.Series.is_not_null": [[1154, null]], "polars.Series.is_null": [[1155, null]], "polars.Series.is_sorted": [[1156, null]], "polars.Series.is_unique": [[1157, null]], "polars.Series.item": [[1158, null]], "polars.Series.kurtosis": [[1159, null]], "polars.Series.last": [[1160, null]], "polars.Series.le": [[1161, null]], "polars.Series.len": [[1162, null]], "polars.Series.limit": [[1163, null]], "polars.Series.list.all": [[1164, null]], "polars.Series.list.any": [[1165, null]], "polars.Series.list.arg_max": [[1166, null]], "polars.Series.list.arg_min": [[1167, null]], "polars.Series.list.concat": [[1168, null]], "polars.Series.list.contains": [[1169, null]], "polars.Series.list.count_matches": [[1170, null]], "polars.Series.list.diff": [[1171, null]], "polars.Series.list.drop_nulls": [[1172, null]], "polars.Series.list.eval": [[1173, null]], "polars.Series.list.explode": [[1174, null]], "polars.Series.list.first": [[1175, null]], "polars.Series.list.gather": [[1176, null]], "polars.Series.list.gather_every": [[1177, null]], "polars.Series.list.get": [[1178, null]], "polars.Series.list.head": [[1179, null]], "polars.Series.list.join": [[1180, null]], "polars.Series.list.last": [[1181, null]], "polars.Series.list.len": [[1182, null]], "polars.Series.list.max": [[1183, null]], "polars.Series.list.mean": [[1184, null]], "polars.Series.list.median": [[1185, null]], "polars.Series.list.min": [[1186, null]], "polars.Series.list.n_unique": [[1187, null]], "polars.Series.list.reverse": [[1188, null]], "polars.Series.list.sample": [[1189, null]], "polars.Series.list.set_difference": [[1190, null]], "polars.Series.list.set_intersection": [[1191, null]], "polars.Series.list.set_symmetric_difference": [[1192, null]], "polars.Series.list.set_union": [[1193, null]], "polars.Series.list.shift": [[1194, null]], "polars.Series.list.slice": [[1195, null]], "polars.Series.list.sort": [[1196, null]], "polars.Series.list.std": [[1197, null]], "polars.Series.list.sum": [[1198, null]], "polars.Series.list.tail": [[1199, null]], "polars.Series.list.to_array": [[1200, null]], "polars.Series.list.to_struct": [[1201, null]], "polars.Series.list.unique": [[1202, null]], "polars.Series.list.var": [[1203, null]], "polars.Series.log": [[1204, null]], "polars.Series.log10": [[1205, null]], "polars.Series.log1p": [[1206, null]], "polars.Series.lower_bound": [[1207, null]], "polars.Series.lt": [[1208, null]], "polars.Series.map_elements": [[1209, null]], "polars.Series.max": [[1210, null]], "polars.Series.mean": [[1211, null]], "polars.Series.median": [[1212, null]], "polars.Series.min": [[1213, null]], "polars.Series.mode": [[1214, null]], "polars.Series.n_chunks": [[1215, null]], "polars.Series.n_unique": [[1216, null]], "polars.Series.name": [[1217, null]], "polars.Series.nan_max": [[1218, null]], "polars.Series.nan_min": [[1219, null]], "polars.Series.ne": [[1220, null]], "polars.Series.ne_missing": [[1221, null]], "polars.Series.new_from_index": [[1222, null]], "polars.Series.not_": [[1223, null]], "polars.Series.null_count": [[1224, null]], "polars.Series.pct_change": [[1225, null]], "polars.Series.peak_max": [[1226, null]], "polars.Series.peak_min": [[1227, null]], "polars.Series.pow": [[1228, null]], "polars.Series.product": [[1229, null]], "polars.Series.qcut": [[1230, null]], "polars.Series.quantile": [[1231, null]], "polars.Series.rank": [[1232, null]], "polars.Series.rechunk": [[1233, null]], "polars.Series.reinterpret": [[1234, null]], "polars.Series.rename": [[1235, null]], "polars.Series.replace": [[1236, null]], "polars.Series.replace_strict": [[1237, null]], "polars.Series.reshape": [[1238, null]], "polars.Series.reverse": [[1239, null]], "polars.Series.rle": [[1240, null]], "polars.Series.rle_id": [[1241, null]], "polars.Series.rolling_kurtosis": [[1242, null]], "polars.Series.rolling_map": [[1243, null]], "polars.Series.rolling_max": [[1244, null]], "polars.Series.rolling_mean": [[1245, null]], "polars.Series.rolling_median": [[1246, null]], "polars.Series.rolling_min": [[1247, null]], "polars.Series.rolling_quantile": [[1248, null]], "polars.Series.rolling_skew": [[1249, null]], "polars.Series.rolling_std": [[1250, null]], "polars.Series.rolling_sum": [[1251, null]], "polars.Series.rolling_var": [[1252, null]], "polars.Series.round": [[1253, null]], "polars.Series.round_sig_figs": [[1254, null]], "polars.Series.sample": [[1255, null]], "polars.Series.scatter": [[1256, null]], "polars.Series.search_sorted": [[1257, null]], "polars.Series.set": [[1258, null]], "polars.Series.set_sorted": [[1259, null]], "polars.Series.shape": [[1260, null]], "polars.Series.shift": [[1261, null]], "polars.Series.shrink_dtype": [[1262, null]], "polars.Series.shrink_to_fit": [[1263, null]], "polars.Series.shuffle": [[1264, null]], "polars.Series.sign": [[1265, null]], "polars.Series.sin": [[1266, null]], "polars.Series.sinh": [[1267, null]], "polars.Series.skew": [[1268, null]], "polars.Series.slice": [[1269, null]], "polars.Series.sort": [[1270, null]], "polars.Series.sqrt": [[1271, null]], "polars.Series.std": [[1272, null]], "polars.Series.str.concat": [[1273, null]], "polars.Series.str.contains": [[1274, null]], "polars.Series.str.contains_any": [[1275, null]], "polars.Series.str.count_matches": [[1276, null]], "polars.Series.str.decode": [[1277, null]], "polars.Series.str.encode": [[1278, null]], "polars.Series.str.ends_with": [[1279, null]], "polars.Series.str.escape_regex": [[1280, null]], "polars.Series.str.explode": [[1281, null]], "polars.Series.str.extract": [[1282, null]], "polars.Series.str.extract_all": [[1283, null]], "polars.Series.str.extract_groups": [[1284, null]], "polars.Series.str.extract_many": [[1285, null]], "polars.Series.str.find": [[1286, null]], "polars.Series.str.find_many": [[1287, null]], "polars.Series.str.head": [[1288, null]], "polars.Series.str.join": [[1289, null]], "polars.Series.str.json_decode": [[1290, null]], "polars.Series.str.json_path_match": [[1291, null]], "polars.Series.str.len_bytes": [[1292, null]], "polars.Series.str.len_chars": [[1293, null]], "polars.Series.str.normalize": [[1294, null]], "polars.Series.str.pad_end": [[1295, null]], "polars.Series.str.pad_start": [[1296, null]], "polars.Series.str.replace": [[1297, null]], "polars.Series.str.replace_all": [[1298, null]], "polars.Series.str.replace_many": [[1299, null]], "polars.Series.str.reverse": [[1300, null]], "polars.Series.str.slice": [[1301, null]], "polars.Series.str.split": [[1302, null]], "polars.Series.str.split_exact": [[1303, null]], "polars.Series.str.splitn": [[1304, null]], "polars.Series.str.starts_with": [[1305, null]], "polars.Series.str.strip_chars": [[1306, null]], "polars.Series.str.strip_chars_end": [[1307, null]], "polars.Series.str.strip_chars_start": [[1308, null]], "polars.Series.str.strip_prefix": [[1309, null]], "polars.Series.str.strip_suffix": [[1310, null]], "polars.Series.str.strptime": [[1311, null]], "polars.Series.str.tail": [[1312, null]], "polars.Series.str.to_date": [[1313, null]], "polars.Series.str.to_datetime": [[1314, null]], "polars.Series.str.to_decimal": [[1315, null]], "polars.Series.str.to_integer": [[1316, null]], "polars.Series.str.to_lowercase": [[1317, null]], "polars.Series.str.to_time": [[1318, null]], "polars.Series.str.to_titlecase": [[1319, null]], "polars.Series.str.to_uppercase": [[1320, null]], "polars.Series.str.zfill": [[1321, null]], "polars.Series.struct.field": [[1322, null]], "polars.Series.struct.fields": [[1323, null]], "polars.Series.struct.json_encode": [[1324, null]], "polars.Series.struct.rename_fields": [[1325, null]], "polars.Series.struct.schema": [[1326, null]], "polars.Series.struct.unnest": [[1327, null]], "polars.Series.sum": [[1328, null]], "polars.Series.tail": [[1329, null]], "polars.Series.tan": [[1330, null]], "polars.Series.tanh": [[1331, null]], "polars.Series.to_arrow": [[1332, null]], "polars.Series.to_dummies": [[1333, null]], "polars.Series.to_frame": [[1334, null]], "polars.Series.to_init_repr": [[1335, null]], "polars.Series.to_jax": [[1336, null]], "polars.Series.to_list": [[1337, null]], "polars.Series.to_numpy": [[1338, null]], "polars.Series.to_pandas": [[1339, null]], "polars.Series.to_physical": [[1340, null]], "polars.Series.to_torch": [[1341, null]], "polars.Series.top_k": [[1342, null]], "polars.Series.unique": [[1343, null]], "polars.Series.unique_counts": [[1344, null]], "polars.Series.upper_bound": [[1345, null]], "polars.Series.value_counts": [[1346, null]], "polars.Series.var": [[1347, null]], "polars.Series.zip_with": [[1348, null]], "polars.StringCache": [[55, null]], "polars.align_frames": [[56, null]], "polars.all": [[757, null]], "polars.all_horizontal": [[758, null]], "polars.any": [[759, null]], "polars.any_horizontal": [[760, null]], "polars.api.register_dataframe_namespace": [[57, null]], "polars.api.register_expr_namespace": [[58, null]], "polars.api.register_lazyframe_namespace": [[59, null]], "polars.api.register_series_namespace": [[60, null]], "polars.approx_n_unique": [[761, null]], "polars.arange": [[762, null]], "polars.arctan2": [[763, null]], "polars.arctan2d": [[764, null]], "polars.arg_sort_by": [[765, null]], "polars.arg_where": [[766, null]], "polars.build_info": [[61, null]], "polars.business_day_count": [[767, null]], "polars.catalog.unity.CatalogInfo": [[193, null]], "polars.catalog.unity.ColumnInfo": [[194, null]], "polars.catalog.unity.DataSourceFormat": [[195, null]], "polars.catalog.unity.NamespaceInfo": [[196, null]], "polars.catalog.unity.TableInfo": [[197, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[198, null]], "polars.catalog.unity.TableType": [[199, null]], "polars.coalesce": [[768, null]], "polars.col": [[838, null]], "polars.collect_all": [[62, null]], "polars.collect_all_async": [[63, null]], "polars.concat": [[64, null]], "polars.concat_arr": [[769, null]], "polars.concat_list": [[770, null]], "polars.concat_str": [[771, null]], "polars.corr": [[772, null]], "polars.count": [[773, null]], "polars.cov": [[774, null]], "polars.cum_count": [[775, null]], "polars.cum_fold": [[776, null]], "polars.cum_reduce": [[777, null]], "polars.cum_sum": [[778, null]], "polars.cum_sum_horizontal": [[779, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[327, null]], "polars.dataframe.group_by.GroupBy.agg": [[328, null]], "polars.dataframe.group_by.GroupBy.all": [[329, null]], "polars.dataframe.group_by.GroupBy.count": [[330, null]], "polars.dataframe.group_by.GroupBy.first": [[331, null]], "polars.dataframe.group_by.GroupBy.head": [[332, null]], "polars.dataframe.group_by.GroupBy.last": [[333, null]], "polars.dataframe.group_by.GroupBy.len": [[334, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[335, null]], "polars.dataframe.group_by.GroupBy.max": [[336, null]], "polars.dataframe.group_by.GroupBy.mean": [[337, null]], "polars.dataframe.group_by.GroupBy.median": [[338, null]], "polars.dataframe.group_by.GroupBy.min": [[339, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[340, null]], "polars.dataframe.group_by.GroupBy.quantile": [[341, null]], "polars.dataframe.group_by.GroupBy.sum": [[342, null]], "polars.dataframe.group_by.GroupBy.tail": [[343, null]], "polars.datatypes.Array": [[65, null]], "polars.datatypes.Binary": [[66, null]], "polars.datatypes.Boolean": [[67, null]], "polars.datatypes.Categorical": [[68, null]], "polars.datatypes.DataType": [[69, null]], "polars.datatypes.Date": [[70, null]], "polars.datatypes.Datetime": [[71, null]], "polars.datatypes.Decimal": [[72, null]], "polars.datatypes.Duration": [[73, null]], "polars.datatypes.Enum": [[74, null]], "polars.datatypes.Field": [[75, null]], "polars.datatypes.Float32": [[76, null]], "polars.datatypes.Float64": [[77, null]], "polars.datatypes.Int128": [[78, null]], "polars.datatypes.Int16": [[79, null]], "polars.datatypes.Int32": [[80, null]], "polars.datatypes.Int64": [[81, null]], "polars.datatypes.Int8": [[82, null]], "polars.datatypes.List": [[83, null]], "polars.datatypes.Null": [[84, null]], "polars.datatypes.Object": [[85, null]], "polars.datatypes.String": [[86, null]], "polars.datatypes.Struct": [[87, null]], "polars.datatypes.Time": [[88, null]], "polars.datatypes.UInt16": [[89, null]], "polars.datatypes.UInt32": [[90, null]], "polars.datatypes.UInt64": [[91, null]], "polars.datatypes.UInt8": [[92, null]], "polars.datatypes.Unknown": [[93, null]], "polars.datatypes.Utf8": [[94, null]], "polars.date": [[780, null]], "polars.date_range": [[781, null]], "polars.date_ranges": [[782, null]], "polars.datetime": [[783, null]], "polars.datetime_range": [[784, null]], "polars.datetime_ranges": [[785, null]], "polars.defer": [[95, null]], "polars.disable_string_cache": [[96, null]], "polars.duration": [[786, null]], "polars.element": [[787, null]], "polars.enable_string_cache": [[97, null]], "polars.escape_regex": [[98, null]], "polars.exceptions.CategoricalRemappingWarning": [[99, null]], "polars.exceptions.ChronoFormatWarning": [[100, null]], "polars.exceptions.ColumnNotFoundError": [[101, null]], "polars.exceptions.ComputeError": [[102, null]], "polars.exceptions.CustomUFuncWarning": [[103, null]], "polars.exceptions.DataOrientationWarning": [[104, null]], "polars.exceptions.DuplicateError": [[105, null]], "polars.exceptions.InvalidOperationError": [[106, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[107, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[108, null]], "polars.exceptions.NoDataError": [[109, null]], "polars.exceptions.NoRowsReturnedError": [[110, null]], "polars.exceptions.OutOfBoundsError": [[111, null]], "polars.exceptions.PanicException": [[112, null]], "polars.exceptions.ParameterCollisionError": [[113, null]], "polars.exceptions.PerformanceWarning": [[114, null]], "polars.exceptions.PolarsError": [[115, null]], "polars.exceptions.PolarsInefficientMapWarning": [[116, null]], "polars.exceptions.PolarsWarning": [[117, null]], "polars.exceptions.RowsError": [[118, null]], "polars.exceptions.SQLInterfaceError": [[119, null]], "polars.exceptions.SQLSyntaxError": [[120, null]], "polars.exceptions.SchemaError": [[121, null]], "polars.exceptions.SchemaFieldNotFoundError": [[122, null]], "polars.exceptions.ShapeError": [[123, null]], "polars.exceptions.StringCacheMismatchError": [[124, null]], "polars.exceptions.StructFieldNotFoundError": [[125, null]], "polars.exceptions.TooManyRowsReturnedError": [[126, null]], "polars.exceptions.UnstableWarning": [[127, null]], "polars.exceptions.UnsuitableSQLError": [[128, null]], "polars.exclude": [[788, null]], "polars.explain_all": [[129, null]], "polars.first": [[789, null]], "polars.fold": [[790, null]], "polars.format": [[791, null]], "polars.from_arrow": [[130, null]], "polars.from_dataframe": [[131, null]], "polars.from_dict": [[132, null]], "polars.from_dicts": [[133, null]], "polars.from_epoch": [[792, null]], "polars.from_numpy": [[134, null]], "polars.from_pandas": [[135, null]], "polars.from_records": [[136, null]], "polars.from_repr": [[137, null]], "polars.get_index_type": [[138, null]], "polars.groups": [[793, null]], "polars.head": [[794, null]], "polars.implode": [[795, null]], "polars.int_range": [[796, null]], "polars.int_ranges": [[797, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[139, null]], "polars.io.partition.BasePartitionContext": [[140, null]], "polars.io.partition.KeyedPartition": [[141, null]], "polars.io.partition.KeyedPartitionContext": [[142, null]], "polars.io.plugins.register_io_source": [[143, null]], "polars.json_normalize": [[144, null]], "polars.last": [[798, null]], "polars.lazyframe.engine_config.GPUEngine": [[933, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[934, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[935, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[936, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[937, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[938, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[939, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[940, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[941, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[942, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[943, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[944, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[945, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[949, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[950, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[951, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[952, null]], "polars.len": [[799, null]], "polars.linear_space": [[800, null]], "polars.linear_spaces": [[801, null]], "polars.lit": [[802, null]], "polars.map_batches": [[803, null]], "polars.map_groups": [[804, null]], "polars.max": [[805, null]], "polars.max_horizontal": [[806, null]], "polars.mean": [[807, null]], "polars.mean_horizontal": [[808, null]], "polars.median": [[809, null]], "polars.min": [[810, null]], "polars.min_horizontal": [[811, null]], "polars.n_unique": [[812, null]], "polars.nth": [[813, null]], "polars.ones": [[814, null]], "polars.plugins.register_plugin_function": [[145, null]], "polars.quantile": [[815, null]], "polars.read_avro": [[146, null]], "polars.read_clipboard": [[147, null]], "polars.read_csv": [[148, null]], "polars.read_csv_batched": [[149, null]], "polars.read_database": [[150, null]], "polars.read_database_uri": [[151, null]], "polars.read_delta": [[152, null]], "polars.read_excel": [[153, null]], "polars.read_ipc": [[154, null]], "polars.read_ipc_schema": [[155, null]], "polars.read_ipc_stream": [[156, null]], "polars.read_json": [[157, null]], "polars.read_ndjson": [[158, null]], "polars.read_ods": [[159, null]], "polars.read_parquet": [[160, null]], "polars.read_parquet_schema": [[161, null]], "polars.reduce": [[816, null]], "polars.repeat": [[817, null]], "polars.rolling_corr": [[818, null]], "polars.rolling_cov": [[819, null]], "polars.scan_csv": [[162, null]], "polars.scan_delta": [[163, null]], "polars.scan_iceberg": [[164, null]], "polars.scan_ipc": [[165, null]], "polars.scan_ndjson": [[166, null]], "polars.scan_parquet": [[167, null]], "polars.scan_pyarrow_dataset": [[168, null]], "polars.select": [[820, null]], "polars.set_random_seed": [[169, null]], "polars.show_versions": [[170, null]], "polars.sql": [[821, null]], "polars.sql_expr": [[822, null]], "polars.std": [[823, null]], "polars.struct": [[824, null]], "polars.sum": [[825, null]], "polars.sum_horizontal": [[826, null]], "polars.tail": [[827, null]], "polars.testing.assert_frame_equal": [[171, null]], "polars.testing.assert_frame_not_equal": [[172, null]], "polars.testing.assert_series_equal": [[173, null]], "polars.testing.assert_series_not_equal": [[174, null]], "polars.testing.parametric.column": [[175, null]], "polars.testing.parametric.columns": [[176, null]], "polars.testing.parametric.create_list_strategy": [[177, null]], "polars.testing.parametric.dataframes": [[178, null]], "polars.testing.parametric.dtypes": [[179, null]], "polars.testing.parametric.lists": [[180, null]], "polars.testing.parametric.load_profile": [[181, null]], "polars.testing.parametric.series": [[182, null]], "polars.testing.parametric.set_profile": [[183, null]], "polars.thread_pool_size": [[184, null]], "polars.threadpool_size": [[185, null]], "polars.time": [[828, null]], "polars.time_range": [[829, null]], "polars.time_ranges": [[830, null]], "polars.using_string_cache": [[186, null]], "polars.var": [[831, null]], "polars.when": [[832, null]], "polars.zeros": [[833, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[204, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[966, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[205, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[967, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[206, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1385, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1385, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[207, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[968, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[187, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[193, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[194, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[196, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[197, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[65, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[66, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[67, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[68, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[69, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[70, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[71, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[72, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[73, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[74, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[75, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[76, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[77, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[78, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[79, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[80, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[81, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[82, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[83, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[84, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[85, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[86, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[87, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[88, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[89, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[90, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[91, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[92, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[93, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[140, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[141, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[142, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[933, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[52, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[53, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[54, "polars.PartitionParted.__init__", false]], "__init__() (polars.sqlcontext method)": [[1385, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[55, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[175, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[327, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[357, "polars.Expr.abs", false]], "abs() (polars.series method)": [[969, "polars.Series.abs", false]], "add() (polars.expr method)": [[358, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[446, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1059, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[934, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[359, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[360, "polars.Expr.alias", false]], "alias() (polars.series method)": [[970, "polars.Series.alias", false]], "align_frames() (in module polars)": [[56, "polars.align_frames", false]], "all() (in module polars)": [[757, "polars.all", false]], "all() (in module polars.selectors)": [[964, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[361, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[377, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[543, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[935, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[971, "polars.Series.all", false]], "all() (polars.series.arr method)": [[986, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1164, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[758, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[964, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[964, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[362, "polars.Expr.and_", false]], "any() (in module polars)": [[759, "polars.any", false]], "any() (polars.expr method)": [[363, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[378, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[544, "polars.Expr.list.any", false]], "any() (polars.series method)": [[972, "polars.Series.any", false]], "any() (polars.series.arr method)": [[987, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1165, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[760, "polars.any_horizontal", false]], "append() (polars.expr method)": [[364, "polars.Expr.append", false]], "append() (polars.series method)": [[973, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[761, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[208, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[365, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[857, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[974, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[762, "polars.arange", false]], "arccos() (polars.expr method)": [[366, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[975, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[367, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[976, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[368, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[977, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[369, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[978, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[370, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[979, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[763, "polars.arctan2", false]], "arctan2d() (in module polars)": [[764, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[371, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[980, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[372, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[379, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[545, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[981, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[988, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1166, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[373, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[380, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[546, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[982, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[989, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1167, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[374, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[983, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[765, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[375, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[984, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[376, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[985, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[766, "polars.arg_where", false]], "array (class in polars.datatypes)": [[65, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[171, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[172, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[173, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[174, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[401, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1010, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[447, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1060, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[140, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[66, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[964, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[409, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1018, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[410, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1019, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[411, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1020, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[412, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1021, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[413, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1022, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[414, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1023, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[415, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1024, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[416, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1025, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[417, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1026, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[67, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[964, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[209, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[418, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[858, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1027, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[419, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[61, "polars.build_info", false]], "business_day_count() (in module polars)": [[767, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[964, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[964, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[964, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[859, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[950, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[210, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[420, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[860, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1028, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[448, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1061, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[187, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[193, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[68, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[964, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[99, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[426, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1037, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[427, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1038, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[449, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1062, "polars.Series.dt.century", false]], "chronoformatwarning": [[100, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1039, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[211, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[861, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1040, "polars.Series.clear", false]], "clip() (polars.expr method)": [[428, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1041, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[212, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[862, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1042, "polars.Series.clone", false]], "coalesce() (in module polars)": [[768, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[863, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[62, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[63, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[864, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[213, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[865, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[175, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[194, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[101, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[214, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[866, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[176, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[450, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1063, "polars.Series.dt.combine", false]], "computeerror": [[102, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[64, "polars.concat", false]], "concat() (polars.expr.list method)": [[547, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[687, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1168, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1273, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[769, "polars.concat_arr", false]], "concat_list() (in module polars)": [[770, "polars.concat_list", false]], "concat_str() (in module polars)": [[771, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[964, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[381, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[402, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[548, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[688, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[990, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1011, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1169, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1274, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[689, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1275, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[451, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1064, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[772, "polars.corr", false]], "corr() (polars.dataframe method)": [[215, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[429, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1043, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[430, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1044, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[431, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1045, "polars.Series.cot", false]], "count() (in module polars)": [[773, "polars.count", false]], "count() (polars.dataframe method)": [[216, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[432, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[867, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[936, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1046, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[382, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[549, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[690, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[991, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1170, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1276, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[774, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[177, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[775, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[433, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1047, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[776, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[434, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1048, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[435, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1049, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[436, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1050, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[777, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[778, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[437, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1051, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[779, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[438, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1052, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[103, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[439, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1053, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[178, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[104, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[195, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[69, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[70, "polars.datatypes.Date", false]], "date() (in module polars)": [[780, "polars.date", false]], "date() (in module polars.selectors)": [[964, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[452, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1065, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[781, "polars.date_range", false]], "date_ranges() (in module polars)": [[782, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[71, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[783, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[964, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[453, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1066, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[784, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[785, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[454, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1067, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[72, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[964, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[403, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[691, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1012, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1277, "polars.Series.str.decode", false]], "defer() (in module polars)": [[95, "polars.defer", false]], "degrees() (polars.expr method)": [[440, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[217, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[868, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1054, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[218, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[441, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[869, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[442, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[550, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1055, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1171, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[964, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[96, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[443, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1056, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[219, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[870, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[220, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[221, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[444, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[871, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1057, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[222, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[445, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[551, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[872, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1058, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1172, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[455, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1068, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1109, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[223, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[873, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[105, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[73, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[786, "polars.duration", false]], "duration() (in module polars.selectors)": [[964, "polars.selectors.duration", false]], "element() (in module polars)": [[787, "polars.element", false]], "enable_string_cache() (in module polars)": [[97, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[404, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[692, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1013, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1278, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[964, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[405, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[421, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[693, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1014, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1029, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1279, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[492, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1110, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[74, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[456, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1069, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[493, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[593, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1111, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[494, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1112, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[224, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1113, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[98, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[694, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1280, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[225, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1114, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[552, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1173, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[495, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1115, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[496, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1116, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[497, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1117, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[498, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1118, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[788, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[964, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[499, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1366, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1367, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[500, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1119, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[964, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[874, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[129, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[226, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[501, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[383, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[553, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[695, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[875, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1120, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[992, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1174, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1281, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[227, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1121, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[502, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1122, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[696, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1282, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[697, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1283, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[698, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1284, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[699, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1285, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[951, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[952, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[75, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[736, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1322, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1323, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[228, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[503, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[876, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1123, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[229, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[504, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[877, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1124, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[230, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[505, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[878, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1125, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[700, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1286, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[701, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1287, "polars.Series.str.find_many", false]], "first() (in module polars)": [[789, "polars.first", false]], "first() (in module polars.selectors)": [[964, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[506, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[384, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[554, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[879, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[937, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1126, "polars.Series.first", false]], "first() (polars.series.arr method)": [[993, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1175, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[231, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1127, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[507, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[964, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[76, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[77, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[508, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1128, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[509, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[790, "polars.fold", false]], "fold() (polars.dataframe method)": [[232, "polars.DataFrame.fold", false]], "format() (in module polars)": [[791, "polars.format", false]], "forward_fill() (polars.expr method)": [[510, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1129, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[130, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[131, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[132, "polars.from_dict", false]], "from_dicts() (in module polars)": [[133, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[792, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[511, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[134, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[135, "polars.from_pandas", false]], "from_records() (in module polars)": [[136, "polars.from_records", false]], "from_repr() (in module polars)": [[137, "polars.from_repr", false]], "gather() (polars.expr method)": [[512, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[555, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1130, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1176, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[233, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[513, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[556, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[880, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1131, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1177, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[514, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1132, "polars.Series.ge", false]], "get() (polars.expr method)": [[515, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[385, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[557, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[994, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1178, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[422, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1030, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1133, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[234, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[235, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[236, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[138, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[198, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[188, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[237, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[933, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[238, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[881, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[239, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[882, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[793, "polars.groups", false]], "gt() (polars.expr method)": [[516, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1134, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[594, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[517, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1135, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1136, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[518, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1137, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[240, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[794, "polars.head", false]], "head() (polars.dataframe method)": [[241, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[519, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[558, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[702, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[883, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[938, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1138, "polars.Series.head", false]], "head() (polars.series.list method)": [[1179, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1288, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[242, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[520, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1139, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[457, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1070, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[243, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[795, "polars.implode", false]], "implode() (polars.expr method)": [[521, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1140, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[522, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1141, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[244, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[523, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[884, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[78, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[79, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[80, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[81, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[82, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[796, "polars.int_range", false]], "int_ranges() (in module polars)": [[797, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[964, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[245, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[524, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[885, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1142, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[525, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1143, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[106, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[526, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1144, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[458, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1071, "polars.Series.dt.is_business_day", false]], "is_column() (polars.expr.meta method)": [[595, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[596, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[246, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[527, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1145, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[247, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1146, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[528, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1147, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[529, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1148, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[530, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1149, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[531, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1150, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[532, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1151, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[459, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1072, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[597, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1031, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[533, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1152, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[534, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1153, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[535, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1154, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[536, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1155, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[598, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[964, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1156, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[248, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[537, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1157, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[460, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1073, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[249, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1158, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[250, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[251, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[252, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[253, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[386, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[559, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[703, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[886, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[995, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1180, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1289, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[254, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[887, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[255, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[888, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[704, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1290, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[737, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1324, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[144, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[705, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1291, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[613, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[141, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[142, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[538, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1159, "polars.Series.kurtosis", false]], "last() (in module polars)": [[798, "polars.last", false]], "last() (in module polars.selectors)": [[964, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[333, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[539, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[387, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[560, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[889, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[939, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1160, "polars.Series.last", false]], "last() (polars.series.arr method)": [[996, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1181, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[256, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[890, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[540, "polars.Expr.le", false]], "le() (polars.series method)": [[1161, "polars.Series.le", false]], "len() (in module polars)": [[799, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[334, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[541, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[561, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[940, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1162, "polars.Series.len", false]], "len() (polars.series.list method)": [[1182, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[423, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[706, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1032, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1292, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[424, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[707, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1033, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1293, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[257, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[542, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[891, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1163, "polars.Series.limit", false]], "linear_space() (in module polars)": [[800, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[801, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[83, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[189, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[190, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[191, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[802, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[583, "polars.Expr.log", false]], "log() (polars.series method)": [[1204, "polars.Series.log", false]], "log10() (polars.expr method)": [[584, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1205, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[585, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1206, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[586, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1207, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[587, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1208, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[614, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[803, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[588, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[892, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[589, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1209, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[615, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[804, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[941, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[258, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[107, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[964, "polars.selectors.matches", false]], "max() (in module polars)": [[805, "polars.max", false]], "max() (polars.dataframe method)": [[259, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[590, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[388, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[562, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[893, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[942, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1210, "polars.Series.max", false]], "max() (polars.series.arr method)": [[997, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1074, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1183, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[806, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[260, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[807, "polars.mean", false]], "mean() (polars.dataframe method)": [[261, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[591, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[563, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[894, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[943, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1211, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1075, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1184, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[808, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[262, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[809, "polars.median", false]], "median() (polars.dataframe method)": [[263, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[592, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[389, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[564, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[895, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[944, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1212, "polars.Series.median", false]], "median() (polars.series.arr method)": [[998, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1076, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1185, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[264, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[896, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[265, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[897, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[461, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1077, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[462, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1078, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[463, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1079, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[810, "polars.min", false]], "min() (polars.dataframe method)": [[266, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[608, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[390, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[565, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[898, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[945, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1213, "polars.Series.min", false]], "min() (polars.series.arr method)": [[999, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1080, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1186, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[811, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[267, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[464, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1081, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[609, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[610, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1214, "polars.Series.mode", false]], "module": [[964, "module-polars.selectors", false]], "moduleupgraderequirederror": [[108, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[465, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1082, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[466, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1083, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[467, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1084, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[611, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[268, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1215, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[812, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[269, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[612, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[391, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[566, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[946, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1216, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1000, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1187, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1217, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[196, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[622, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1218, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[623, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1219, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[468, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1085, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[624, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[599, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1220, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[625, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1221, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[626, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1222, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[139, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[109, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[708, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1294, "polars.Series.str.normalize", false]], "norowsreturnederror": [[110, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[627, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1223, "polars.Series.not_", false]], "nth() (in module polars)": [[813, "polars.nth", false]], "null (class in polars.datatypes)": [[84, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[270, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[628, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[899, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1224, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[964, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[85, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[469, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1086, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[814, "polars.ones", false]], "or_() (polars.expr method)": [[629, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[470, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1087, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[111, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[600, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[630, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[709, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1295, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[710, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1296, "polars.Series.str.pad_start", false]], "panicexception": [[112, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[113, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[271, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[52, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[53, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[54, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[631, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1225, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[632, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1226, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[633, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1227, "polars.Series.peak_min", false]], "performancewarning": [[114, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[272, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[634, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[900, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[273, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[352, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1362, "polars.Series.plot", false]], "polars.selectors": [[964, "module-polars.selectors", false]], "polarserror": [[115, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[116, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[117, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[601, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[635, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1228, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[616, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[617, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[274, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[636, "polars.Expr.product", false]], "product() (polars.series method)": [[1229, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[901, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[637, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1230, "polars.Series.qcut", false]], "quantile() (in module polars)": [[815, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[275, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[638, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[902, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1231, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[471, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1088, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[639, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[640, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1232, "polars.Series.rank", false]], "read_avro() (in module polars)": [[146, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[147, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[148, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[149, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[150, "polars.read_database", false]], "read_database_uri() (in module polars)": [[151, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[152, "polars.read_delta", false]], "read_excel() (in module polars)": [[153, "polars.read_excel", false]], "read_ipc() (in module polars)": [[154, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[155, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[156, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[157, "polars.read_json", false]], "read_ndjson() (in module polars)": [[158, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[159, "polars.read_ods", false]], "read_parquet() (in module polars)": [[160, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[161, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[276, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[641, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1233, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[816, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1368, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[57, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[58, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1369, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[143, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[59, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1370, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[145, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[60, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[642, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[406, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1234, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1015, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[903, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[277, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[904, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[278, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[905, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1235, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[738, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1325, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[817, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[643, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[644, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[472, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[711, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1236, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1089, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1297, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[712, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1298, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[279, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[713, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1299, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[645, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1237, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[473, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1090, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[646, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1238, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[280, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[647, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[392, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[567, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[714, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[906, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1239, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1001, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1188, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1300, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[648, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1240, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[649, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1241, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[281, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[650, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[907, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[818, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[819, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[651, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1242, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[652, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1243, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[653, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1244, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[654, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[655, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1245, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[656, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[657, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1246, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[658, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[659, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1247, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[660, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[661, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1248, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[662, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[663, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1249, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[664, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1250, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[665, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[666, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1251, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[667, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[668, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1252, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[669, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[602, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[670, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[474, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1253, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1091, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[671, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1254, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[282, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[283, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[284, "polars.DataFrame.rows_by_key", false]], "rowserror": [[118, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[285, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[672, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[568, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1255, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1189, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[162, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[163, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[164, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[165, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[166, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[167, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[168, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[192, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1256, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[286, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[908, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1326, "polars.Series.struct.schema", false]], "schemaerror": [[121, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[122, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[673, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1257, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[475, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1092, "polars.Series.dt.second", false]], "select() (in module polars)": [[820, "polars.select", false]], "select() (polars.dataframe method)": [[287, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[909, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[288, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[910, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[289, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[603, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[911, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1258, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[569, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1190, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[570, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1191, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[169, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[290, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[674, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[912, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1259, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[571, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1192, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[572, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1193, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[291, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1260, "polars.Series.shape", false]], "shapeerror": [[123, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[292, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[675, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[393, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[573, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[913, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1261, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1002, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1194, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[604, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[914, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[170, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[676, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1262, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[293, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1263, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[677, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1264, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[678, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1265, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[964, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[679, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1266, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[680, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1267, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[407, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1016, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[681, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1268, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[294, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[682, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[574, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[715, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[915, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1269, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1195, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1301, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[295, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[683, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[394, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[575, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[916, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1270, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1003, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1196, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[684, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[716, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1302, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[717, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1303, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[718, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1304, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[821, "polars.sql", false]], "sql() (polars.dataframe method)": [[296, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[917, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[822, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1385, "polars.SQLContext", false]], "sqlinterfaceerror": [[119, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[120, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[685, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1271, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[964, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[408, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[425, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[719, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1017, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1034, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1305, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[823, "polars.std", false]], "std() (polars.dataframe method)": [[297, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[686, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[395, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[576, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[918, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1272, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1004, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1197, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[476, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1093, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[86, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[964, "polars.selectors.string", false]], "stringcache (class in polars)": [[55, "polars.StringCache", false]], "stringcachemismatcherror": [[124, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[720, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1306, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[721, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1307, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[722, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1308, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[723, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1309, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[724, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1310, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[725, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1311, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[87, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[824, "polars.struct", false]], "structfieldnotfounderror": [[125, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[353, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[741, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[618, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[619, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[825, "polars.sum", false]], "sum() (polars.dataframe method)": [[298, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[742, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[396, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[577, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[919, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1328, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1005, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1198, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[826, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[299, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[197, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1371, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[199, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[827, "polars.tail", false]], "tail() (polars.dataframe method)": [[300, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[743, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[578, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[726, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[920, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1329, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1199, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1312, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[744, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1330, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[745, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1331, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[964, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[184, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[185, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[88, "polars.datatypes.Time", false]], "time() (in module polars)": [[828, "polars.time", false]], "time() (in module polars.selectors)": [[964, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[477, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1094, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[829, "polars.time_range", false]], "time_ranges() (in module polars)": [[830, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[478, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1095, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[579, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1200, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[301, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1332, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[727, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1313, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[728, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1314, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[729, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1315, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[302, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[303, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[304, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1333, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1334, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[305, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1335, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[730, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1316, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[306, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1336, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[397, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1337, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1006, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1035, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[620, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[731, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1317, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[307, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1338, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[308, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1339, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[746, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1340, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[309, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[479, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1096, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[310, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[398, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[580, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1007, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1201, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[732, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1318, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[733, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1319, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[311, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1341, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[621, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[734, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1320, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[126, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[312, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[747, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[921, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1342, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[748, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[480, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1097, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[481, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1098, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[482, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1099, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[483, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1100, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[484, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1101, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[485, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1102, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[486, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1103, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[313, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[605, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[749, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[487, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1104, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[89, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[90, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[91, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[92, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[606, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[314, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[750, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[399, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[581, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[922, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1343, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1008, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1202, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[751, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1344, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[93, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[315, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[739, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[923, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1327, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[316, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[924, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1372, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[964, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[127, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[317, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[128, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[318, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[925, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[752, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1345, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[319, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1036, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[186, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[94, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[753, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1346, "polars.Series.value_counts", false]], "var() (in module polars)": [[831, "polars.var", false]], "var() (polars.dataframe method)": [[320, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[754, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[400, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[582, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[926, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1347, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1009, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1203, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[321, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[488, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1105, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[489, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1106, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[832, "polars.when", false]], "where() (polars.expr method)": [[755, "polars.Expr.where", false]], "width (polars.dataframe property)": [[322, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[927, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[323, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[928, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[324, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[929, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[930, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[740, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[325, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[931, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[326, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[932, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[490, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1107, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[607, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[756, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[491, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1108, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[833, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[735, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1321, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1348, "polars.Series.zip_with", false]]}, "objects": {"polars": [[187, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [52, 0, 1, "", "PartitionByKey"], [53, 0, 1, "", "PartitionMaxSize"], [54, 0, 1, "", "PartitionParted"], [1385, 0, 1, "", "SQLContext"], [55, 0, 1, "", "StringCache"], [56, 4, 1, "", "align_frames"], [757, 4, 1, "", "all"], [758, 4, 1, "", "all_horizontal"], [759, 4, 1, "", "any"], [760, 4, 1, "", "any_horizontal"], [761, 4, 1, "", "approx_n_unique"], [762, 4, 1, "", "arange"], [763, 4, 1, "", "arctan2"], [764, 4, 1, "", "arctan2d"], [765, 4, 1, "", "arg_sort_by"], [766, 4, 1, "", "arg_where"], [61, 4, 1, "", "build_info"], [767, 4, 1, "", "business_day_count"], [768, 4, 1, "", "coalesce"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "collect_all_async"], [64, 4, 1, "", "concat"], [769, 4, 1, "", "concat_arr"], [770, 4, 1, "", "concat_list"], [771, 4, 1, "", "concat_str"], [772, 4, 1, "", "corr"], [773, 4, 1, "", "count"], [774, 4, 1, "", "cov"], [775, 4, 1, "", "cum_count"], [776, 4, 1, "", "cum_fold"], [777, 4, 1, "", "cum_reduce"], [778, 4, 1, "", "cum_sum"], [779, 4, 1, "", "cum_sum_horizontal"], [780, 4, 1, "", "date"], [781, 4, 1, "", "date_range"], [782, 4, 1, "", "date_ranges"], [783, 4, 1, "", "datetime"], [784, 4, 1, "", "datetime_range"], [785, 4, 1, "", "datetime_ranges"], [95, 4, 1, "", "defer"], [96, 4, 1, "", "disable_string_cache"], [786, 4, 1, "", "duration"], [787, 4, 1, "", "element"], [97, 4, 1, "", "enable_string_cache"], [98, 4, 1, "", "escape_regex"], [788, 4, 1, "", "exclude"], [129, 4, 1, "", "explain_all"], [789, 4, 1, "", "first"], [790, 4, 1, "", "fold"], [791, 4, 1, "", "format"], [130, 4, 1, "", "from_arrow"], [131, 4, 1, "", "from_dataframe"], [132, 4, 1, "", "from_dict"], [133, 4, 1, "", "from_dicts"], [792, 4, 1, "", "from_epoch"], [134, 4, 1, "", "from_numpy"], [135, 4, 1, "", "from_pandas"], [136, 4, 1, "", "from_records"], [137, 4, 1, "", "from_repr"], [138, 4, 1, "", "get_index_type"], [793, 4, 1, "", "groups"], [794, 4, 1, "", "head"], [795, 4, 1, "", "implode"], [796, 4, 1, "", "int_range"], [797, 4, 1, "", "int_ranges"], [144, 4, 1, "", "json_normalize"], [798, 4, 1, "", "last"], [799, 4, 1, "", "len"], [800, 4, 1, "", "linear_space"], [801, 4, 1, "", "linear_spaces"], [802, 4, 1, "", "lit"], [803, 4, 1, "", "map_batches"], [804, 4, 1, "", "map_groups"], [805, 4, 1, "", "max"], [806, 4, 1, "", "max_horizontal"], [807, 4, 1, "", "mean"], [808, 4, 1, "", "mean_horizontal"], [809, 4, 1, "", "median"], [810, 4, 1, "", "min"], [811, 4, 1, "", "min_horizontal"], [812, 4, 1, "", "n_unique"], [813, 4, 1, "", "nth"], [814, 4, 1, "", "ones"], [815, 4, 1, "", "quantile"], [146, 4, 1, "", "read_avro"], [147, 4, 1, "", "read_clipboard"], [148, 4, 1, "", "read_csv"], [149, 4, 1, "", "read_csv_batched"], [150, 4, 1, "", "read_database"], [151, 4, 1, "", "read_database_uri"], [152, 4, 1, "", "read_delta"], [153, 4, 1, "", "read_excel"], [154, 4, 1, "", "read_ipc"], [155, 4, 1, "", "read_ipc_schema"], [156, 4, 1, "", "read_ipc_stream"], [157, 4, 1, "", "read_json"], [158, 4, 1, "", "read_ndjson"], [159, 4, 1, "", "read_ods"], [160, 4, 1, "", "read_parquet"], [161, 4, 1, "", "read_parquet_schema"], [816, 4, 1, "", "reduce"], [817, 4, 1, "", "repeat"], [818, 4, 1, "", "rolling_corr"], [819, 4, 1, "", "rolling_cov"], [162, 4, 1, "", "scan_csv"], [163, 4, 1, "", "scan_delta"], [164, 4, 1, "", "scan_iceberg"], [165, 4, 1, "", "scan_ipc"], [166, 4, 1, "", "scan_ndjson"], [167, 4, 1, "", "scan_parquet"], [168, 4, 1, "", "scan_pyarrow_dataset"], [820, 4, 1, "", "select"], [964, 7, 0, "-", "selectors"], [169, 4, 1, "", "set_random_seed"], [170, 4, 1, "", "show_versions"], [821, 4, 1, "", "sql"], [822, 4, 1, "", "sql_expr"], [823, 4, 1, "", "std"], [824, 4, 1, "", "struct"], [825, 4, 1, "", "sum"], [826, 4, 1, "", "sum_horizontal"], [827, 4, 1, "", "tail"], [184, 4, 1, "", "thread_pool_size"], [185, 4, 1, "", "threadpool_size"], [828, 4, 1, "", "time"], [829, 4, 1, "", "time_range"], [830, 4, 1, "", "time_ranges"], [186, 4, 1, "", "using_string_cache"], [831, 4, 1, "", "var"], [832, 4, 1, "", "when"], [833, 4, 1, "", "zeros"]], "polars.Catalog": [[187, 1, 1, "", "__init__"], [188, 1, 1, "", "get_table_info"], [189, 1, 1, "", "list_catalogs"], [190, 1, 1, "", "list_namespaces"], [191, 1, 1, "", "list_tables"], [192, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[204, 1, 1, "", "__array__"], [205, 1, 1, "", "__arrow_c_stream__"], [206, 1, 1, "", "__dataframe__"], [207, 1, 1, "", "__getitem__"], [208, 1, 1, "", "approx_n_unique"], [209, 1, 1, "", "bottom_k"], [210, 1, 1, "", "cast"], [211, 1, 1, "", "clear"], [212, 1, 1, "", "clone"], [213, 1, 1, "", "collect_schema"], [214, 2, 1, "", "columns"], [215, 1, 1, "", "corr"], [216, 1, 1, "", "count"], [217, 1, 1, "", "describe"], [218, 1, 1, "", "deserialize"], [219, 1, 1, "", "drop"], [220, 1, 1, "", "drop_in_place"], [221, 1, 1, "", "drop_nans"], [222, 1, 1, "", "drop_nulls"], [223, 2, 1, "", "dtypes"], [224, 1, 1, "", "equals"], [225, 1, 1, "", "estimated_size"], [226, 1, 1, "", "explode"], [227, 1, 1, "", "extend"], [228, 1, 1, "", "fill_nan"], [229, 1, 1, "", "fill_null"], [230, 1, 1, "", "filter"], [231, 2, 1, "", "flags"], [232, 1, 1, "", "fold"], [233, 1, 1, "", "gather_every"], [234, 1, 1, "", "get_column"], [235, 1, 1, "", "get_column_index"], [236, 1, 1, "", "get_columns"], [237, 1, 1, "", "glimpse"], [238, 1, 1, "", "group_by"], [239, 1, 1, "", "group_by_dynamic"], [240, 1, 1, "", "hash_rows"], [241, 1, 1, "", "head"], [242, 2, 1, "", "height"], [243, 1, 1, "", "hstack"], [244, 1, 1, "", "insert_column"], [245, 1, 1, "", "interpolate"], [246, 1, 1, "", "is_duplicated"], [247, 1, 1, "", "is_empty"], [248, 1, 1, "", "is_unique"], [249, 1, 1, "", "item"], [250, 1, 1, "", "iter_columns"], [251, 1, 1, "", "iter_rows"], [252, 1, 1, "", "iter_slices"], [253, 1, 1, "", "join"], [254, 1, 1, "", "join_asof"], [255, 1, 1, "", "join_where"], [256, 1, 1, "", "lazy"], [257, 1, 1, "", "limit"], [258, 1, 1, "", "map_rows"], [259, 1, 1, "", "max"], [260, 1, 1, "", "max_horizontal"], [261, 1, 1, "", "mean"], [262, 1, 1, "", "mean_horizontal"], [263, 1, 1, "", "median"], [264, 1, 1, "", "melt"], [265, 1, 1, "", "merge_sorted"], [266, 1, 1, "", "min"], [267, 1, 1, "", "min_horizontal"], [268, 1, 1, "", "n_chunks"], [269, 1, 1, "", "n_unique"], [270, 1, 1, "", "null_count"], [271, 1, 1, "", "partition_by"], [272, 1, 1, "", "pipe"], [273, 1, 1, "", "pivot"], [352, 2, 1, "", "plot"], [274, 1, 1, "", "product"], [275, 1, 1, "", "quantile"], [276, 1, 1, "", "rechunk"], [277, 1, 1, "", "remove"], [278, 1, 1, "", "rename"], [279, 1, 1, "", "replace_column"], [280, 1, 1, "", "reverse"], [281, 1, 1, "", "rolling"], [282, 1, 1, "", "row"], [283, 1, 1, "", "rows"], [284, 1, 1, "", "rows_by_key"], [285, 1, 1, "", "sample"], [286, 2, 1, "", "schema"], [287, 1, 1, "", "select"], [288, 1, 1, "", "select_seq"], [289, 1, 1, "", "serialize"], [290, 1, 1, "", "set_sorted"], [291, 2, 1, "", "shape"], [292, 1, 1, "", "shift"], [293, 1, 1, "", "shrink_to_fit"], [294, 1, 1, "", "slice"], [295, 1, 1, "", "sort"], [296, 1, 1, "", "sql"], [297, 1, 1, "", "std"], [353, 2, 1, "", "style"], [298, 1, 1, "", "sum"], [299, 1, 1, "", "sum_horizontal"], [300, 1, 1, "", "tail"], [301, 1, 1, "", "to_arrow"], [302, 1, 1, "", "to_dict"], [303, 1, 1, "", "to_dicts"], [304, 1, 1, "", "to_dummies"], [305, 1, 1, "", "to_init_repr"], [306, 1, 1, "", "to_jax"], [307, 1, 1, "", "to_numpy"], [308, 1, 1, "", "to_pandas"], [309, 1, 1, "", "to_series"], [310, 1, 1, "", "to_struct"], [311, 1, 1, "", "to_torch"], [312, 1, 1, "", "top_k"], [313, 1, 1, "", "transpose"], [314, 1, 1, "", "unique"], [315, 1, 1, "", "unnest"], [316, 1, 1, "", "unpivot"], [317, 1, 1, "", "unstack"], [318, 1, 1, "", "update"], [319, 1, 1, "", "upsample"], [320, 1, 1, "", "var"], [321, 1, 1, "", "vstack"], [322, 2, 1, "", "width"], [323, 1, 1, "", "with_columns"], [324, 1, 1, "", "with_columns_seq"], [325, 1, 1, "", "with_row_count"], [326, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.Expr": [[357, 1, 1, "", "abs"], [358, 1, 1, "", "add"], [359, 1, 1, "", "agg_groups"], [360, 1, 1, "", "alias"], [361, 1, 1, "", "all"], [362, 1, 1, "", "and_"], [363, 1, 1, "", "any"], [364, 1, 1, "", "append"], [365, 1, 1, "", "approx_n_unique"], [366, 1, 1, "", "arccos"], [367, 1, 1, "", "arccosh"], [368, 1, 1, "", "arcsin"], [369, 1, 1, "", "arcsinh"], [370, 1, 1, "", "arctan"], [371, 1, 1, "", "arctanh"], [372, 1, 1, "", "arg_max"], [373, 1, 1, "", "arg_min"], [374, 1, 1, "", "arg_sort"], [375, 1, 1, "", "arg_true"], [376, 1, 1, "", "arg_unique"], [401, 1, 1, "", "backward_fill"], [409, 1, 1, "", "bitwise_and"], [410, 1, 1, "", "bitwise_count_ones"], [411, 1, 1, "", "bitwise_count_zeros"], [412, 1, 1, "", "bitwise_leading_ones"], [413, 1, 1, "", "bitwise_leading_zeros"], [414, 1, 1, "", "bitwise_or"], [415, 1, 1, "", "bitwise_trailing_ones"], [416, 1, 1, "", "bitwise_trailing_zeros"], [417, 1, 1, "", "bitwise_xor"], [418, 1, 1, "", "bottom_k"], [419, 1, 1, "", "bottom_k_by"], [420, 1, 1, "", "cast"], [426, 1, 1, "", "cbrt"], [427, 1, 1, "", "ceil"], [428, 1, 1, "", "clip"], [429, 1, 1, "", "cos"], [430, 1, 1, "", "cosh"], [431, 1, 1, "", "cot"], [432, 1, 1, "", "count"], [433, 1, 1, "", "cum_count"], [434, 1, 1, "", "cum_max"], [435, 1, 1, "", "cum_min"], [436, 1, 1, "", "cum_prod"], [437, 1, 1, "", "cum_sum"], [438, 1, 1, "", "cumulative_eval"], [439, 1, 1, "", "cut"], [440, 1, 1, "", "degrees"], [441, 1, 1, "", "deserialize"], [442, 1, 1, "", "diff"], [443, 1, 1, "", "dot"], [444, 1, 1, "", "drop_nans"], [445, 1, 1, "", "drop_nulls"], [492, 1, 1, "", "entropy"], [493, 1, 1, "", "eq"], [494, 1, 1, "", "eq_missing"], [495, 1, 1, "", "ewm_mean"], [496, 1, 1, "", "ewm_mean_by"], [497, 1, 1, "", "ewm_std"], [498, 1, 1, "", "ewm_var"], [499, 1, 1, "", "exclude"], [500, 1, 1, "", "exp"], [501, 1, 1, "", "explode"], [502, 1, 1, "", "extend_constant"], [503, 1, 1, "", "fill_nan"], [504, 1, 1, "", "fill_null"], [505, 1, 1, "", "filter"], [506, 1, 1, "", "first"], [507, 1, 1, "", "flatten"], [508, 1, 1, "", "floor"], [509, 1, 1, "", "floordiv"], [510, 1, 1, "", "forward_fill"], [511, 1, 1, "", "from_json"], [512, 1, 1, "", "gather"], [513, 1, 1, "", "gather_every"], [514, 1, 1, "", "ge"], [515, 1, 1, "", "get"], [516, 1, 1, "", "gt"], [517, 1, 1, "", "has_nulls"], [518, 1, 1, "", "hash"], [519, 1, 1, "", "head"], [520, 1, 1, "", "hist"], [521, 1, 1, "", "implode"], [522, 1, 1, "", "index_of"], [523, 1, 1, "", "inspect"], [524, 1, 1, "", "interpolate"], [525, 1, 1, "", "interpolate_by"], [526, 1, 1, "", "is_between"], [527, 1, 1, "", "is_duplicated"], [528, 1, 1, "", "is_finite"], [529, 1, 1, "", "is_first_distinct"], [530, 1, 1, "", "is_in"], [531, 1, 1, "", "is_infinite"], [532, 1, 1, "", "is_last_distinct"], [533, 1, 1, "", "is_nan"], [534, 1, 1, "", "is_not_nan"], [535, 1, 1, "", "is_not_null"], [536, 1, 1, "", "is_null"], [537, 1, 1, "", "is_unique"], [538, 1, 1, "", "kurtosis"], [539, 1, 1, "", "last"], [540, 1, 1, "", "le"], [541, 1, 1, "", "len"], [542, 1, 1, "", "limit"], [583, 1, 1, "", "log"], [584, 1, 1, "", "log10"], [585, 1, 1, "", "log1p"], [586, 1, 1, "", "lower_bound"], [587, 1, 1, "", "lt"], [588, 1, 1, "", "map_batches"], [589, 1, 1, "", "map_elements"], [590, 1, 1, "", "max"], [591, 1, 1, "", "mean"], [592, 1, 1, "", "median"], [608, 1, 1, "", "min"], [609, 1, 1, "", "mod"], [610, 1, 1, "", "mode"], [611, 1, 1, "", "mul"], [612, 1, 1, "", "n_unique"], [622, 1, 1, "", "nan_max"], [623, 1, 1, "", "nan_min"], [624, 1, 1, "", "ne"], [625, 1, 1, "", "ne_missing"], [626, 1, 1, "", "neg"], [627, 1, 1, "", "not_"], [628, 1, 1, "", "null_count"], [629, 1, 1, "", "or_"], [630, 1, 1, "", "over"], [631, 1, 1, "", "pct_change"], [632, 1, 1, "", "peak_max"], [633, 1, 1, "", "peak_min"], [634, 1, 1, "", "pipe"], [635, 1, 1, "", "pow"], [636, 1, 1, "", "product"], [637, 1, 1, "", "qcut"], [638, 1, 1, "", "quantile"], [639, 1, 1, "", "radians"], [640, 1, 1, "", "rank"], [641, 1, 1, "", "rechunk"], [642, 1, 1, "", "reinterpret"], [643, 1, 1, "", "repeat_by"], [644, 1, 1, "", "replace"], [645, 1, 1, "", "replace_strict"], [646, 1, 1, "", "reshape"], [647, 1, 1, "", "reverse"], [648, 1, 1, "", "rle"], [649, 1, 1, "", "rle_id"], [650, 1, 1, "", "rolling"], [651, 1, 1, "", "rolling_kurtosis"], [652, 1, 1, "", "rolling_map"], [653, 1, 1, "", "rolling_max"], [654, 1, 1, "", "rolling_max_by"], [655, 1, 1, "", "rolling_mean"], [656, 1, 1, "", "rolling_mean_by"], [657, 1, 1, "", "rolling_median"], [658, 1, 1, "", "rolling_median_by"], [659, 1, 1, "", "rolling_min"], [660, 1, 1, "", "rolling_min_by"], [661, 1, 1, "", "rolling_quantile"], [662, 1, 1, "", "rolling_quantile_by"], [663, 1, 1, "", "rolling_skew"], [664, 1, 1, "", "rolling_std"], [665, 1, 1, "", "rolling_std_by"], [666, 1, 1, "", "rolling_sum"], [667, 1, 1, "", "rolling_sum_by"], [668, 1, 1, "", "rolling_var"], [669, 1, 1, "", "rolling_var_by"], [670, 1, 1, "", "round"], [671, 1, 1, "", "round_sig_figs"], [672, 1, 1, "", "sample"], [673, 1, 1, "", "search_sorted"], [674, 1, 1, "", "set_sorted"], [675, 1, 1, "", "shift"], [676, 1, 1, "", "shrink_dtype"], [677, 1, 1, "", "shuffle"], [678, 1, 1, "", "sign"], [679, 1, 1, "", "sin"], [680, 1, 1, "", "sinh"], [681, 1, 1, "", "skew"], [682, 1, 1, "", "slice"], [683, 1, 1, "", "sort"], [684, 1, 1, "", "sort_by"], [685, 1, 1, "", "sqrt"], [686, 1, 1, "", "std"], [741, 1, 1, "", "sub"], [742, 1, 1, "", "sum"], [743, 1, 1, "", "tail"], [744, 1, 1, "", "tan"], [745, 1, 1, "", "tanh"], [746, 1, 1, "", "to_physical"], [747, 1, 1, "", "top_k"], [748, 1, 1, "", "top_k_by"], [749, 1, 1, "", "truediv"], [750, 1, 1, "", "unique"], [751, 1, 1, "", "unique_counts"], [752, 1, 1, "", "upper_bound"], [753, 1, 1, "", "value_counts"], [754, 1, 1, "", "var"], [755, 1, 1, "", "where"], [756, 1, 1, "", "xor"]], "polars.Expr.arr": [[377, 1, 1, "", "all"], [378, 1, 1, "", "any"], [379, 1, 1, "", "arg_max"], [380, 1, 1, "", "arg_min"], [381, 1, 1, "", "contains"], [382, 1, 1, "", "count_matches"], [383, 1, 1, "", "explode"], [384, 1, 1, "", "first"], [385, 1, 1, "", "get"], [386, 1, 1, "", "join"], [387, 1, 1, "", "last"], [388, 1, 1, "", "max"], [389, 1, 1, "", "median"], [390, 1, 1, "", "min"], [391, 1, 1, "", "n_unique"], [392, 1, 1, "", "reverse"], [393, 1, 1, "", "shift"], [394, 1, 1, "", "sort"], [395, 1, 1, "", "std"], [396, 1, 1, "", "sum"], [397, 1, 1, "", "to_list"], [398, 1, 1, "", "to_struct"], [399, 1, 1, "", "unique"], [400, 1, 1, "", "var"]], "polars.Expr.bin": [[402, 1, 1, "", "contains"], [403, 1, 1, "", "decode"], [404, 1, 1, "", "encode"], [405, 1, 1, "", "ends_with"], [406, 1, 1, "", "reinterpret"], [407, 1, 1, "", "size"], [408, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[421, 1, 1, "", "ends_with"], [422, 1, 1, "", "get_categories"], [423, 1, 1, "", "len_bytes"], [424, 1, 1, "", "len_chars"], [425, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[446, 1, 1, "", "add_business_days"], [447, 1, 1, "", "base_utc_offset"], [448, 1, 1, "", "cast_time_unit"], [449, 1, 1, "", "century"], [450, 1, 1, "", "combine"], [451, 1, 1, "", "convert_time_zone"], [452, 1, 1, "", "date"], [453, 1, 1, "", "datetime"], [454, 1, 1, "", "day"], [455, 1, 1, "", "dst_offset"], [456, 1, 1, "", "epoch"], [457, 1, 1, "", "hour"], [458, 1, 1, "", "is_business_day"], [459, 1, 1, "", "is_leap_year"], [460, 1, 1, "", "iso_year"], [461, 1, 1, "", "microsecond"], [462, 1, 1, "", "millennium"], [463, 1, 1, "", "millisecond"], [464, 1, 1, "", "minute"], [465, 1, 1, "", "month"], [466, 1, 1, "", "month_end"], [467, 1, 1, "", "month_start"], [468, 1, 1, "", "nanosecond"], [469, 1, 1, "", "offset_by"], [470, 1, 1, "", "ordinal_day"], [471, 1, 1, "", "quarter"], [472, 1, 1, "", "replace"], [473, 1, 1, "", "replace_time_zone"], [474, 1, 1, "", "round"], [475, 1, 1, "", "second"], [476, 1, 1, "", "strftime"], [477, 1, 1, "", "time"], [478, 1, 1, "", "timestamp"], [479, 1, 1, "", "to_string"], [480, 1, 1, "", "total_days"], [481, 1, 1, "", "total_hours"], [482, 1, 1, "", "total_microseconds"], [483, 1, 1, "", "total_milliseconds"], [484, 1, 1, "", "total_minutes"], [485, 1, 1, "", "total_nanoseconds"], [486, 1, 1, "", "total_seconds"], [487, 1, 1, "", "truncate"], [488, 1, 1, "", "week"], [489, 1, 1, "", "weekday"], [490, 1, 1, "", "with_time_unit"], [491, 1, 1, "", "year"]], "polars.Expr.list": [[543, 1, 1, "", "all"], [544, 1, 1, "", "any"], [545, 1, 1, "", "arg_max"], [546, 1, 1, "", "arg_min"], [547, 1, 1, "", "concat"], [548, 1, 1, "", "contains"], [549, 1, 1, "", "count_matches"], [550, 1, 1, "", "diff"], [551, 1, 1, "", "drop_nulls"], [552, 1, 1, "", "eval"], [553, 1, 1, "", "explode"], [554, 1, 1, "", "first"], [555, 1, 1, "", "gather"], [556, 1, 1, "", "gather_every"], [557, 1, 1, "", "get"], [558, 1, 1, "", "head"], [559, 1, 1, "", "join"], [560, 1, 1, "", "last"], [561, 1, 1, "", "len"], [562, 1, 1, "", "max"], [563, 1, 1, "", "mean"], [564, 1, 1, "", "median"], [565, 1, 1, "", "min"], [566, 1, 1, "", "n_unique"], [567, 1, 1, "", "reverse"], [568, 1, 1, "", "sample"], [569, 1, 1, "", "set_difference"], [570, 1, 1, "", "set_intersection"], [571, 1, 1, "", "set_symmetric_difference"], [572, 1, 1, "", "set_union"], [573, 1, 1, "", "shift"], [574, 1, 1, "", "slice"], [575, 1, 1, "", "sort"], [576, 1, 1, "", "std"], [577, 1, 1, "", "sum"], [578, 1, 1, "", "tail"], [579, 1, 1, "", "to_array"], [580, 1, 1, "", "to_struct"], [581, 1, 1, "", "unique"], [582, 1, 1, "", "var"]], "polars.Expr.meta": [[593, 1, 1, "", "eq"], [594, 1, 1, "", "has_multiple_outputs"], [595, 1, 1, "", "is_column"], [596, 1, 1, "", "is_column_selection"], [597, 1, 1, "", "is_literal"], [598, 1, 1, "", "is_regex_projection"], [599, 1, 1, "", "ne"], [600, 1, 1, "", "output_name"], [601, 1, 1, "", "pop"], [602, 1, 1, "", "root_names"], [603, 1, 1, "", "serialize"], [604, 1, 1, "", "show_graph"], [605, 1, 1, "", "tree_format"], [606, 1, 1, "", "undo_aliases"], [607, 1, 1, "", "write_json"]], "polars.Expr.name": [[613, 1, 1, "", "keep"], [614, 1, 1, "", "map"], [615, 1, 1, "", "map_fields"], [616, 1, 1, "", "prefix"], [617, 1, 1, "", "prefix_fields"], [618, 1, 1, "", "suffix"], [619, 1, 1, "", "suffix_fields"], [620, 1, 1, "", "to_lowercase"], [621, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[687, 1, 1, "", "concat"], [688, 1, 1, "", "contains"], [689, 1, 1, "", "contains_any"], [690, 1, 1, "", "count_matches"], [691, 1, 1, "", "decode"], [692, 1, 1, "", "encode"], [693, 1, 1, "", "ends_with"], [694, 1, 1, "", "escape_regex"], [695, 1, 1, "", "explode"], [696, 1, 1, "", "extract"], [697, 1, 1, "", "extract_all"], [698, 1, 1, "", "extract_groups"], [699, 1, 1, "", "extract_many"], [700, 1, 1, "", "find"], [701, 1, 1, "", "find_many"], [702, 1, 1, "", "head"], [703, 1, 1, "", "join"], [704, 1, 1, "", "json_decode"], [705, 1, 1, "", "json_path_match"], [706, 1, 1, "", "len_bytes"], [707, 1, 1, "", "len_chars"], [708, 1, 1, "", "normalize"], [709, 1, 1, "", "pad_end"], [710, 1, 1, "", "pad_start"], [711, 1, 1, "", "replace"], [712, 1, 1, "", "replace_all"], [713, 1, 1, "", "replace_many"], [714, 1, 1, "", "reverse"], [715, 1, 1, "", "slice"], [716, 1, 1, "", "split"], [717, 1, 1, "", "split_exact"], [718, 1, 1, "", "splitn"], [719, 1, 1, "", "starts_with"], [720, 1, 1, "", "strip_chars"], [721, 1, 1, "", "strip_chars_end"], [722, 1, 1, "", "strip_chars_start"], [723, 1, 1, "", "strip_prefix"], [724, 1, 1, "", "strip_suffix"], [725, 1, 1, "", "strptime"], [726, 1, 1, "", "tail"], [727, 1, 1, "", "to_date"], [728, 1, 1, "", "to_datetime"], [729, 1, 1, "", "to_decimal"], [730, 1, 1, "", "to_integer"], [731, 1, 1, "", "to_lowercase"], [732, 1, 1, "", "to_time"], [733, 1, 1, "", "to_titlecase"], [734, 1, 1, "", "to_uppercase"], [735, 1, 1, "", "zfill"]], "polars.Expr.struct": [[736, 1, 1, "", "field"], [737, 1, 1, "", "json_encode"], [738, 1, 1, "", "rename_fields"], [739, 1, 1, "", "unnest"], [740, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[857, 1, 1, "", "approx_n_unique"], [858, 1, 1, "", "bottom_k"], [859, 1, 1, "", "cache"], [860, 1, 1, "", "cast"], [861, 1, 1, "", "clear"], [862, 1, 1, "", "clone"], [863, 1, 1, "", "collect"], [864, 1, 1, "", "collect_async"], [865, 1, 1, "", "collect_schema"], [866, 2, 1, "", "columns"], [867, 1, 1, "", "count"], [868, 1, 1, "", "describe"], [869, 1, 1, "", "deserialize"], [870, 1, 1, "", "drop"], [871, 1, 1, "", "drop_nans"], [872, 1, 1, "", "drop_nulls"], [873, 2, 1, "", "dtypes"], [874, 1, 1, "", "explain"], [875, 1, 1, "", "explode"], [876, 1, 1, "", "fill_nan"], [877, 1, 1, "", "fill_null"], [878, 1, 1, "", "filter"], [879, 1, 1, "", "first"], [880, 1, 1, "", "gather_every"], [881, 1, 1, "", "group_by"], [882, 1, 1, "", "group_by_dynamic"], [883, 1, 1, "", "head"], [884, 1, 1, "", "inspect"], [885, 1, 1, "", "interpolate"], [886, 1, 1, "", "join"], [887, 1, 1, "", "join_asof"], [888, 1, 1, "", "join_where"], [889, 1, 1, "", "last"], [890, 1, 1, "", "lazy"], [891, 1, 1, "", "limit"], [892, 1, 1, "", "map_batches"], [893, 1, 1, "", "max"], [894, 1, 1, "", "mean"], [895, 1, 1, "", "median"], [896, 1, 1, "", "melt"], [897, 1, 1, "", "merge_sorted"], [898, 1, 1, "", "min"], [899, 1, 1, "", "null_count"], [900, 1, 1, "", "pipe"], [901, 1, 1, "", "profile"], [902, 1, 1, "", "quantile"], [903, 1, 1, "", "remote"], [904, 1, 1, "", "remove"], [905, 1, 1, "", "rename"], [906, 1, 1, "", "reverse"], [907, 1, 1, "", "rolling"], [908, 2, 1, "", "schema"], [909, 1, 1, "", "select"], [910, 1, 1, "", "select_seq"], [911, 1, 1, "", "serialize"], [912, 1, 1, "", "set_sorted"], [913, 1, 1, "", "shift"], [914, 1, 1, "", "show_graph"], [48, 1, 1, "", "sink_csv"], [49, 1, 1, "", "sink_ipc"], [50, 1, 1, "", "sink_ndjson"], [51, 1, 1, "", "sink_parquet"], [915, 1, 1, "", "slice"], [916, 1, 1, "", "sort"], [917, 1, 1, "", "sql"], [918, 1, 1, "", "std"], [919, 1, 1, "", "sum"], [920, 1, 1, "", "tail"], [921, 1, 1, "", "top_k"], [922, 1, 1, "", "unique"], [923, 1, 1, "", "unnest"], [924, 1, 1, "", "unpivot"], [925, 1, 1, "", "update"], [926, 1, 1, "", "var"], [927, 2, 1, "", "width"], [928, 1, 1, "", "with_columns"], [929, 1, 1, "", "with_columns_seq"], [930, 1, 1, "", "with_context"], [931, 1, 1, "", "with_row_count"], [932, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[52, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[53, 1, 1, "", "__init__"]], "polars.PartitionParted": [[54, 1, 1, "", "__init__"]], "polars.SQLContext": [[1385, 1, 1, "", "__enter__"], [1385, 1, 1, "", "__exit__"], [1385, 1, 1, "", "__init__"], [1366, 1, 1, "", "execute"], [1367, 1, 1, "", "execute_global"], [1368, 1, 1, "", "register"], [1369, 1, 1, "", "register_globals"], [1370, 1, 1, "", "register_many"], [1371, 1, 1, "", "tables"], [1372, 1, 1, "", "unregister"]], "polars.Series": [[966, 1, 1, "", "__array__"], [967, 1, 1, "", "__arrow_c_stream__"], [968, 1, 1, "", "__getitem__"], [969, 1, 1, "", "abs"], [970, 1, 1, "", "alias"], [971, 1, 1, "", "all"], [972, 1, 1, "", "any"], [973, 1, 1, "", "append"], [974, 1, 1, "", "approx_n_unique"], [975, 1, 1, "", "arccos"], [976, 1, 1, "", "arccosh"], [977, 1, 1, "", "arcsin"], [978, 1, 1, "", "arcsinh"], [979, 1, 1, "", "arctan"], [980, 1, 1, "", "arctanh"], [981, 1, 1, "", "arg_max"], [982, 1, 1, "", "arg_min"], [983, 1, 1, "", "arg_sort"], [984, 1, 1, "", "arg_true"], [985, 1, 1, "", "arg_unique"], [1010, 1, 1, "", "backward_fill"], [1018, 1, 1, "", "bitwise_and"], [1019, 1, 1, "", "bitwise_count_ones"], [1020, 1, 1, "", "bitwise_count_zeros"], [1021, 1, 1, "", "bitwise_leading_ones"], [1022, 1, 1, "", "bitwise_leading_zeros"], [1023, 1, 1, "", "bitwise_or"], [1024, 1, 1, "", "bitwise_trailing_ones"], [1025, 1, 1, "", "bitwise_trailing_zeros"], [1026, 1, 1, "", "bitwise_xor"], [1027, 1, 1, "", "bottom_k"], [1028, 1, 1, "", "cast"], [1037, 1, 1, "", "cbrt"], [1038, 1, 1, "", "ceil"], [1039, 1, 1, "", "chunk_lengths"], [1040, 1, 1, "", "clear"], [1041, 1, 1, "", "clip"], [1042, 1, 1, "", "clone"], [1043, 1, 1, "", "cos"], [1044, 1, 1, "", "cosh"], [1045, 1, 1, "", "cot"], [1046, 1, 1, "", "count"], [1047, 1, 1, "", "cum_count"], [1048, 1, 1, "", "cum_max"], [1049, 1, 1, "", "cum_min"], [1050, 1, 1, "", "cum_prod"], [1051, 1, 1, "", "cum_sum"], [1052, 1, 1, "", "cumulative_eval"], [1053, 1, 1, "", "cut"], [1054, 1, 1, "", "describe"], [1055, 1, 1, "", "diff"], [1056, 1, 1, "", "dot"], [1057, 1, 1, "", "drop_nans"], [1058, 1, 1, "", "drop_nulls"], [1109, 2, 1, "", "dtype"], [1110, 1, 1, "", "entropy"], [1111, 1, 1, "", "eq"], [1112, 1, 1, "", "eq_missing"], [1113, 1, 1, "", "equals"], [1114, 1, 1, "", "estimated_size"], [1115, 1, 1, "", "ewm_mean"], [1116, 1, 1, "", "ewm_mean_by"], [1117, 1, 1, "", "ewm_std"], [1118, 1, 1, "", "ewm_var"], [1119, 1, 1, "", "exp"], [1120, 1, 1, "", "explode"], [1121, 1, 1, "", "extend"], [1122, 1, 1, "", "extend_constant"], [1123, 1, 1, "", "fill_nan"], [1124, 1, 1, "", "fill_null"], [1125, 1, 1, "", "filter"], [1126, 1, 1, "", "first"], [1127, 2, 1, "", "flags"], [1128, 1, 1, "", "floor"], [1129, 1, 1, "", "forward_fill"], [1130, 1, 1, "", "gather"], [1131, 1, 1, "", "gather_every"], [1132, 1, 1, "", "ge"], [1133, 1, 1, "", "get_chunks"], [1134, 1, 1, "", "gt"], [1135, 1, 1, "", "has_nulls"], [1136, 1, 1, "", "has_validity"], [1137, 1, 1, "", "hash"], [1138, 1, 1, "", "head"], [1139, 1, 1, "", "hist"], [1140, 1, 1, "", "implode"], [1141, 1, 1, "", "index_of"], [1142, 1, 1, "", "interpolate"], [1143, 1, 1, "", "interpolate_by"], [1144, 1, 1, "", "is_between"], [1145, 1, 1, "", "is_duplicated"], [1146, 1, 1, "", "is_empty"], [1147, 1, 1, "", "is_finite"], [1148, 1, 1, "", "is_first_distinct"], [1149, 1, 1, "", "is_in"], [1150, 1, 1, "", "is_infinite"], [1151, 1, 1, "", "is_last_distinct"], [1152, 1, 1, "", "is_nan"], [1153, 1, 1, "", "is_not_nan"], [1154, 1, 1, "", "is_not_null"], [1155, 1, 1, "", "is_null"], [1156, 1, 1, "", "is_sorted"], [1157, 1, 1, "", "is_unique"], [1158, 1, 1, "", "item"], [1159, 1, 1, "", "kurtosis"], [1160, 1, 1, "", "last"], [1161, 1, 1, "", "le"], [1162, 1, 1, "", "len"], [1163, 1, 1, "", "limit"], [1204, 1, 1, "", "log"], [1205, 1, 1, "", "log10"], [1206, 1, 1, "", "log1p"], [1207, 1, 1, "", "lower_bound"], [1208, 1, 1, "", "lt"], [1209, 1, 1, "", "map_elements"], [1210, 1, 1, "", "max"], [1211, 1, 1, "", "mean"], [1212, 1, 1, "", "median"], [1213, 1, 1, "", "min"], [1214, 1, 1, "", "mode"], [1215, 1, 1, "", "n_chunks"], [1216, 1, 1, "", "n_unique"], [1217, 2, 1, "", "name"], [1218, 1, 1, "", "nan_max"], [1219, 1, 1, "", "nan_min"], [1220, 1, 1, "", "ne"], [1221, 1, 1, "", "ne_missing"], [1222, 1, 1, "", "new_from_index"], [1223, 1, 1, "", "not_"], [1224, 1, 1, "", "null_count"], [1225, 1, 1, "", "pct_change"], [1226, 1, 1, "", "peak_max"], [1227, 1, 1, "", "peak_min"], [1362, 2, 1, "", "plot"], [1228, 1, 1, "", "pow"], [1229, 1, 1, "", "product"], [1230, 1, 1, "", "qcut"], [1231, 1, 1, "", "quantile"], [1232, 1, 1, "", "rank"], [1233, 1, 1, "", "rechunk"], [1234, 1, 1, "", "reinterpret"], [1235, 1, 1, "", "rename"], [1236, 1, 1, "", "replace"], [1237, 1, 1, "", "replace_strict"], [1238, 1, 1, "", "reshape"], [1239, 1, 1, "", "reverse"], [1240, 1, 1, "", "rle"], [1241, 1, 1, "", "rle_id"], [1242, 1, 1, "", "rolling_kurtosis"], [1243, 1, 1, "", "rolling_map"], [1244, 1, 1, "", "rolling_max"], [1245, 1, 1, "", "rolling_mean"], [1246, 1, 1, "", "rolling_median"], [1247, 1, 1, "", "rolling_min"], [1248, 1, 1, "", "rolling_quantile"], [1249, 1, 1, "", "rolling_skew"], [1250, 1, 1, "", "rolling_std"], [1251, 1, 1, "", "rolling_sum"], [1252, 1, 1, "", "rolling_var"], [1253, 1, 1, "", "round"], [1254, 1, 1, "", "round_sig_figs"], [1255, 1, 1, "", "sample"], [1256, 1, 1, "", "scatter"], [1257, 1, 1, "", "search_sorted"], [1258, 1, 1, "", "set"], [1259, 1, 1, "", "set_sorted"], [1260, 2, 1, "", "shape"], [1261, 1, 1, "", "shift"], [1262, 1, 1, "", "shrink_dtype"], [1263, 1, 1, "", "shrink_to_fit"], [1264, 1, 1, "", "shuffle"], [1265, 1, 1, "", "sign"], [1266, 1, 1, "", "sin"], [1267, 1, 1, "", "sinh"], [1268, 1, 1, "", "skew"], [1269, 1, 1, "", "slice"], [1270, 1, 1, "", "sort"], [1271, 1, 1, "", "sqrt"], [1272, 1, 1, "", "std"], [1328, 1, 1, "", "sum"], [1329, 1, 1, "", "tail"], [1330, 1, 1, "", "tan"], [1331, 1, 1, "", "tanh"], [1332, 1, 1, "", "to_arrow"], [1333, 1, 1, "", "to_dummies"], [1334, 1, 1, "", "to_frame"], [1335, 1, 1, "", "to_init_repr"], [1336, 1, 1, "", "to_jax"], [1337, 1, 1, "", "to_list"], [1338, 1, 1, "", "to_numpy"], [1339, 1, 1, "", "to_pandas"], [1340, 1, 1, "", "to_physical"], [1341, 1, 1, "", "to_torch"], [1342, 1, 1, "", "top_k"], [1343, 1, 1, "", "unique"], [1344, 1, 1, "", "unique_counts"], [1345, 1, 1, "", "upper_bound"], [1346, 1, 1, "", "value_counts"], [1347, 1, 1, "", "var"], [1348, 1, 1, "", "zip_with"]], "polars.Series.arr": [[986, 1, 1, "", "all"], [987, 1, 1, "", "any"], [988, 1, 1, "", "arg_max"], [989, 1, 1, "", "arg_min"], [990, 1, 1, "", "contains"], [991, 1, 1, "", "count_matches"], [992, 1, 1, "", "explode"], [993, 1, 1, "", "first"], [994, 1, 1, "", "get"], [995, 1, 1, "", "join"], [996, 1, 1, "", "last"], [997, 1, 1, "", "max"], [998, 1, 1, "", "median"], [999, 1, 1, "", "min"], [1000, 1, 1, "", "n_unique"], [1001, 1, 1, "", "reverse"], [1002, 1, 1, "", "shift"], [1003, 1, 1, "", "sort"], [1004, 1, 1, "", "std"], [1005, 1, 1, "", "sum"], [1006, 1, 1, "", "to_list"], [1007, 1, 1, "", "to_struct"], [1008, 1, 1, "", "unique"], [1009, 1, 1, "", "var"]], "polars.Series.bin": [[1011, 1, 1, "", "contains"], [1012, 1, 1, "", "decode"], [1013, 1, 1, "", "encode"], [1014, 1, 1, "", "ends_with"], [1015, 1, 1, "", "reinterpret"], [1016, 1, 1, "", "size"], [1017, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1029, 1, 1, "", "ends_with"], [1030, 1, 1, "", "get_categories"], [1031, 1, 1, "", "is_local"], [1032, 1, 1, "", "len_bytes"], [1033, 1, 1, "", "len_chars"], [1034, 1, 1, "", "starts_with"], [1035, 1, 1, "", "to_local"], [1036, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1059, 1, 1, "", "add_business_days"], [1060, 1, 1, "", "base_utc_offset"], [1061, 1, 1, "", "cast_time_unit"], [1062, 1, 1, "", "century"], [1063, 1, 1, "", "combine"], [1064, 1, 1, "", "convert_time_zone"], [1065, 1, 1, "", "date"], [1066, 1, 1, "", "datetime"], [1067, 1, 1, "", "day"], [1068, 1, 1, "", "dst_offset"], [1069, 1, 1, "", "epoch"], [1070, 1, 1, "", "hour"], [1071, 1, 1, "", "is_business_day"], [1072, 1, 1, "", "is_leap_year"], [1073, 1, 1, "", "iso_year"], [1074, 1, 1, "", "max"], [1075, 1, 1, "", "mean"], [1076, 1, 1, "", "median"], [1077, 1, 1, "", "microsecond"], [1078, 1, 1, "", "millennium"], [1079, 1, 1, "", "millisecond"], [1080, 1, 1, "", "min"], [1081, 1, 1, "", "minute"], [1082, 1, 1, "", "month"], [1083, 1, 1, "", "month_end"], [1084, 1, 1, "", "month_start"], [1085, 1, 1, "", "nanosecond"], [1086, 1, 1, "", "offset_by"], [1087, 1, 1, "", "ordinal_day"], [1088, 1, 1, "", "quarter"], [1089, 1, 1, "", "replace"], [1090, 1, 1, "", "replace_time_zone"], [1091, 1, 1, "", "round"], [1092, 1, 1, "", "second"], [1093, 1, 1, "", "strftime"], [1094, 1, 1, "", "time"], [1095, 1, 1, "", "timestamp"], [1096, 1, 1, "", "to_string"], [1097, 1, 1, "", "total_days"], [1098, 1, 1, "", "total_hours"], [1099, 1, 1, "", "total_microseconds"], [1100, 1, 1, "", "total_milliseconds"], [1101, 1, 1, "", "total_minutes"], [1102, 1, 1, "", "total_nanoseconds"], [1103, 1, 1, "", "total_seconds"], [1104, 1, 1, "", "truncate"], [1105, 1, 1, "", "week"], [1106, 1, 1, "", "weekday"], [1107, 1, 1, "", "with_time_unit"], [1108, 1, 1, "", "year"]], "polars.Series.list": [[1164, 1, 1, "", "all"], [1165, 1, 1, "", "any"], [1166, 1, 1, "", "arg_max"], [1167, 1, 1, "", "arg_min"], [1168, 1, 1, "", "concat"], [1169, 1, 1, "", "contains"], [1170, 1, 1, "", "count_matches"], [1171, 1, 1, "", "diff"], [1172, 1, 1, "", "drop_nulls"], [1173, 1, 1, "", "eval"], [1174, 1, 1, "", "explode"], [1175, 1, 1, "", "first"], [1176, 1, 1, "", "gather"], [1177, 1, 1, "", "gather_every"], [1178, 1, 1, "", "get"], [1179, 1, 1, "", "head"], [1180, 1, 1, "", "join"], [1181, 1, 1, "", "last"], [1182, 1, 1, "", "len"], [1183, 1, 1, "", "max"], [1184, 1, 1, "", "mean"], [1185, 1, 1, "", "median"], [1186, 1, 1, "", "min"], [1187, 1, 1, "", "n_unique"], [1188, 1, 1, "", "reverse"], [1189, 1, 1, "", "sample"], [1190, 1, 1, "", "set_difference"], [1191, 1, 1, "", "set_intersection"], [1192, 1, 1, "", "set_symmetric_difference"], [1193, 1, 1, "", "set_union"], [1194, 1, 1, "", "shift"], [1195, 1, 1, "", "slice"], [1196, 1, 1, "", "sort"], [1197, 1, 1, "", "std"], [1198, 1, 1, "", "sum"], [1199, 1, 1, "", "tail"], [1200, 1, 1, "", "to_array"], [1201, 1, 1, "", "to_struct"], [1202, 1, 1, "", "unique"], [1203, 1, 1, "", "var"]], "polars.Series.str": [[1273, 1, 1, "", "concat"], [1274, 1, 1, "", "contains"], [1275, 1, 1, "", "contains_any"], [1276, 1, 1, "", "count_matches"], [1277, 1, 1, "", "decode"], [1278, 1, 1, "", "encode"], [1279, 1, 1, "", "ends_with"], [1280, 1, 1, "", "escape_regex"], [1281, 1, 1, "", "explode"], [1282, 1, 1, "", "extract"], [1283, 1, 1, "", "extract_all"], [1284, 1, 1, "", "extract_groups"], [1285, 1, 1, "", "extract_many"], [1286, 1, 1, "", "find"], [1287, 1, 1, "", "find_many"], [1288, 1, 1, "", "head"], [1289, 1, 1, "", "join"], [1290, 1, 1, "", "json_decode"], [1291, 1, 1, "", "json_path_match"], [1292, 1, 1, "", "len_bytes"], [1293, 1, 1, "", "len_chars"], [1294, 1, 1, "", "normalize"], [1295, 1, 1, "", "pad_end"], [1296, 1, 1, "", "pad_start"], [1297, 1, 1, "", "replace"], [1298, 1, 1, "", "replace_all"], [1299, 1, 1, "", "replace_many"], [1300, 1, 1, "", "reverse"], [1301, 1, 1, "", "slice"], [1302, 1, 1, "", "split"], [1303, 1, 1, "", "split_exact"], [1304, 1, 1, "", "splitn"], [1305, 1, 1, "", "starts_with"], [1306, 1, 1, "", "strip_chars"], [1307, 1, 1, "", "strip_chars_end"], [1308, 1, 1, "", "strip_chars_start"], [1309, 1, 1, "", "strip_prefix"], [1310, 1, 1, "", "strip_suffix"], [1311, 1, 1, "", "strptime"], [1312, 1, 1, "", "tail"], [1313, 1, 1, "", "to_date"], [1314, 1, 1, "", "to_datetime"], [1315, 1, 1, "", "to_decimal"], [1316, 1, 1, "", "to_integer"], [1317, 1, 1, "", "to_lowercase"], [1318, 1, 1, "", "to_time"], [1319, 1, 1, "", "to_titlecase"], [1320, 1, 1, "", "to_uppercase"], [1321, 1, 1, "", "zfill"]], "polars.Series.struct": [[1322, 1, 1, "", "field"], [1323, 3, 1, "", "fields"], [1324, 1, 1, "", "json_encode"], [1325, 1, 1, "", "rename_fields"], [1326, 3, 1, "", "schema"], [1327, 1, 1, "", "unnest"]], "polars.StringCache": [[55, 1, 1, "", "__init__"]], "polars.api": [[57, 4, 1, "", "register_dataframe_namespace"], [58, 4, 1, "", "register_expr_namespace"], [59, 4, 1, "", "register_lazyframe_namespace"], [60, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[193, 0, 1, "", "CatalogInfo"], [194, 0, 1, "", "ColumnInfo"], [195, 5, 1, "", "DataSourceFormat"], [196, 0, 1, "", "NamespaceInfo"], [197, 0, 1, "", "TableInfo"], [199, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[193, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[194, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[196, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[197, 1, 1, "", "__init__"], [198, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[327, 1, 1, "", "__iter__"], [328, 1, 1, "", "agg"], [329, 1, 1, "", "all"], [330, 1, 1, "", "count"], [331, 1, 1, "", "first"], [332, 1, 1, "", "head"], [333, 1, 1, "", "last"], [334, 1, 1, "", "len"], [335, 1, 1, "", "map_groups"], [336, 1, 1, "", "max"], [337, 1, 1, "", "mean"], [338, 1, 1, "", "median"], [339, 1, 1, "", "min"], [340, 1, 1, "", "n_unique"], [341, 1, 1, "", "quantile"], [342, 1, 1, "", "sum"], [343, 1, 1, "", "tail"]], "polars.datatypes": [[65, 0, 1, "", "Array"], [66, 0, 1, "", "Binary"], [67, 0, 1, "", "Boolean"], [68, 0, 1, "", "Categorical"], [69, 0, 1, "", "DataType"], [70, 0, 1, "", "Date"], [71, 0, 1, "", "Datetime"], [72, 0, 1, "", "Decimal"], [73, 0, 1, "", "Duration"], [74, 0, 1, "", "Enum"], [75, 0, 1, "", "Field"], [76, 0, 1, "", "Float32"], [77, 0, 1, "", "Float64"], [78, 0, 1, "", "Int128"], [79, 0, 1, "", "Int16"], [80, 0, 1, "", "Int32"], [81, 0, 1, "", "Int64"], [82, 0, 1, "", "Int8"], [83, 0, 1, "", "List"], [84, 0, 1, "", "Null"], [85, 0, 1, "", "Object"], [86, 0, 1, "", "String"], [87, 0, 1, "", "Struct"], [88, 0, 1, "", "Time"], [89, 0, 1, "", "UInt16"], [90, 0, 1, "", "UInt32"], [91, 0, 1, "", "UInt64"], [92, 0, 1, "", "UInt8"], [93, 0, 1, "", "Unknown"], [94, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[68, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[82, 1, 1, "", "__init__"]], "polars.datatypes.List": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[85, 1, 1, "", "__init__"]], "polars.datatypes.String": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[88, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[92, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[93, 1, 1, "", "__init__"]], "polars.exceptions": [[99, 6, 1, "", "CategoricalRemappingWarning"], [100, 6, 1, "", "ChronoFormatWarning"], [101, 6, 1, "", "ColumnNotFoundError"], [102, 6, 1, "", "ComputeError"], [103, 6, 1, "", "CustomUFuncWarning"], [104, 6, 1, "", "DataOrientationWarning"], [105, 6, 1, "", "DuplicateError"], [106, 6, 1, "", "InvalidOperationError"], [107, 6, 1, "", "MapWithoutReturnDtypeWarning"], [108, 6, 1, "", "ModuleUpgradeRequiredError"], [109, 6, 1, "", "NoDataError"], [110, 6, 1, "", "NoRowsReturnedError"], [111, 6, 1, "", "OutOfBoundsError"], [112, 6, 1, "", "PanicException"], [113, 6, 1, "", "ParameterCollisionError"], [114, 6, 1, "", "PerformanceWarning"], [115, 6, 1, "", "PolarsError"], [116, 6, 1, "", "PolarsInefficientMapWarning"], [117, 6, 1, "", "PolarsWarning"], [118, 6, 1, "", "RowsError"], [119, 6, 1, "", "SQLInterfaceError"], [120, 6, 1, "", "SQLSyntaxError"], [121, 6, 1, "", "SchemaError"], [122, 6, 1, "", "SchemaFieldNotFoundError"], [123, 6, 1, "", "ShapeError"], [124, 6, 1, "", "StringCacheMismatchError"], [125, 6, 1, "", "StructFieldNotFoundError"], [126, 6, 1, "", "TooManyRowsReturnedError"], [127, 6, 1, "", "UnstableWarning"], [128, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[139, 1, 1, "", "next_batches"]], "polars.io.partition": [[140, 0, 1, "", "BasePartitionContext"], [141, 0, 1, "", "KeyedPartition"], [142, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[140, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[141, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[142, 1, 1, "", "__init__"]], "polars.io.plugins": [[143, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[933, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[933, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[934, 1, 1, "", "agg"], [935, 1, 1, "", "all"], [936, 1, 1, "", "count"], [937, 1, 1, "", "first"], [938, 1, 1, "", "head"], [939, 1, 1, "", "last"], [940, 1, 1, "", "len"], [941, 1, 1, "", "map_groups"], [942, 1, 1, "", "max"], [943, 1, 1, "", "mean"], [944, 1, 1, "", "median"], [945, 1, 1, "", "min"], [946, 1, 1, "", "n_unique"], [947, 1, 1, "", "quantile"], [948, 1, 1, "", "sum"], [949, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[950, 1, 1, "", "cancel"], [951, 1, 1, "", "fetch"], [952, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[145, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[964, 4, 1, "", "all"], [964, 4, 1, "", "alpha"], [964, 4, 1, "", "alphanumeric"], [964, 4, 1, "", "binary"], [964, 4, 1, "", "boolean"], [964, 4, 1, "", "by_dtype"], [964, 4, 1, "", "by_index"], [964, 4, 1, "", "by_name"], [964, 4, 1, "", "categorical"], [964, 4, 1, "", "contains"], [964, 4, 1, "", "date"], [964, 4, 1, "", "datetime"], [964, 4, 1, "", "decimal"], [964, 4, 1, "", "digit"], [964, 4, 1, "", "duration"], [964, 4, 1, "", "ends_with"], [964, 4, 1, "", "exclude"], [964, 4, 1, "", "expand_selector"], [964, 4, 1, "", "first"], [964, 4, 1, "", "float"], [964, 4, 1, "", "integer"], [964, 4, 1, "", "is_selector"], [964, 4, 1, "", "last"], [964, 4, 1, "", "matches"], [964, 4, 1, "", "numeric"], [964, 4, 1, "", "signed_integer"], [964, 4, 1, "", "starts_with"], [964, 4, 1, "", "string"], [964, 4, 1, "", "temporal"], [964, 4, 1, "", "time"], [964, 4, 1, "", "unsigned_integer"]], "polars.testing": [[171, 4, 1, "", "assert_frame_equal"], [172, 4, 1, "", "assert_frame_not_equal"], [173, 4, 1, "", "assert_series_equal"], [174, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[175, 0, 1, "", "column"], [176, 4, 1, "", "columns"], [177, 4, 1, "", "create_list_strategy"], [178, 4, 1, "", "dataframes"], [179, 4, 1, "", "dtypes"], [180, 4, 1, "", "lists"], [181, 4, 1, "", "load_profile"], [182, 4, 1, "", "series"], [183, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[175, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 48, 60, 65, 75, 87, 95, 98, 100, 106, 130, 137, 143, 148, 149, 150, 151, 153, 154, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 182, 209, 210, 221, 222, 225, 230, 233, 238, 239, 244, 250, 253, 254, 264, 271, 273, 277, 279, 281, 284, 287, 288, 295, 304, 307, 312, 314, 315, 316, 317, 318, 323, 324, 349, 386, 419, 451, 456, 476, 479, 499, 505, 509, 522, 538, 559, 588, 589, 601, 610, 615, 622, 623, 630, 631, 642, 649, 651, 684, 688, 696, 697, 698, 700, 702, 711, 712, 715, 716, 718, 725, 726, 727, 728, 732, 736, 738, 740, 748, 757, 758, 759, 760, 765, 772, 775, 778, 779, 788, 789, 791, 792, 798, 803, 804, 805, 806, 808, 810, 811, 813, 820, 822, 824, 825, 826, 832, 838, 842, 858, 860, 871, 872, 881, 882, 886, 887, 896, 904, 909, 910, 916, 921, 922, 923, 924, 925, 928, 929, 941, 958, 963, 964, 968, 969, 970, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1067, 1068, 1069, 1071, 1072, 1074, 1075, 1076, 1078, 1079, 1080, 1083, 1084, 1087, 1089, 1091, 1092, 1093, 1096, 1104, 1106, 1107, 1108, 1109, 1114, 1115, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1135, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1357, 1362, 1366, 1370, 1373, 1380, 1381], "0": [1, 7, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 51, 52, 56, 57, 58, 60, 64, 65, 72, 83, 95, 131, 144, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 175, 176, 177, 178, 179, 180, 182, 185, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 223, 224, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 244, 245, 249, 251, 252, 253, 256, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 273, 274, 275, 277, 279, 281, 283, 284, 285, 286, 287, 294, 295, 296, 297, 299, 304, 305, 306, 307, 308, 309, 311, 313, 317, 319, 320, 323, 325, 326, 328, 330, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 349, 352, 353, 357, 359, 360, 362, 366, 367, 368, 369, 370, 371, 374, 375, 376, 379, 380, 382, 385, 395, 398, 400, 407, 409, 414, 417, 420, 426, 427, 428, 429, 430, 431, 438, 439, 440, 444, 445, 446, 452, 453, 457, 461, 463, 464, 468, 472, 475, 477, 479, 482, 483, 485, 486, 490, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 508, 509, 511, 513, 514, 516, 518, 520, 524, 525, 528, 531, 533, 534, 535, 536, 538, 540, 545, 546, 549, 552, 555, 556, 557, 563, 564, 576, 580, 582, 583, 584, 585, 587, 588, 590, 591, 592, 596, 601, 604, 607, 608, 609, 611, 613, 622, 623, 624, 625, 626, 628, 629, 631, 634, 635, 637, 638, 639, 640, 644, 645, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 679, 680, 681, 685, 686, 687, 690, 695, 696, 697, 700, 701, 740, 741, 742, 744, 745, 746, 749, 754, 755, 757, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 776, 783, 787, 790, 796, 797, 799, 800, 801, 804, 807, 808, 809, 813, 815, 816, 820, 821, 828, 829, 830, 831, 832, 833, 838, 842, 857, 860, 861, 862, 865, 867, 868, 870, 871, 873, 874, 876, 877, 878, 880, 881, 882, 885, 886, 890, 892, 895, 896, 899, 901, 902, 904, 908, 909, 914, 916, 917, 918, 926, 928, 930, 931, 932, 934, 936, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 958, 963, 964, 968, 975, 976, 977, 978, 979, 980, 981, 983, 985, 988, 994, 1004, 1007, 1009, 1016, 1028, 1035, 1037, 1038, 1040, 1043, 1044, 1045, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1066, 1070, 1075, 1076, 1077, 1079, 1081, 1085, 1089, 1092, 1096, 1099, 1100, 1102, 1103, 1107, 1110, 1115, 1116, 1117, 1118, 1123, 1128, 1131, 1136, 1137, 1139, 1142, 1143, 1147, 1150, 1152, 1153, 1154, 1155, 1158, 1159, 1166, 1167, 1170, 1173, 1176, 1177, 1178, 1184, 1185, 1197, 1201, 1203, 1204, 1205, 1206, 1207, 1211, 1212, 1218, 1219, 1225, 1228, 1230, 1231, 1232, 1236, 1237, 1241, 1242, 1243, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1257, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1276, 1281, 1282, 1283, 1286, 1287, 1291, 1297, 1330, 1331, 1333, 1336, 1338, 1339, 1340, 1341, 1345, 1347, 1357, 1362, 1366, 1372, 1374, 1375, 1376, 1379, 1380, 1382, 1383, 1385, 1387, 1388], "00": [28, 41, 71, 210, 217, 239, 319, 349, 447, 448, 451, 455, 466, 467, 469, 473, 474, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 654, 656, 658, 660, 662, 665, 667, 669, 725, 728, 732, 783, 784, 785, 786, 800, 828, 829, 830, 842, 860, 868, 882, 958, 964, 1060, 1061, 1064, 1065, 1066, 1068, 1069, 1070, 1076, 1077, 1081, 1083, 1084, 1085, 1086, 1090, 1091, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1297, 1311, 1314, 1318, 1380], "000": [9, 11, 28, 41, 53, 349, 1297, 1388], "0000": [311, 349, 1341, 1357, 1388], "000000": [403, 404, 479, 691, 1012, 1013, 1277], "00000001": [12, 756, 842], "00000010": [756, 842], "00000011": [756, 842], "00000100": [756, 842], "00001000": [756, 842], "00001010": [756, 842], "00001011": [756, 842], "0000e": 12, "0000ff": [403, 404, 691, 1012, 1013, 1277], "0001": 479, "000100": 479, "000101": 479, "0005": 964, "00050": 964, "000800": 1096, "001": [58, 735, 786, 1099, 1100, 1102, 1321], "002": [786, 1099, 1100, 1102], "005": [1110, 1357], "00prefix": 964, "00z": [725, 728, 1311, 1314], "01": [29, 56, 70, 71, 178, 210, 217, 237, 239, 254, 281, 319, 349, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 725, 727, 728, 732, 767, 780, 781, 782, 783, 784, 785, 786, 800, 842, 860, 868, 882, 887, 907, 958, 964, 1059, 1061, 1063, 1064, 1065, 1066, 1069, 1070, 1076, 1077, 1081, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1311, 1313, 1314, 1318, 1380, 1383], "010": [9, 730, 1316], "01000": 29, "01000010": [756, 842], "01000110": [756, 842], "012": [671, 708, 842, 1254, 1294, 1357], "0123": [735, 1321], "01234": [671, 842, 1254, 1357], "012345": 1096, "015625": [1228, 1357], "01\u00b2": [708, 1294], "02": [56, 210, 217, 237, 239, 281, 319, 349, 446, 448, 450, 456, 466, 467, 469, 473, 478, 479, 481, 484, 486, 490, 650, 654, 656, 658, 660, 662, 665, 667, 669, 670, 725, 727, 728, 732, 767, 780, 781, 782, 783, 784, 785, 786, 800, 842, 860, 868, 882, 907, 958, 964, 1007, 1061, 1063, 1065, 1066, 1069, 1070, 1076, 1077, 1081, 1083, 1084, 1085, 1089, 1090, 1091, 1094, 1095, 1098, 1101, 1103, 1104, 1201, 1311, 1313, 1314, 1318, 1380, 1381], "03": [56, 137, 148, 210, 239, 254, 281, 319, 349, 448, 450, 451, 456, 458, 466, 467, 469, 472, 473, 474, 476, 478, 479, 480, 481, 484, 486, 487, 490, 496, 509, 650, 654, 656, 658, 660, 662, 665, 667, 669, 727, 732, 780, 781, 782, 783, 784, 785, 786, 842, 860, 882, 887, 907, 958, 964, 1061, 1063, 1064, 1069, 1070, 1076, 1077, 1083, 1084, 1085, 1090, 1091, 1093, 1095, 1097, 1098, 1101, 1103, 1313, 1318], "037037": [1228, 1357], "04": [168, 210, 217, 239, 319, 349, 450, 451, 466, 467, 472, 473, 474, 476, 480, 481, 484, 486, 490, 654, 656, 658, 660, 662, 665, 667, 669, 725, 767, 780, 783, 784, 786, 842, 860, 868, 882, 958, 964, 1064, 1077, 1081, 1083, 1084, 1085, 1090, 1093, 1097, 1098, 1101, 1103, 1107, 1311, 1380], "047198": 1382, "05": [17, 168, 171, 172, 173, 174, 178, 210, 217, 319, 349, 446, 449, 450, 451, 452, 453, 457, 458, 461, 462, 463, 464, 466, 467, 468, 473, 475, 476, 477, 479, 480, 767, 780, 781, 783, 784, 860, 868, 958, 964, 1063, 1064, 1065, 1066, 1090, 1091, 1093, 1094, 1096, 1097, 1104, 1380, 1381, 1383], "050545": 137, "0522623626787952": [1159, 1357], "0545": [1065, 1066, 1094], "05t10": 1096, "06": [178, 210, 319, 349, 446, 450, 465, 471, 473, 474, 475, 487, 488, 780, 783, 800, 860, 958, 964, 1059, 1090, 1091, 1096, 1104], "060": [452, 453, 457, 461, 463, 464, 468, 475, 477], "0601749420166": [225, 349], "06293300616044681": [1110, 1357], "07": [17, 148, 178, 217, 349, 446, 449, 450, 462, 473, 474, 479, 487, 725, 780, 781, 783, 784, 792, 868, 958, 964, 1059, 1063, 1090, 1096, 1311, 1380, 1383], "071068": [217, 349, 868, 958], "08": [148, 171, 172, 173, 174, 217, 254, 281, 296, 349, 446, 450, 466, 467, 474, 479, 650, 725, 784, 786, 800, 842, 868, 887, 907, 958, 964, 1059, 1091, 1104, 1311, 1380, 1381], "085537": [1119, 1357], "09": [56, 148, 217, 281, 349, 446, 450, 466, 467, 479, 630, 650, 729, 780, 781, 783, 830, 842, 868, 907, 958, 964, 1059, 1315], "090909": [631, 842], "094395": 1382, "098612": [585, 842, 1204, 1206, 1357, 1379], "0999": [449, 462], "0_": [41, 349], "0m": [455, 1068], "0x11bc0ad80": 963, "0\u00b5": 479, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 149, 152, 153, 154, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 178, 182, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 407, 409, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 597, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 712, 713, 717, 718, 719, 720, 721, 722, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 838, 842, 857, 858, 860, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 964, 968, 969, 970, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1016, 1027, 1028, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1282, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1297, 1298, 1299, 1303, 1304, 1321, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357, 1362, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 51, 56, 64, 137, 148, 149, 151, 162, 170, 212, 217, 221, 227, 236, 237, 239, 241, 243, 244, 245, 250, 254, 257, 268, 272, 274, 279, 281, 287, 296, 300, 323, 328, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 360, 364, 372, 373, 374, 376, 428, 434, 437, 442, 446, 447, 449, 450, 452, 453, 455, 457, 461, 462, 463, 464, 466, 467, 468, 472, 473, 474, 475, 477, 479, 487, 490, 496, 517, 518, 519, 524, 530, 542, 550, 556, 558, 564, 574, 576, 578, 582, 584, 600, 602, 613, 628, 630, 631, 634, 644, 645, 650, 682, 730, 740, 743, 756, 767, 768, 776, 781, 783, 784, 787, 790, 792, 794, 802, 803, 827, 830, 842, 863, 864, 868, 871, 882, 883, 885, 887, 891, 900, 901, 907, 909, 919, 920, 928, 934, 937, 939, 942, 943, 944, 945, 946, 947, 948, 958, 964, 1041, 1055, 1059, 1060, 1062, 1063, 1068, 1078, 1090, 1096, 1104, 1107, 1110, 1116, 1138, 1149, 1163, 1171, 1179, 1185, 1195, 1197, 1199, 1203, 1205, 1209, 1225, 1237, 1256, 1258, 1316, 1329, 1336, 1338, 1341, 1357, 1366, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1383, 1388], "100": [11, 18, 28, 41, 53, 133, 136, 144, 148, 149, 150, 153, 157, 158, 159, 162, 166, 255, 273, 292, 349, 479, 644, 645, 675, 689, 699, 701, 704, 713, 729, 785, 842, 888, 913, 958, 964, 1112, 1205, 1221, 1236, 1237, 1244, 1245, 1247, 1261, 1275, 1287, 1290, 1299, 1315, 1357, 1377, 1388], "1000": [150, 225, 305, 326, 349, 365, 842, 932, 958, 1099, 1205, 1335, 1357, 1388], "10000": [148, 252, 349], "100000": [11, 28], "1000000": [12, 1102], "1001": [326, 349, 932, 958], "1002": [326, 349, 932, 958], "10047419486152048166": [240, 349], "1005": [365, 842], "100_000": [53, 820, 892, 958], "100\u00b5": 479, "101": [9, 28, 255, 349, 450, 479, 730, 888, 958, 964, 1316, 1388], "101000": 450, "10101": [28, 1383], "1010101": 9, "101514": [217, 349, 868, 958], "102": [255, 349, 888, 958], "1024": [38, 47, 48, 51, 148, 149, 150, 158, 166, 349, 407, 958, 1016], "1040361802642717": [1159, 1357], "107149": 1382, "10734580197236529959": [1137, 1357], "1073741824": [676, 842], "10783150408545073287": [240, 349], "107_930_000": 1366, "10_000": [41, 349], "10i": [239, 349, 882, 958], "10m": [474, 487, 1091, 1104], "10t00": 479, "11": [11, 17, 47, 51, 170, 178, 208, 217, 254, 281, 349, 360, 466, 467, 469, 474, 487, 511, 524, 556, 607, 631, 640, 650, 652, 666, 682, 756, 800, 825, 830, 838, 842, 857, 863, 864, 868, 883, 887, 891, 901, 907, 920, 958, 964, 1086, 1091, 1104, 1209, 1243, 1357, 1375], "110": [221, 349, 713, 730, 871, 958, 1316], "1101441246220388612": [518, 842], "111": [11, 1377], "11111": 1092, "111110": 1092, "11111001": [756, 842], "11111010": [756, 842], "11111111": 11, "112": [676, 842, 1388], "11330": 177, "1152921504606846976": [1234, 1357], "116": 177, "11638928888656214026": [518, 842], "118034": [918, 958], "11aa": 1380, "11aabb": 1380, "11h": [447, 1060], "12": [27, 41, 56, 137, 148, 170, 178, 217, 239, 250, 254, 255, 281, 296, 319, 349, 360, 436, 447, 449, 450, 454, 462, 465, 466, 467, 469, 470, 471, 472, 474, 479, 487, 488, 489, 496, 524, 556, 588, 604, 631, 639, 650, 666, 676, 690, 711, 729, 777, 780, 783, 784, 785, 800, 803, 828, 829, 830, 842, 868, 882, 883, 887, 888, 891, 907, 914, 920, 958, 964, 1060, 1062, 1063, 1075, 1076, 1078, 1082, 1089, 1091, 1096, 1104, 1116, 1209, 1253, 1276, 1298, 1315, 1357, 1379, 1380, 1381, 1383, 1385, 1388], "120": [255, 349, 786, 888, 958, 1382], "1200": [671, 842], "120134": [729, 1315], "121": 1388, "123": [9, 597, 690, 697, 712, 735, 832, 964, 1276, 1283, 1321, 1334, 1357], "123000": 964, "1232e": [1043, 1045, 1357], "1234": [28, 671, 842], "12345": [792, 1038, 1096, 1128, 1253, 1357], "1234500": 964, "123456": [9, 964], "1234567": 28, "123456780": 137, "12346": 792, "123465": 964, "123a123": 712, "123abc": [711, 1297, 1298], "125": [1, 41, 60, 349, 358, 635, 821, 842, 917, 958, 1225, 1228, 1357], "1252": 148, "127": [1345, 1357, 1376], "128": [58, 72, 78, 1225, 1357], "129": [676, 842], "13": [211, 212, 217, 228, 229, 236, 244, 255, 256, 268, 281, 323, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 360, 446, 452, 453, 457, 461, 463, 464, 468, 475, 477, 600, 602, 650, 729, 770, 776, 779, 783, 790, 826, 828, 831, 842, 861, 862, 868, 876, 877, 888, 890, 907, 928, 937, 939, 942, 943, 944, 945, 946, 947, 948, 958, 1059, 1091, 1104, 1105, 1209, 1315, 1357, 1376], "130": [255, 349, 888, 958], "13382926553367784577": [518, 842], "134821952": 1366, "134_821_952": 1366, "135": [764, 1382], "13614470193936745724": [518, 842], "13756996518000038261": [1137, 1357], "13d": 479, "13h": [447, 1060], "14": [40, 170, 217, 255, 258, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 447, 452, 453, 457, 461, 463, 464, 468, 475, 477, 479, 524, 597, 640, 783, 828, 829, 842, 868, 888, 937, 939, 942, 943, 944, 945, 946, 947, 948, 958, 964, 1060, 1091, 1096], "140": [255, 349, 888, 958], "141592653589793": 11, "141593": [639, 842, 975, 1357, 1379, 1382], "142857": [1225, 1357], "143": [729, 1315, 1388], "1433": [39, 349], "1436e16": 178, "1438741209321515184": [240, 349], "1440": [484, 1101], "1443e235": 1388, "149": 1388, "14d": 964, "14h": 479, "15": [11, 41, 170, 217, 239, 244, 255, 258, 281, 349, 438, 442, 467, 472, 474, 479, 487, 496, 634, 650, 666, 708, 777, 783, 828, 829, 842, 868, 882, 888, 907, 958, 964, 1052, 1055, 1091, 1096, 1104, 1116, 1294, 1357, 1376, 1380], "150": [255, 349, 888, 958, 1245, 1357], "1500": [170, 181], "15000": [252, 349], "153061": [538, 842], "155": 144, "15836": 178, "15_000": [252, 349], "16": [1, 41, 58, 79, 89, 170, 184, 217, 239, 255, 281, 323, 349, 434, 437, 472, 479, 524, 604, 611, 630, 635, 650, 730, 740, 776, 786, 787, 790, 800, 842, 868, 882, 888, 907, 914, 928, 958, 964, 1091, 1104, 1225, 1266, 1316, 1330, 1357, 1376, 1379, 1380, 1385], "160": [255, 349, 888, 958], "165": [1091, 1104], "1656e15": [1045, 1357], "166667": [1225, 1357], "1666683077": 792, "1666683099": 792, "167": 56, "16996": 1388, "16h": 964, "17": [170, 178, 225, 254, 328, 349, 496, 522, 630, 652, 670, 772, 792, 829, 842, 887, 934, 958, 1043, 1045, 1091, 1116, 1141, 1243, 1357, 1388], "170": [144, 255, 349, 888, 958], "17293822569102704640": [1234, 1357], "174": 1388, "175201": [680, 842, 1267, 1357], "1755e": [175, 178], "1764": 60, "17888890": [225, 349], "179": 1388, "17_500": [252, 349], "18": [39, 137, 153, 217, 265, 281, 349, 437, 474, 487, 490, 524, 613, 630, 650, 740, 842, 868, 897, 901, 907, 958, 964, 1096, 1107, 1374, 1385], "180": [144, 440, 639, 842, 1382], "1800": [472, 1089], "1844": 178, "18446744073709551614": [1234, 1357], "185_000_000": 1366, "186": 1388, "1875": [668, 842, 926, 958], "1897": [449, 462, 1062, 1078], "18d": 964, "19": [178, 254, 281, 349, 449, 474, 650, 656, 658, 660, 662, 729, 842, 887, 907, 958, 1062, 1091, 1104, 1315], "1920": 1380, "196": 1381, "1964": [901, 958], "1969": [1380, 1381], "1970": [70, 71, 168, 1366], "1972": 1366, "1976": [460, 491], "1977": [460, 491], "1978": [452, 453, 457, 460, 461, 463, 464, 468, 475, 477, 491, 1381], "1979": [460, 491], "1980": 479, "1985": [781, 784], "1990": [148, 1366], "1993": 1366, "1994": 1366, "1995": 148, "1998": [469, 1086], "1999": [296, 349, 469, 479, 964, 1086, 1096, 1383], "199992": [892, 958], "199994": [892, 958], "199996": [892, 958], "199998": [892, 958], "1_000_000": [225, 349, 1114, 1357], "1_234_500": 964, "1d": [239, 254, 281, 319, 349, 448, 469, 474, 479, 481, 484, 487, 490, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 786, 802, 829, 830, 842, 882, 887, 907, 958, 964, 1061, 1069, 1076, 1086, 1091, 1095, 1098, 1101, 1104, 1116, 1357], "1e": [12, 171, 172, 173, 174], "1e6": 12, "1h": [239, 254, 281, 319, 349, 455, 469, 474, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1068, 1070, 1086, 1091, 1104, 1116, 1357], "1i": [239, 281, 319, 349, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 842, 882, 907, 958, 1116, 1357], "1m": [239, 254, 281, 319, 349, 469, 474, 486, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1099, 1100, 1102, 1103, 1104, 1116, 1357], "1mo": [239, 254, 281, 319, 349, 451, 466, 467, 469, 473, 474, 480, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1064, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1097, 1104, 1105, 1116, 1357], "1n": [239, 254, 281, 319, 349, 469, 474, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104, 1116, 1357], "1q": [239, 254, 281, 319, 349, 469, 474, 487, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104], "1st_col": 964, "1u": [239, 254, 281, 319, 349, 469, 474, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104, 1116, 1357], "1w": [239, 254, 281, 319, 349, 469, 474, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104, 1116, 1357], "1w2d": [781, 782], "1y": [239, 254, 281, 319, 349, 469, 474, 487, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104], "1y2mo": [469, 1086], "1zy3": [690, 1276], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 64, 65, 83, 87, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 151, 157, 158, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 192, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 362, 364, 365, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 409, 414, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 458, 459, 462, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 604, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 816, 820, 821, 822, 823, 824, 825, 827, 830, 831, 832, 838, 842, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 964, 968, 969, 970, 973, 976, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1016, 1027, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1060, 1063, 1065, 1066, 1068, 1070, 1071, 1074, 1075, 1076, 1078, 1080, 1081, 1082, 1083, 1084, 1088, 1089, 1090, 1091, 1094, 1104, 1106, 1107, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1282, 1284, 1286, 1287, 1288, 1290, 1291, 1293, 1294, 1297, 1298, 1303, 1304, 1306, 1307, 1308, 1311, 1312, 1314, 1315, 1316, 1317, 1320, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357, 1362, 1366, 1367, 1369, 1370, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388], "20": [39, 40, 41, 65, 148, 153, 170, 175, 176, 177, 178, 182, 185, 208, 217, 221, 227, 243, 244, 265, 272, 274, 279, 296, 306, 307, 311, 325, 330, 349, 372, 373, 374, 428, 442, 449, 452, 453, 457, 461, 462, 463, 464, 468, 474, 475, 477, 479, 487, 490, 511, 518, 524, 588, 596, 607, 634, 654, 656, 658, 660, 662, 665, 667, 669, 695, 740, 755, 783, 792, 802, 821, 829, 842, 857, 868, 871, 874, 897, 900, 917, 931, 936, 958, 964, 1055, 1062, 1066, 1078, 1091, 1096, 1104, 1107, 1119, 1136, 1236, 1281, 1336, 1338, 1341, 1357, 1373, 1374, 1377, 1383], "200": [482, 483, 485, 644, 645, 842, 964, 1112, 1221, 1236, 1237, 1244, 1245, 1247, 1357, 1377], "2000": [449, 459, 462, 466, 467, 469, 964, 1062, 1072, 1078, 1083, 1084, 1086, 1092, 1366, 1380], "200000": [482, 892, 958], "200000000": 485, "2001": [17, 448, 449, 454, 456, 459, 462, 465, 469, 470, 471, 474, 478, 487, 488, 489, 490, 654, 656, 658, 660, 662, 665, 667, 669, 725, 842, 964, 1061, 1062, 1067, 1069, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1091, 1095, 1104, 1105, 1106, 1107, 1108, 1311], "2002": [148, 459, 469, 1072, 1086, 1108], "2003": [469, 792, 1086], "2004": [469, 1086], "2005": [469, 1086], "2006": [469, 1086], "2008": 1366, "200m": [482, 483, 485], "2010": [296, 349, 479, 964], "2011": [447, 1060], "2012": [447, 1060, 1383], "2013": 1089, "2016": [254, 349, 887, 958], "2017": [254, 349, 887, 958], "2018": [254, 349, 473, 887, 958, 1090], "2019": [254, 349, 887, 958], "202": 1381, "2020": [152, 163, 210, 217, 237, 254, 281, 349, 352, 446, 451, 455, 458, 473, 476, 479, 480, 481, 482, 483, 484, 485, 486, 496, 650, 725, 727, 728, 767, 842, 860, 868, 887, 907, 958, 964, 1059, 1064, 1068, 1071, 1090, 1093, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1116, 1311, 1313, 1314, 1357, 1381], "2021": [210, 217, 237, 239, 319, 349, 725, 802, 860, 868, 882, 958, 964, 1065, 1066, 1073, 1094, 1311, 1380], "2022": [56, 210, 217, 237, 349, 450, 474, 487, 725, 781, 782, 784, 785, 786, 792, 860, 868, 958, 964, 1063, 1073, 1091, 1104, 1311], "2023": [17, 41, 137, 170, 252, 349, 450, 786, 802, 964, 1063], "2024": [170, 446, 452, 453, 457, 458, 461, 463, 464, 468, 472, 475, 477, 630, 767, 780, 781, 783, 784, 786, 842, 964, 1059, 1071, 1089, 1380, 1383], "2025": [446, 458, 472, 767, 800, 964, 1059, 1071], "2026": 1381, "2030": 1380, "2031": 964, "2040": 479, "2047317070637311557": [240, 349], "2055938745": 137, "2065": [452, 453, 457, 461, 463, 464, 468, 475, 477], "2068": 178, "207": 1381, "2077": [296, 349, 479, 964, 1096, 1380, 1381], "2095": 178, "20_000": [41, 349], "20t08": 479, "20t18": 1096, "20word": 151, "21": [170, 217, 265, 298, 349, 449, 654, 656, 658, 660, 662, 665, 667, 669, 783, 792, 800, 842, 868, 897, 958, 964, 1062, 1374], "213": 1388, "2147483647": 1388, "2147483648": [1207, 1357], "21d": 964, "22": [47, 51, 170, 178, 349, 454, 470, 474, 487, 489, 490, 652, 654, 656, 658, 660, 662, 665, 667, 669, 725, 783, 838, 842, 958, 964, 1091, 1104, 1107, 1243, 1311, 1357, 1380, 1381, 1388], "221": 1388, "2246e": [1266, 1330, 1357], "225": [474, 487, 1382], "22500": 820, "22_000_000": 1366, "22_500": 820, "23": [11, 131, 178, 217, 239, 281, 311, 349, 450, 454, 457, 470, 472, 474, 479, 489, 650, 654, 656, 658, 660, 662, 665, 667, 669, 783, 786, 828, 829, 830, 842, 868, 882, 907, 917, 958, 964, 1063, 1070, 1089, 1341, 1357, 1387, 1388], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1366, "2337": [41, 349], "234": 28, "2345": 964, "23456789": 11, "235": 1388, "23h": 964, "24": [58, 170, 239, 254, 258, 281, 296, 319, 349, 436, 438, 454, 469, 470, 474, 481, 487, 489, 611, 650, 654, 656, 658, 660, 662, 665, 667, 669, 708, 781, 782, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 1052, 1086, 1091, 1098, 1104, 1158, 1357, 1380, 1387], "24030": 177, "249": [756, 842], "25": [1, 28, 41, 60, 137, 217, 221, 239, 254, 281, 306, 311, 319, 323, 349, 407, 442, 454, 455, 470, 474, 479, 487, 489, 496, 635, 637, 640, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 749, 783, 784, 785, 786, 792, 800, 801, 804, 829, 830, 842, 868, 871, 882, 887, 894, 907, 926, 928, 958, 964, 1016, 1054, 1055, 1068, 1091, 1096, 1104, 1110, 1116, 1139, 1225, 1230, 1297, 1357, 1374, 1379, 1385, 1386], "250": [756, 842, 1245, 1357, 1377, 1388], "2500": [252, 311, 349], "254508": [496, 842, 1116, 1357], "255": 1388, "256": [258, 349, 407, 1016, 1225, 1357, 1379], "2560": 1016, "259921": [426, 842, 1037, 1357, 1379], "25_000_000": 1366, "26": [39, 41, 170, 175, 176, 177, 178, 182, 217, 349, 455, 488, 868, 958, 1068], "266667": [217, 349, 868, 958], "27": [1, 60, 306, 342, 349, 437, 465, 471, 488, 740, 842, 948, 964, 1228, 1336, 1357, 1387, 1388], "270": 1382, "28": [302, 307, 349, 358, 473, 490, 842, 1090, 1107, 1338, 1357, 1380, 1382, 1387, 1388], "283185": [639, 842], "2846": 349, "285714": [525, 842, 1143, 1357], "289962": 1382, "28_341_469": 1366, "29": [17, 170, 447, 466, 1060, 1083], "29096": 1388, "290994": [918, 958], "292432": [976, 1357], "292893": [496, 842, 1116, 1357], "2_color_scal": [41, 349], "2d": [281, 306, 307, 349, 469, 650, 802, 842, 907, 958, 1060, 1067], "2h": [654, 656, 658, 660, 662, 665, 667, 669, 842], "2i": [239, 349, 882, 958], "2m": [964, 1081], "2x": 177, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 56, 57, 58, 59, 60, 64, 65, 83, 95, 101, 104, 106, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 151, 153, 157, 158, 159, 162, 168, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 358, 359, 360, 361, 363, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 609, 610, 611, 612, 613, 614, 616, 618, 620, 621, 624, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 683, 684, 685, 688, 689, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 726, 727, 732, 733, 736, 737, 738, 739, 740, 741, 743, 747, 748, 751, 752, 753, 755, 756, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 964, 969, 970, 973, 975, 977, 978, 979, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1017, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1063, 1064, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1078, 1080, 1081, 1082, 1087, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1102, 1104, 1106, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1162, 1163, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1275, 1277, 1278, 1279, 1282, 1283, 1284, 1287, 1288, 1289, 1290, 1292, 1293, 1297, 1298, 1299, 1300, 1301, 1305, 1312, 1313, 1318, 1319, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1337, 1338, 1339, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357, 1362, 1366, 1367, 1369, 1370, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388], "30": [41, 217, 227, 239, 243, 272, 279, 302, 323, 349, 352, 372, 373, 374, 442, 450, 452, 453, 457, 461, 463, 464, 465, 466, 468, 471, 473, 474, 475, 477, 479, 480, 487, 488, 518, 596, 676, 783, 800, 802, 828, 829, 842, 868, 874, 882, 900, 928, 958, 964, 1055, 1063, 1083, 1090, 1091, 1096, 1097, 1104, 1136, 1357, 1362, 1373, 1374, 1377, 1379, 1380, 1382, 1383, 1386, 1388], "300": [302, 349, 517, 628, 645, 842, 964, 1237, 1244, 1245, 1247, 1357, 1377], "3000": 964, "3002": [449, 462, 1062, 1078], "30103": [584, 842, 1379], "3022416320763508302": [1137, 1357], "30_000": [41, 349], "30m": [239, 349, 474, 487, 882, 958, 1091, 1104], "30t16": 479, "31": [60, 65, 217, 296, 349, 449, 450, 454, 462, 466, 469, 472, 480, 695, 725, 780, 783, 792, 802, 821, 868, 958, 964, 1060, 1062, 1063, 1067, 1078, 1083, 1089, 1096, 1097, 1236, 1281, 1311, 1357, 1381, 1383, 1388], "31t06": 1096, "32": [58, 70, 76, 80, 90, 249, 254, 281, 349, 611, 650, 676, 842, 887, 907, 958, 1056, 1087, 1225, 1248, 1357, 1374, 1380], "321": [28, 1388], "3212": [729, 1315], "321cba": 1380, "3265500": 964, "32971": [490, 1107], "32974": [490, 1107], "32976": [490, 1107], "32bit": [306, 349], "33": [217, 265, 349, 670, 842, 868, 897, 958, 1248, 1357, 1381], "333": [17, 671, 842, 1112, 1221, 1254, 1357], "33333": 1383, "333333": [245, 349, 613, 800, 885, 958, 1225, 1252, 1357, 1374], "34": [217, 349, 711, 725, 868, 958, 1298, 1311], "3420": [729, 1315], "343622": [681, 842], "345": [423, 424, 706, 707, 1032, 1033, 1292, 1293], "3450": [1254, 1357], "3456": 964, "34776706224699483": [1268, 1357], "35": [41, 349, 442, 479, 783, 842, 1055, 1357], "350": [349, 352, 517, 628, 842, 1245, 1357, 1362], "3500": [1254, 1357], "356": [454, 470, 489], "356194": [763, 764, 1382], "357": [454, 470, 489], "358": [454, 470, 489], "359": [454, 470, 489], "36": [217, 349, 868, 958, 1385], "360": [440, 639, 842, 1382], "361": 1388, "363961": [576, 1197], "366": [470, 1087], "37": [13, 964], "370h": [496, 842, 1116, 1357], "37338": 1388, "38": [41, 137, 175, 178, 349], "38180177416060584": [663, 842, 1249, 1357], "381802": [663, 842, 1249, 1357], "386294": [585, 842, 1206, 1357, 1379], "389056": [500, 842, 1119, 1357, 1379], "39": [667, 792, 842], "39m": 964, "3_color_scal": [41, 349], "3d12h4m25": [239, 254, 281, 319, 349, 474, 487, 496, 650, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1091, 1104, 1116, 1357], "3f": [151, 725, 728, 1311, 1314], "3i": [239, 281, 349, 882, 958], "3rd": [1288, 1312], "3xy": [690, 1276], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 56, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 162, 170, 182, 206, 207, 208, 209, 210, 211, 212, 216, 218, 222, 226, 227, 228, 229, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 265, 267, 268, 269, 271, 272, 273, 274, 277, 281, 283, 284, 291, 292, 295, 299, 300, 301, 302, 303, 304, 307, 310, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 362, 364, 376, 383, 384, 385, 387, 388, 389, 390, 391, 393, 395, 396, 397, 398, 400, 407, 418, 419, 420, 423, 424, 426, 427, 428, 432, 433, 436, 437, 438, 440, 443, 450, 453, 454, 462, 470, 471, 472, 473, 474, 475, 476, 479, 481, 484, 486, 487, 489, 493, 494, 496, 500, 501, 503, 504, 505, 507, 508, 509, 512, 513, 514, 515, 516, 519, 521, 523, 524, 525, 526, 535, 536, 540, 541, 542, 549, 550, 551, 552, 553, 555, 556, 558, 566, 568, 569, 570, 571, 572, 573, 574, 578, 579, 584, 587, 588, 589, 609, 611, 613, 614, 616, 618, 620, 621, 624, 625, 626, 629, 630, 632, 633, 634, 635, 638, 640, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 675, 678, 682, 683, 684, 685, 688, 690, 694, 697, 700, 702, 706, 707, 708, 709, 710, 711, 712, 715, 716, 717, 718, 723, 724, 725, 726, 730, 735, 736, 738, 739, 740, 741, 743, 746, 747, 748, 749, 755, 756, 758, 760, 761, 763, 764, 765, 766, 768, 769, 770, 771, 772, 774, 776, 777, 778, 779, 780, 783, 784, 785, 787, 789, 790, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 838, 842, 857, 858, 860, 861, 862, 863, 864, 867, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 904, 907, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 931, 932, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 964, 968, 973, 976, 983, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1016, 1027, 1032, 1033, 1038, 1039, 1041, 1047, 1052, 1054, 1056, 1066, 1070, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1088, 1090, 1091, 1093, 1098, 1101, 1103, 1104, 1105, 1106, 1113, 1116, 1120, 1121, 1123, 1124, 1130, 1131, 1133, 1138, 1139, 1142, 1143, 1144, 1145, 1149, 1152, 1153, 1154, 1155, 1157, 1163, 1170, 1171, 1172, 1173, 1174, 1179, 1183, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1199, 1200, 1215, 1218, 1219, 1222, 1225, 1226, 1227, 1228, 1232, 1233, 1236, 1237, 1238, 1241, 1242, 1246, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1261, 1262, 1265, 1268, 1269, 1270, 1274, 1276, 1280, 1283, 1286, 1288, 1292, 1293, 1295, 1296, 1301, 1303, 1304, 1309, 1310, 1311, 1312, 1316, 1321, 1322, 1325, 1327, 1329, 1335, 1338, 1340, 1342, 1348, 1357, 1362, 1366, 1367, 1369, 1370, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1385, 1386, 1387, 1388], "40": [41, 217, 227, 254, 272, 349, 474, 479, 487, 518, 582, 729, 740, 842, 868, 887, 900, 958, 964, 1073, 1104, 1203, 1315, 1373, 1374, 1377, 1380], "400": [318, 349, 482, 483, 485, 925, 958, 1244, 1245, 1247, 1357, 1377], "4000000": [1114, 1357], "400157": 95, "404": [255, 349, 696, 698, 888, 958, 1282, 1284], "4096": 1379, "41": [217, 349, 667, 842, 868, 958, 1374, 1388], "412277": 178, "414214": [685, 842, 1271, 1357, 1379], "4160": 60, "416147": 1382, "4164": [254, 349, 887, 958], "42": [60, 217, 240, 265, 281, 349, 479, 650, 842, 868, 897, 907, 958, 1137, 1357, 1373, 1387], "424778": [639, 842], "428571": [495, 842, 1115, 1357], "429101": 1374, "4294967296": [47, 349], "43": [217, 281, 349, 437, 650, 667, 842, 868, 907, 958], "4321": 964, "433013": [664, 842, 918, 958], "44": [11, 265, 349, 443, 842, 897, 958], "4411": [254, 349, 887, 958], "44225": [1037, 1357], "444": 11, "44444444444": 11, "45": [41, 217, 281, 349, 450, 474, 487, 650, 667, 690, 697, 737, 764, 783, 802, 828, 829, 842, 868, 907, 958, 964, 1063, 1091, 1096, 1104, 1276, 1283, 1324, 1379, 1380, 1382, 1386, 1388], "450": [1245, 1357], "45000": 820, "4500000": 964, "456": [9, 11, 450, 964, 1063, 1334, 1357], "456000": [450, 1063], "456001\u00b5": 964, "4566": [254, 349, 887, 958], "456789": [479, 964, 1092], "456789\u00b5": 964, "456m": 964, "457658": 1382, "459148": [492, 842], "46": 964, "4696": [254, 349, 887, 958], "47": [56, 217, 349, 667, 842, 868, 958, 964, 1374], "470": [901, 958], "47033": [663, 842, 1249, 1357], "47033046033698594": [663, 842, 1249, 1357], "475": [901, 958], "48": [13, 178, 281, 349, 650, 740, 842, 907, 958, 964], "4827": [254, 349, 887, 958], "485": 1388, "49": [217, 349, 868, 958, 964], "492474": [496, 842, 1116, 1357], "498": [255, 349, 888, 958], "4_500_000": 964, "4ab4a": 1380, "4d": [496, 842, 1116, 1357], "4f6228": [41, 349], "4f71": [41, 349], "4xm": [1077, 1079, 1085], "51": 964, "512": [47, 150, 251, 349, 407, 635, 842, 1016, 1225, 1357], "51966": [730, 1316], "52": [323, 349, 488, 670, 842, 928, 958], "523599": 1382, "527525": [1250, 1357], "53": [488, 1105, 1385], "533316061": 1366, "533_316_061": 1366, "54": [500, 842, 1159, 1357, 1379, 1388], "540": [440, 639, 842], "540302": 1382, "543": 9, "543081": [430, 842, 1044, 1357], "5432": 150, "54321": 9, "544": 1388, "544705": 772, "549306": [980, 1357], "55": [41, 58, 349, 522, 842, 1141, 1357, 1376, 1380, 1381], "5555": 964, "55550": 964, "56": [137, 711, 744, 842, 1298], "566371": [639, 842], "567": 28, "56789": [1038, 1128, 1253, 1357], "57": [667, 842, 1253, 1357, 1382, 1388], "570796": [366, 368, 842, 975, 977, 1357, 1382], "575050513": [175, 178], "58": [144, 273, 349], "581139": [1054, 1357], "584963": [583, 842], "587401": [426, 842, 1379], "59": [137, 217, 349, 450, 464, 472, 475, 479, 509, 783, 828, 829, 830, 842, 868, 958, 964, 1063, 1081, 1089, 1092], "59815": [500, 842, 1379], "5_000_555": 964, "5th": [41, 349], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 55, 57, 59, 64, 96, 97, 104, 130, 133, 134, 135, 136, 157, 158, 170, 207, 210, 213, 214, 218, 219, 220, 222, 223, 224, 226, 227, 230, 233, 234, 235, 236, 237, 239, 241, 243, 244, 245, 247, 249, 250, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 266, 267, 270, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 292, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 313, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 332, 342, 343, 349, 352, 353, 358, 362, 383, 384, 385, 387, 393, 419, 420, 423, 424, 436, 437, 443, 446, 450, 454, 458, 465, 469, 470, 471, 482, 483, 485, 488, 489, 492, 494, 503, 504, 509, 513, 519, 521, 524, 542, 543, 544, 553, 556, 569, 570, 571, 572, 576, 588, 589, 625, 629, 636, 639, 640, 641, 646, 648, 650, 653, 655, 657, 659, 661, 664, 666, 667, 668, 673, 678, 684, 690, 695, 706, 707, 730, 741, 743, 748, 756, 758, 760, 767, 769, 774, 776, 777, 778, 780, 783, 787, 790, 796, 803, 804, 808, 821, 825, 832, 838, 842, 860, 863, 864, 865, 866, 869, 870, 872, 873, 874, 875, 878, 879, 880, 882, 883, 885, 886, 887, 889, 891, 892, 899, 901, 903, 904, 905, 907, 908, 909, 911, 913, 914, 915, 916, 917, 920, 923, 924, 927, 928, 931, 932, 938, 948, 949, 958, 964, 990, 992, 993, 994, 996, 1002, 1032, 1039, 1043, 1045, 1050, 1051, 1056, 1059, 1071, 1086, 1096, 1106, 1113, 1120, 1133, 1139, 1164, 1165, 1174, 1177, 1190, 1191, 1192, 1193, 1197, 1215, 1229, 1232, 1233, 1238, 1240, 1246, 1248, 1250, 1252, 1257, 1262, 1265, 1276, 1281, 1292, 1316, 1328, 1338, 1357, 1362, 1367, 1370, 1372, 1374, 1375, 1379, 1385, 1386, 1388], "60": [41, 227, 273, 349, 457, 463, 464, 475, 486, 509, 667, 725, 842, 1087, 1092, 1103, 1234, 1311, 1357, 1382], "600": [318, 349, 482, 483, 485, 925, 958, 964], "60000": 461, "600000": 964, "60000000": 468, "60206": [584, 842, 1379], "605551": 823, "605551275463989": 823, "609438": 1379, "60_000": [452, 453, 457, 461, 463, 464, 468, 475, 477], "61": [273, 349], "625": [661, 842], "626172": [692, 1278], "63": [667, 842], "63204": 1388, "6331e16": [1330, 1357, 1382], "636253": 1382, "64": [1, 58, 60, 71, 73, 77, 81, 88, 91, 169, 206, 311, 349, 431, 611, 635, 842, 1225, 1228, 1357, 1379], "64030": [730, 1316], "642093": 1382, "647961": 178, "64bit": [170, 642, 842, 1234, 1357], "65": [221, 349, 871, 958, 1110, 1357], "650": [517, 628, 842], "65280": [730, 1316], "654": [28, 821, 917, 958], "65432": 1383, "654321": 597, "65536": 1379, "65552": [406, 1015], "66": [254, 318, 349, 667, 756, 842, 887, 925, 958, 1159, 1248, 1357], "663053": 137, "666": 964, "666000": 964, "666667": [217, 245, 320, 337, 349, 495, 800, 801, 807, 842, 868, 885, 926, 943, 958, 1115, 1357], "666f6f": [692, 1278], "67500": 820, "676": [255, 349, 888, 958], "678": [690, 697, 1276, 1283], "6789": [29, 964], "67890": 29, "686241": 1374, "69": [667, 842, 1159, 1357], "693147": [585, 842, 1204, 1206, 1357, 1379], "6_000_000": 1366, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 57, 59, 64, 157, 158, 170, 185, 207, 210, 213, 214, 215, 217, 219, 220, 223, 224, 226, 230, 233, 235, 239, 241, 243, 245, 253, 257, 259, 261, 263, 265, 266, 270, 273, 275, 278, 279, 281, 282, 284, 285, 286, 287, 289, 292, 294, 297, 298, 299, 300, 305, 307, 308, 309, 317, 319, 320, 321, 349, 352, 353, 358, 362, 384, 385, 387, 396, 437, 449, 450, 454, 462, 470, 473, 474, 479, 487, 489, 500, 513, 519, 524, 525, 542, 556, 569, 570, 571, 572, 629, 630, 640, 646, 650, 666, 667, 684, 700, 729, 743, 767, 776, 777, 780, 783, 784, 790, 795, 803, 804, 821, 825, 832, 842, 860, 865, 866, 868, 870, 873, 875, 878, 880, 882, 883, 885, 886, 891, 897, 899, 902, 905, 907, 908, 909, 913, 917, 920, 958, 964, 980, 993, 994, 996, 1005, 1062, 1063, 1067, 1073, 1078, 1090, 1091, 1096, 1104, 1106, 1119, 1143, 1158, 1177, 1190, 1191, 1192, 1193, 1237, 1238, 1251, 1257, 1286, 1315, 1357, 1362, 1367, 1372, 1374, 1375, 1376, 1379, 1381, 1385, 1388], "70": [217, 349, 756, 784, 842, 868, 958, 1159, 1357, 1374], "700": [318, 349, 925, 958], "702963": [41, 349], "7051579356916758811": 164, "707107": [395, 497, 664, 665, 763, 842, 1004, 1117, 1357, 1382], "712389": 1382, "714": 1388, "714286": [525, 842, 1143, 1357], "718281828459045": [11, 492, 583, 842, 1110, 1204, 1357], "718282": [500, 842, 1119, 1357, 1379], "720": [440, 639, 842], "7264": 1388, "732051": [1271, 1357], "7415e16": 178, "742": [255, 349, 888, 958], "75": [41, 217, 221, 349, 362, 629, 637, 640, 653, 655, 657, 659, 664, 666, 668, 800, 804, 842, 868, 871, 958, 964, 1054, 1139, 1159, 1230, 1297, 1357, 1374, 1382, 1388], "7500": [252, 349], "7508": 1388, "754": [749, 842], "754888": [492, 842], "761594": [745, 842, 1331, 1357], "764052": 95, "7654": 964, "765431": 1092, "7654321": 28, "76933c": [41, 349], "77": 1096, "78": [9, 144, 711, 1298], "780": 9, "784": [254, 349, 887, 958], "785398": [370, 763, 764, 842, 979, 1357, 1382], "789": [11, 964], "79": [1159, 1357], "7d": 964, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 48, 56, 57, 59, 60, 64, 82, 86, 92, 157, 158, 170, 207, 210, 213, 214, 215, 217, 219, 220, 222, 223, 224, 226, 230, 233, 235, 237, 241, 243, 250, 253, 254, 255, 257, 258, 259, 261, 263, 266, 275, 278, 279, 281, 282, 284, 285, 286, 287, 289, 292, 294, 296, 297, 298, 300, 305, 307, 308, 309, 317, 320, 321, 323, 349, 362, 364, 376, 384, 385, 387, 434, 437, 438, 450, 479, 513, 520, 524, 525, 550, 552, 556, 569, 570, 571, 572, 611, 629, 630, 635, 640, 646, 647, 652, 676, 682, 684, 708, 709, 710, 725, 756, 761, 767, 772, 774, 777, 779, 787, 789, 794, 795, 798, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 823, 826, 827, 831, 842, 860, 865, 866, 868, 870, 872, 873, 875, 878, 880, 883, 886, 887, 888, 891, 892, 901, 905, 908, 909, 913, 917, 920, 928, 958, 964, 993, 994, 996, 1045, 1052, 1073, 1139, 1143, 1158, 1171, 1173, 1177, 1190, 1191, 1192, 1193, 1225, 1228, 1238, 1241, 1243, 1246, 1248, 1250, 1252, 1295, 1296, 1311, 1357, 1366, 1367, 1372, 1374, 1375, 1376, 1379, 1380, 1381, 1385, 1388], "80": [41, 221, 349, 871, 958], "800": [482, 483, 485, 1096], "8000": 150, "803065983": 137, "81": 1379, "814697265625": [1114, 1357], "816497": [297, 349], "8192": 148, "82": [254, 349, 887, 958], "8257e14": 1388, "83": [254, 349, 887, 958], "833": [254, 349, 887, 958], "833333": [337, 943], "848062": 1382, "848808": 178, "85": [41, 144, 349, 1159, 1357, 1388], "850": [517, 628, 842], "8568409950394724": [1110, 1357], "8589934592": [676, 842], "86": 1388, "8601": 1380, "87": 1388, "876": 9, "88": [217, 349, 868, 958], "881374": [369, 842, 978, 1357], "888": [821, 917, 958], "8_000_000": 1366, "8a": [1012, 1013], "8nin": 1388, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 56, 64, 207, 215, 217, 230, 232, 241, 245, 253, 255, 257, 258, 273, 281, 283, 284, 287, 299, 300, 317, 321, 323, 342, 349, 358, 362, 364, 376, 384, 385, 387, 392, 394, 434, 437, 440, 450, 479, 505, 513, 524, 530, 550, 556, 567, 575, 613, 629, 630, 639, 646, 650, 651, 652, 663, 666, 667, 678, 682, 697, 729, 737, 740, 770, 776, 777, 780, 783, 795, 830, 842, 868, 878, 883, 885, 886, 888, 891, 907, 909, 920, 928, 948, 958, 964, 988, 989, 993, 994, 996, 1001, 1003, 1054, 1067, 1077, 1079, 1085, 1091, 1104, 1105, 1149, 1158, 1171, 1177, 1188, 1196, 1238, 1242, 1243, 1249, 1251, 1253, 1265, 1283, 1315, 1324, 1357, 1366, 1367, 1372, 1375, 1376, 1385], "90": [217, 255, 349, 729, 868, 888, 958, 1315, 1374, 1382], "90000": 820, "901234": [1038, 1128, 1253, 1357], "909": [254, 349, 887, 958], "910": [254, 349, 697, 887, 958, 1283], "910t": [690, 697, 1276, 1283], "914": [254, 349, 887, 958], "9223372036854775807": [752, 842], "9223372036854775808": [586, 842], "927295": 1382, "928571": [498, 842, 1118, 1357], "93": [1159, 1357], "94": [359, 842], "9477376373212048": [1159, 1357], "95": [18, 359, 842, 964], "95b3d7": [41, 349], "96": [18, 217, 349, 359, 842, 868, 958, 1159, 1357], "961": 60, "963624": [497, 842, 1117, 1357], "964028": [273, 349], "96_067_179": 1366, "97": [18, 244, 349, 359, 842, 1159, 1357], "9774092659964970114": [518, 842], "978307200": [456, 1069], "978307200000": 478, "978307200000000": [456, 478, 1069, 1095], "978307200000000000": 1095, "978393600": [456, 1069], "978393600000": 478, "978393600000000": [456, 478, 1069, 1095], "978393600000000000": 1095, "978480000": [456, 1069], "978480000000": 478, "978480000000000": [456, 478, 1069, 1095], "978480000000000000": 1095, "978738": 95, "98": [18, 244, 273, 349, 418, 512, 515, 683, 729, 747, 842, 1315], "987": [28, 597], "987000": 964, "9876": 9, "987654": [28, 964], "987654321": 11, "9876543210": 137, "987m": 964, "988": 11, "99": [18, 41, 228, 229, 244, 247, 273, 318, 349, 359, 418, 502, 504, 512, 515, 683, 747, 842, 876, 877, 925, 958, 1096, 1110, 1122, 1357, 1379], "9914e218": 178, "998347": [273, 349], "999": [449, 462, 964, 1062, 1078, 1377, 1388], "999000": 964, "999954": [273, 349], "999999": [472, 735, 783, 828, 829, 830, 964, 1089, 1096, 1321], "999999\u00b5": 964, "9bbb59": [41, 349], "A": [14, 38, 41, 47, 48, 52, 53, 54, 62, 63, 68, 74, 129, 137, 141, 143, 148, 149, 150, 151, 162, 164, 169, 184, 214, 223, 232, 239, 254, 260, 262, 267, 273, 299, 302, 317, 318, 319, 323, 324, 349, 357, 424, 444, 445, 450, 476, 479, 493, 494, 502, 514, 516, 528, 531, 533, 534, 540, 580, 587, 588, 601, 615, 624, 625, 647, 653, 655, 657, 659, 661, 664, 666, 668, 688, 689, 690, 696, 697, 698, 699, 700, 701, 702, 705, 707, 711, 712, 713, 715, 726, 735, 770, 786, 787, 791, 842, 866, 873, 882, 887, 905, 925, 928, 929, 958, 964, 1033, 1057, 1058, 1063, 1093, 1096, 1112, 1122, 1221, 1244, 1245, 1247, 1250, 1251, 1252, 1274, 1275, 1276, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1291, 1293, 1297, 1298, 1299, 1301, 1312, 1321, 1357, 1366, 1367, 1370, 1383, 1385], "AND": [757, 758, 821, 964, 1376], "ANDs": [409, 842, 1018, 1357], "AS": [296, 349, 821, 822, 917, 958, 1366, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1387], "And": [733, 1319], "As": [13, 55, 96, 97, 130, 132, 133, 134, 136, 153, 157, 158, 166, 230, 277, 306, 311, 349, 580, 832, 878, 904, 958], "At": [47, 48, 49, 50, 51, 62, 63, 273, 349, 863, 864, 874, 901, 914, 958], "BY": [821, 917, 958, 1366, 1369, 1375, 1384, 1385], "Be": 958, "By": [5, 13, 15, 31, 34, 56, 148, 149, 162, 239, 253, 254, 281, 283, 292, 297, 319, 320, 349, 393, 469, 474, 487, 573, 576, 582, 630, 645, 650, 654, 656, 658, 660, 662, 665, 667, 669, 675, 686, 754, 774, 781, 782, 784, 785, 786, 802, 823, 829, 830, 831, 842, 863, 882, 886, 887, 907, 913, 918, 926, 958, 1002, 1086, 1091, 1104, 1194, 1237, 1261, 1272, 1347, 1357], "For": [15, 40, 41, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 221, 222, 225, 227, 253, 254, 273, 281, 306, 335, 349, 352, 466, 467, 479, 495, 497, 498, 509, 580, 589, 601, 642, 681, 688, 696, 697, 698, 700, 702, 726, 776, 786, 790, 791, 832, 838, 842, 871, 872, 887, 907, 941, 958, 1096, 1114, 1115, 1117, 1118, 1121, 1209, 1234, 1268, 1274, 1282, 1283, 1284, 1286, 1288, 1312, 1336, 1357, 1362], "IF": 1378, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 62, 63, 72, 130, 131, 132, 133, 134, 135, 136, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 179, 180, 181, 192, 206, 210, 222, 227, 230, 237, 239, 241, 249, 250, 251, 253, 254, 257, 258, 262, 269, 273, 277, 281, 283, 284, 285, 289, 292, 294, 296, 299, 300, 303, 304, 306, 307, 313, 314, 316, 317, 318, 349, 352, 361, 363, 386, 393, 398, 406, 420, 446, 450, 451, 458, 466, 467, 476, 479, 505, 520, 526, 530, 538, 559, 568, 573, 574, 580, 588, 589, 596, 597, 603, 605, 630, 635, 637, 640, 642, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 677, 681, 682, 687, 697, 698, 700, 702, 703, 704, 715, 716, 717, 718, 720, 721, 722, 725, 726, 727, 728, 732, 735, 753, 757, 759, 762, 766, 767, 768, 771, 772, 774, 776, 781, 782, 784, 785, 786, 789, 790, 796, 797, 798, 800, 801, 802, 804, 808, 814, 817, 818, 819, 824, 826, 829, 830, 832, 833, 842, 863, 864, 872, 874, 878, 882, 886, 887, 892, 896, 901, 903, 904, 905, 907, 911, 913, 914, 915, 917, 922, 924, 925, 933, 941, 951, 958, 963, 964, 971, 972, 995, 1002, 1007, 1015, 1028, 1041, 1059, 1063, 1064, 1071, 1083, 1084, 1093, 1096, 1121, 1138, 1139, 1144, 1149, 1158, 1159, 1163, 1180, 1189, 1194, 1195, 1201, 1209, 1228, 1230, 1232, 1234, 1236, 1237, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1259, 1261, 1264, 1268, 1269, 1273, 1283, 1284, 1286, 1288, 1289, 1290, 1297, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1311, 1312, 1313, 1314, 1318, 1321, 1329, 1332, 1336, 1338, 1346, 1357, 1362, 1366, 1367, 1369, 1377, 1380, 1385], "In": [56, 63, 150, 152, 163, 164, 167, 178, 182, 202, 207, 225, 227, 230, 239, 254, 255, 258, 269, 273, 281, 307, 316, 349, 352, 588, 589, 630, 650, 711, 712, 832, 842, 864, 882, 887, 888, 907, 924, 958, 1114, 1121, 1228, 1233, 1298, 1357, 1362], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 72, 78, 95, 97, 140, 141, 142, 143, 144, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 204, 217, 255, 265, 272, 296, 306, 311, 318, 326, 335, 349, 352, 353, 438, 439, 446, 458, 520, 580, 589, 600, 637, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 767, 769, 800, 801, 832, 838, 842, 859, 863, 864, 868, 888, 892, 897, 917, 925, 932, 941, 958, 966, 1036, 1052, 1053, 1059, 1071, 1139, 1230, 1242, 1243, 1246, 1248, 1249, 1256, 1258, 1336, 1341, 1357, 1362], "Its": [240, 349, 518, 842, 1137, 1357], "NO": 964, "NOT": [133, 250, 290, 349, 580, 599, 674, 842, 912, 958, 1385], "No": [21, 253, 265, 349, 832, 886, 897, 958], "Not": [228, 253, 349, 503, 533, 534, 842, 863, 874, 876, 886, 901, 914, 958, 1123, 1357], "ON": 1385, "OR": [759, 760, 878, 958, 964, 1376], "ORs": [414, 842, 1023, 1357], "On": [749, 842, 890, 958], "One": [56, 217, 253, 269, 306, 311, 349, 362, 629, 761, 773, 789, 795, 798, 807, 809, 812, 813, 822, 842, 868, 886, 958, 964, 1054, 1357], "Or": [238, 239, 254, 281, 295, 319, 328, 349, 352, 496, 650, 684, 781, 782, 784, 785, 829, 830, 838, 842, 881, 882, 887, 907, 916, 934, 958, 1116, 1357], "That": [154, 892, 958], "The": [10, 21, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 73, 74, 75, 83, 87, 88, 95, 97, 98, 100, 130, 132, 133, 134, 136, 143, 145, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 178, 179, 180, 182, 184, 192, 209, 217, 218, 220, 221, 222, 223, 226, 227, 230, 237, 238, 239, 240, 245, 251, 253, 254, 255, 258, 265, 271, 273, 277, 281, 282, 283, 284, 287, 288, 289, 296, 306, 307, 312, 315, 319, 323, 324, 326, 327, 328, 335, 349, 360, 401, 402, 403, 404, 418, 419, 439, 441, 444, 445, 446, 454, 458, 465, 469, 470, 474, 476, 479, 487, 488, 499, 502, 505, 509, 510, 518, 551, 555, 588, 589, 603, 630, 637, 640, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 678, 681, 687, 691, 692, 696, 701, 702, 703, 704, 709, 710, 711, 712, 720, 721, 722, 723, 724, 725, 726, 736, 740, 746, 747, 748, 767, 770, 788, 792, 801, 802, 804, 818, 819, 820, 821, 824, 832, 834, 835, 837, 838, 842, 843, 844, 847, 849, 850, 851, 858, 863, 864, 868, 869, 871, 872, 874, 875, 878, 881, 882, 885, 886, 887, 888, 892, 897, 901, 904, 907, 909, 910, 911, 914, 917, 921, 923, 928, 929, 932, 934, 941, 958, 962, 963, 964, 970, 973, 1010, 1011, 1012, 1013, 1027, 1040, 1053, 1054, 1057, 1058, 1059, 1067, 1071, 1082, 1086, 1087, 1091, 1093, 1096, 1104, 1105, 1121, 1122, 1125, 1129, 1137, 1172, 1176, 1209, 1228, 1230, 1232, 1236, 1237, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1265, 1268, 1273, 1277, 1278, 1287, 1288, 1289, 1290, 1295, 1296, 1297, 1298, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1338, 1340, 1342, 1349, 1351, 1353, 1357, 1358, 1363, 1364, 1365, 1366, 1371, 1385, 1386, 1388], "Then": 167, "There": 1385, "These": [1, 33, 41, 139, 145, 150, 151, 202, 313, 349, 487, 841, 842, 1091, 1104], "To": [40, 63, 228, 349, 428, 444, 445, 503, 504, 688, 695, 696, 697, 700, 711, 712, 721, 722, 723, 724, 733, 842, 876, 958, 1041, 1057, 1058, 1123, 1274, 1281, 1282, 1283, 1286, 1297, 1298, 1319, 1338, 1357, 1385], "Will": [62, 63, 129, 863, 864, 874, 901, 914, 958, 1357], "With": [157, 249, 292, 349, 393, 573, 675, 842, 863, 913, 958, 1002, 1158, 1194, 1261, 1357], "_": [1, 56, 60, 202, 273, 304, 308, 349, 386, 423, 424, 559, 689, 697, 699, 701, 706, 707, 713, 716, 717, 1032, 1033, 1035, 1275, 1283, 1287, 1292, 1293, 1299, 1303, 1333, 1357], "__array_ufunc__": 966, "__call__": 838, "__enter__": 1385, "__exit__": 1385, "__getattr__": 838, "__getitem__": 736, "__init__": [1, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 140, 141, 142, 175, 187, 193, 194, 196, 197, 933, 1385], "__name__": [252, 349], "_bar_": 791, "_btm_by_a": [419, 842], "_btm_by_b": [419, 842], "_by_ca": [419, 748, 842], "_by_cb": [419, 748, 842], "_check_ord": [62, 63, 129, 863, 864, 874, 901, 914, 958], "_df": [1, 57], "_diff": [323, 349, 928, 958], "_eager": [580, 863, 958], "_expr": [1, 58], "_foo": 594, "_geventdataframeresult": [63, 864, 958], "_is_not_nan": [534, 842], "_is_odd": [287, 349, 909, 958], "_isnan": [533, 842], "_isnul": [536, 842], "_kwarg": [863, 901, 958], "_ldf": 1, "_lf": 59, "_lower_boundari": [239, 349, 882, 958], "_mean_squar": [328, 934], "_not_nul": [535, 842], "_o": [423, 424, 706, 707, 1032, 1033, 1292, 1293], "_revers": [614, 618, 647, 842], "_right": [253, 254, 255, 349, 886, 887, 888, 958], "_storage_account": 34, "_suffix": 619, "_sum": [328, 934], "_top_by_a": [748, 842], "_top_by_b": [748, 842], "_train": [930, 958], "_type": [903, 958], "_type_check": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 901, 914, 958], "_upper_boundari": [239, 349, 882, 958], "_world": 791, "a1": [41, 57, 59, 349], "a101": 1388, "a123": [41, 349], "a2": [41, 57, 59, 349], "a_1": [717, 1303, 1333, 1357], "a_2": [1333, 1357], "a_3": [1333, 1357], "a_a": 822, "a_agg_list": [239, 349, 882, 958], "a_b_doubl": 787, "a_btm_by_a": [419, 842], "a_btm_by_b": [419, 842], "a_by_ca": [419, 748, 842], "a_by_cb": [419, 748, 842], "a_div_2": 1379, "a_div_5": 1379, "a_interpol": [525, 842], "a_is_even": [296, 349, 821, 917, 958], "a_isnul": [536, 842], "a_lag_": 770, "a_log2": 1379, "a_mod_2": 1379, "a_not_nul": [535, 842], "a_revers": [614, 618, 647, 842], "a_rol": 770, "a_suffix": 619, "a_times_2": [589, 842], "a_times_b": [588, 842], "a_top_by_a": [748, 842], "a_top_by_b": [748, 842], "a_txt": 822, "aa": [499, 688, 700, 788, 842, 964, 1054, 1274, 1286, 1357, 1380], "aaa": [1, 41, 349, 688, 700, 736, 738, 739, 964, 1274, 1286], "aaaa": [1012, 1013], "aabcdef": 722, "aad": [1012, 1013], "aag": 27, "aazz": 1380, "ab": [241, 257, 300, 323, 349, 712, 736, 738, 739, 842, 928, 958, 964, 1138, 1163, 1329, 1357, 1378, 1380], "ab12": 712, "ab12cd34ef": 712, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 358, 694, 697, 711, 721, 842, 964, 1280, 1283, 1297, 1298, 1380], "abc123": 1380, "abc456": [711, 1297, 1298, 1380], "abcabc": 712, "abcd": 1380, "abcdeff": 721, "abf": [152, 163, 164], "abl": [104, 150, 580], "about": [52, 53, 54, 104, 143, 145, 150, 681, 688, 696, 697, 700, 711, 712, 842, 1268, 1274, 1282, 1283, 1286, 1297, 1298, 1357, 1388], "abov": [41, 254, 273, 349, 352, 887, 958], "abs_a": 1379, "absolut": [145, 152, 163, 164, 171, 172, 173, 174, 357, 495, 497, 498, 842, 969, 1115, 1117, 1118, 1357, 1379], "acc": [776, 777, 790, 816], "accent": 964, "accept": [38, 43, 47, 48, 49, 50, 51, 54, 143, 145, 146, 148, 149, 152, 154, 156, 158, 160, 162, 165, 166, 167, 178, 192, 209, 219, 238, 287, 288, 292, 295, 312, 323, 324, 328, 349, 358, 419, 428, 499, 526, 630, 644, 645, 684, 713, 740, 748, 756, 758, 760, 765, 768, 769, 770, 771, 779, 788, 806, 808, 811, 820, 824, 826, 832, 838, 842, 858, 870, 881, 909, 910, 913, 916, 921, 928, 929, 934, 958, 963, 1041, 1144, 1228, 1236, 1237, 1261, 1299, 1357], "access": [38, 43, 47, 48, 49, 50, 51, 57, 58, 59, 60, 154, 158, 160, 162, 164, 165, 166, 167, 192, 206, 213, 251, 282, 283, 296, 349, 698, 736, 865, 917, 930, 958, 963, 1284, 1388], "accord": [282, 349, 637, 781, 782, 784, 785, 829, 830, 842, 1073, 1230, 1357], "accordingli": [143, 146, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161], "account": [41, 137, 151, 164, 349, 469, 495, 497, 498, 842, 1086, 1115, 1117, 1118, 1357], "accumul": [776, 777, 790, 816], "acg": 27, "achiev": [258, 273, 335, 349, 424, 589, 707, 842, 1033, 1209, 1293, 1357], "aco": 1378, "acosd": 1378, "across": [41, 56, 151, 153, 218, 240, 253, 260, 262, 267, 289, 299, 349, 441, 518, 603, 758, 760, 776, 777, 779, 806, 808, 811, 826, 842, 869, 886, 911, 958, 1137, 1357], "action": [40, 349], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 552, 697, 1173, 1283], "actual": [41, 133, 178, 182, 284, 349, 1263, 1357, 1380, 1387], "ad": [39, 41, 133, 153, 239, 296, 306, 311, 313, 318, 323, 324, 349, 364, 479, 502, 596, 597, 740, 776, 777, 821, 842, 882, 917, 925, 928, 929, 958, 964, 1096, 1122, 1336, 1341, 1357], "adbc": [39, 150, 151, 349], "adbc_driver_manag": 170, "adbc_ingest": [39, 349], "add": [40, 41, 42, 149, 227, 239, 258, 323, 324, 325, 326, 349, 352, 439, 616, 617, 618, 619, 637, 740, 786, 790, 832, 842, 882, 886, 928, 929, 930, 931, 932, 958, 1121, 1357, 1362], "add_calendar_dai": 786, "add_calendar_month": 786, "add_calendar_year": 786, "add_chart": [41, 349], "add_dai": 786, "add_format": [41, 349], "add_hour": 786, "add_milli": 786, "add_second": 786, "add_seri": [41, 349], "add_week": 786, "add_worksheet": [41, 349], "addit": [30, 37, 39, 40, 41, 133, 147, 152, 153, 163, 164, 176, 178, 180, 182, 192, 222, 226, 238, 256, 271, 287, 288, 295, 308, 315, 323, 324, 328, 349, 358, 455, 499, 502, 630, 684, 688, 696, 697, 700, 711, 712, 736, 740, 765, 768, 769, 770, 771, 788, 820, 821, 824, 838, 842, 875, 881, 909, 910, 916, 923, 928, 929, 934, 958, 964, 1060, 1068, 1122, 1274, 1282, 1283, 1286, 1297, 1298, 1339, 1357, 1367, 1385], "addition": [64, 153, 282, 349, 964], "address": 697, "adjac": [41, 349], "adjust": [495, 497, 498, 681, 842, 1115, 1117, 1118, 1268, 1357], "adl": [152, 163, 164], "adlf": 164, "advanc": [41, 273, 349, 398, 580, 613, 616, 618, 620, 621, 1007, 1201, 1388], "advantag": [41, 202, 272, 349], "advis": [41, 55, 97, 349], "aedt": 783, "aeiuo": [700, 1286], "af1": 56, "af2": 56, "af3": 56, "affect": [39, 171, 172, 173, 174, 349], "afm": 164, "afoo": [930, 958], "after": [41, 133, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 209, 210, 227, 312, 315, 349, 418, 419, 420, 499, 630, 640, 735, 747, 748, 842, 858, 921, 923, 958, 1027, 1121, 1232, 1321, 1342, 1357, 1372], "afterward": [55, 832], "ag": [265, 349, 897, 958, 1386], "again": [589, 842], "against": [39, 106, 148, 150, 230, 277, 296, 349, 552, 700, 821, 878, 904, 917, 958, 1173, 1286, 1366, 1385, 1387, 1388], "agg": [238, 239, 273, 281, 349, 359, 409, 414, 417, 419, 505, 507, 512, 515, 588, 589, 630, 683, 684, 748, 755, 781, 784, 804, 842, 863, 864, 874, 881, 882, 901, 903, 907, 914, 958, 964], "agg_group": [793, 842], "agg_list": [588, 842], "aggreg": [145, 148, 149, 152, 160, 163, 232, 238, 239, 259, 261, 263, 266, 269, 273, 274, 275, 281, 297, 298, 317, 320, 328, 329, 331, 333, 349, 359, 409, 414, 417, 505, 521, 588, 589, 630, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 757, 758, 759, 760, 776, 777, 778, 779, 790, 795, 805, 806, 808, 810, 811, 816, 825, 826, 842, 882, 892, 893, 894, 895, 898, 899, 902, 907, 918, 919, 926, 934, 935, 937, 939, 958, 1018, 1023, 1026, 1140, 1243, 1244, 1245, 1247, 1250, 1251, 1252, 1357, 1373, 1375, 1378, 1384], "aggregate_funct": [273, 349, 964], "aho": [689, 699, 701, 713, 1275, 1285, 1287, 1299], "aiosqlit": 150, "alchemy_conn": 150, "algorithm": [208, 349, 365, 689, 699, 701, 713, 761, 842, 857, 958, 974, 1275, 1285, 1287, 1299, 1357], "alia": [1, 13, 56, 58, 60, 64, 94, 195, 199, 213, 239, 257, 273, 281, 315, 323, 326, 349, 352, 358, 362, 401, 402, 403, 404, 405, 408, 418, 421, 423, 424, 425, 433, 434, 435, 436, 437, 439, 442, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 493, 494, 507, 509, 510, 514, 516, 522, 523, 526, 529, 532, 540, 542, 564, 576, 582, 587, 589, 593, 596, 597, 599, 601, 606, 609, 611, 613, 624, 625, 629, 631, 635, 637, 640, 642, 671, 673, 688, 689, 690, 691, 693, 694, 696, 697, 699, 700, 701, 702, 706, 707, 713, 714, 715, 716, 717, 718, 719, 723, 724, 726, 736, 737, 738, 739, 741, 746, 747, 749, 755, 756, 762, 763, 764, 768, 769, 770, 771, 781, 784, 786, 787, 790, 791, 796, 799, 800, 803, 804, 816, 820, 824, 829, 832, 842, 882, 884, 891, 907, 923, 928, 932, 958, 1010, 1053, 1060, 1061, 1064, 1067, 1068, 1069, 1070, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1129, 1163, 1230, 1235, 1282, 1283, 1287, 1298, 1303, 1304, 1357], "alias": [296, 349, 596, 597, 917, 958], "alic": [148, 1386], "align": [11, 16, 17, 41, 56, 64, 349, 1386], "align_fram": 64, "align_ful": 64, "align_inn": 64, "align_left": 64, "align_right": 64, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 48, 49, 50, 51, 56, 62, 69, 115, 117, 130, 131, 135, 144, 148, 149, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 175, 176, 179, 182, 202, 207, 208, 210, 217, 219, 221, 222, 229, 241, 246, 248, 250, 251, 252, 253, 255, 256, 257, 262, 264, 268, 269, 273, 276, 278, 282, 283, 284, 288, 294, 295, 299, 300, 304, 306, 307, 311, 314, 316, 317, 318, 319, 324, 326, 349, 352, 362, 364, 386, 419, 432, 438, 444, 445, 446, 447, 458, 479, 499, 504, 517, 518, 521, 524, 528, 531, 535, 536, 541, 551, 552, 559, 577, 580, 588, 610, 613, 614, 616, 617, 618, 619, 620, 621, 628, 630, 640, 645, 647, 652, 676, 682, 684, 690, 694, 697, 698, 702, 705, 708, 712, 720, 721, 722, 726, 748, 758, 767, 769, 776, 777, 778, 779, 788, 790, 795, 796, 799, 808, 816, 824, 825, 826, 832, 838, 842, 848, 854, 857, 860, 863, 864, 868, 870, 871, 872, 874, 877, 886, 888, 892, 896, 901, 905, 910, 914, 915, 916, 922, 924, 925, 929, 930, 932, 958, 964, 995, 1052, 1054, 1057, 1058, 1059, 1060, 1071, 1096, 1138, 1145, 1157, 1163, 1172, 1173, 1180, 1198, 1201, 1232, 1237, 1243, 1269, 1276, 1280, 1283, 1284, 1287, 1288, 1291, 1298, 1306, 1307, 1308, 1312, 1329, 1338, 1357, 1361, 1362, 1367, 1369, 1374, 1375, 1380, 1384, 1385, 1387, 1388], "all_compat": 1369, "all_data": 1385, "all_horizont": [221, 222, 349, 757, 832, 871, 872, 958], "all_stat": 31, "alloc": [145, 148, 149, 225, 276, 349, 842, 933, 1114, 1357], "allow": [1, 8, 40, 41, 48, 49, 50, 51, 55, 64, 97, 106, 131, 150, 153, 162, 164, 165, 166, 167, 168, 175, 178, 179, 182, 202, 206, 251, 254, 256, 282, 283, 285, 307, 308, 311, 314, 327, 349, 421, 425, 469, 476, 479, 568, 588, 589, 596, 597, 642, 672, 725, 727, 728, 842, 886, 887, 892, 896, 903, 922, 930, 958, 962, 964, 1086, 1093, 1096, 1189, 1209, 1234, 1255, 1311, 1313, 1314, 1338, 1339, 1357, 1380, 1388], "allow_alias": [596, 597], "allow_chunk": [178, 182], "allow_copi": [131, 206, 307, 349, 1338, 1357], "allow_dupl": [637, 842, 1230, 1357], "allow_exact_match": [254, 349, 887, 958], "allow_infin": [178, 182], "allow_masked_out": [178, 182], "allow_missing_column": [160, 167], "allow_nul": [175, 178, 182, 1388], "allow_object": 802, "allow_parallel": [254, 349, 886, 887, 958], "allow_pyarrow_filt": 168, "allow_time_zon": [178, 179, 182], "allowed_dtyp": [178, 179, 182, 1388], "almost": [63, 258, 335, 349, 725, 727, 728, 864, 958, 962, 1209, 1311, 1313, 1314, 1357], "along": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 958], "alpha": [495, 497, 498, 842, 964, 1115, 1117, 1118, 1357], "alpha_i": [496, 842, 1116, 1357], "alphabet": [964, 1388], "alphanumer": [733, 964, 1319], "alreadi": [39, 40, 105, 306, 349, 438, 552, 604, 753, 842, 914, 958, 1052, 1173, 1346, 1357], "also": [28, 38, 41, 48, 49, 50, 51, 55, 62, 63, 133, 150, 153, 154, 159, 160, 162, 167, 177, 178, 181, 182, 187, 196, 202, 223, 238, 239, 265, 269, 273, 281, 283, 287, 295, 306, 318, 323, 326, 349, 434, 437, 446, 458, 469, 473, 479, 505, 526, 589, 596, 597, 630, 640, 644, 645, 684, 711, 712, 713, 720, 721, 736, 767, 776, 777, 780, 783, 790, 792, 816, 832, 841, 842, 848, 863, 864, 874, 881, 882, 897, 901, 907, 909, 914, 916, 925, 928, 930, 932, 958, 964, 1059, 1071, 1090, 1144, 1232, 1236, 1237, 1276, 1297, 1298, 1299, 1306, 1357, 1361, 1367, 1369, 1372, 1376, 1380, 1383, 1385, 1386], "alt": [349, 352, 1357, 1362], "altair": [170, 349, 352, 1357, 1362], "altern": [41, 187, 349, 838, 1377], "although": [296, 349, 917, 958], "alwai": [14, 38, 40, 48, 54, 72, 78, 148, 154, 158, 160, 209, 238, 253, 254, 258, 312, 335, 349, 418, 419, 588, 600, 725, 747, 748, 832, 842, 858, 886, 887, 892, 921, 958, 964, 1027, 1209, 1311, 1342, 1357, 1366, 1367, 1385, 1388], "am": [714, 1300], "amarillo": 1380, "amaz": [349, 352, 1357, 1362], "amazonaw": 33, "ambigu": [472, 473, 474, 487, 725, 728, 783, 1089, 1090, 1091, 1104, 1311, 1314], "america": 784, "amount": [52, 55, 73, 97, 158, 162, 165, 166, 589, 786, 842, 1374], "amsterdam": [473, 1090], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 57, 59, 60, 64, 72, 73, 74, 95, 102, 106, 109, 112, 119, 121, 130, 132, 133, 136, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 165, 166, 167, 176, 178, 182, 192, 211, 212, 213, 219, 225, 228, 232, 234, 239, 250, 251, 252, 254, 255, 258, 269, 273, 278, 279, 281, 282, 286, 296, 301, 307, 311, 313, 317, 318, 323, 326, 335, 349, 352, 360, 382, 385, 397, 401, 403, 409, 412, 414, 415, 417, 434, 435, 436, 437, 438, 439, 446, 450, 451, 469, 473, 476, 490, 496, 504, 505, 510, 511, 512, 515, 549, 552, 555, 557, 579, 580, 588, 589, 601, 603, 613, 614, 635, 636, 637, 645, 646, 650, 652, 653, 655, 657, 659, 661, 664, 666, 668, 687, 688, 691, 697, 700, 704, 725, 727, 728, 730, 732, 746, 749, 757, 762, 766, 768, 772, 774, 781, 782, 784, 785, 787, 789, 792, 796, 797, 798, 799, 800, 801, 802, 814, 816, 817, 820, 824, 829, 830, 832, 833, 838, 842, 860, 861, 862, 864, 868, 870, 874, 878, 882, 887, 888, 892, 905, 907, 908, 917, 925, 928, 930, 932, 933, 941, 955, 958, 962, 963, 964, 991, 994, 1006, 1010, 1012, 1018, 1021, 1023, 1024, 1026, 1040, 1042, 1048, 1049, 1050, 1051, 1052, 1059, 1063, 1093, 1107, 1114, 1116, 1129, 1158, 1170, 1173, 1176, 1178, 1200, 1209, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1256, 1258, 1273, 1274, 1277, 1283, 1286, 1290, 1311, 1313, 1314, 1316, 1318, 1338, 1340, 1357, 1375, 1377, 1380, 1384, 1385, 1387], "ana": [714, 1300], "anan": [714, 1300], "ananab": 1380, "and_": 842, "ang": 1380, "angl": [763, 764], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 71, 72, 78, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 202, 204, 207, 209, 215, 219, 221, 222, 227, 229, 230, 232, 234, 249, 251, 252, 253, 254, 255, 258, 262, 272, 277, 278, 282, 283, 284, 296, 299, 302, 303, 306, 307, 308, 311, 312, 314, 317, 318, 326, 349, 352, 353, 358, 361, 362, 386, 418, 419, 420, 438, 439, 446, 458, 475, 493, 494, 504, 505, 509, 512, 514, 516, 520, 530, 540, 547, 552, 559, 569, 570, 571, 572, 587, 588, 589, 596, 606, 609, 611, 613, 614, 616, 618, 620, 621, 624, 625, 629, 634, 637, 644, 645, 646, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 673, 677, 687, 689, 703, 721, 722, 723, 724, 725, 727, 728, 730, 732, 741, 747, 748, 749, 756, 757, 758, 760, 767, 769, 771, 772, 773, 800, 801, 802, 804, 808, 826, 832, 842, 858, 863, 864, 870, 871, 872, 877, 878, 886, 887, 888, 900, 901, 904, 905, 917, 921, 922, 925, 932, 933, 958, 962, 964, 966, 968, 971, 995, 1027, 1036, 1052, 1053, 1059, 1071, 1092, 1111, 1112, 1121, 1124, 1130, 1132, 1134, 1139, 1149, 1158, 1161, 1168, 1173, 1180, 1190, 1191, 1192, 1193, 1208, 1209, 1220, 1221, 1230, 1236, 1237, 1238, 1242, 1243, 1246, 1248, 1249, 1256, 1257, 1273, 1275, 1289, 1311, 1313, 1314, 1316, 1318, 1336, 1337, 1338, 1339, 1341, 1342, 1357, 1362, 1385, 1388], "anna": [265, 349, 897, 958], "annex": [708, 1294], "announc": [903, 958], "anoth": [99, 177, 210, 218, 224, 238, 254, 289, 349, 438, 441, 448, 525, 555, 593, 599, 603, 644, 654, 656, 658, 660, 662, 665, 667, 669, 700, 842, 860, 869, 881, 887, 911, 930, 958, 1052, 1061, 1113, 1121, 1143, 1176, 1236, 1237, 1286, 1357, 1379, 1380], "anti": [253, 349, 886, 941, 958, 1256, 1258, 1357, 1373], "antipattern": [148, 154, 158, 160], "any_horizont": [759, 832], "anyth": [40, 282, 349], "anywher": [405, 408, 725, 727, 728, 1311, 1313, 1314], "ap": 1380, "apach": [36, 43, 44, 47, 131, 146, 150, 151, 154, 156, 164, 205, 349, 967], "apaya": [726, 1312], "api": [0, 33, 38, 43, 47, 48, 49, 50, 51, 131, 158, 160, 162, 165, 166, 167, 168, 187, 192, 206, 258, 335, 349, 589, 804, 842, 941, 958, 1209, 1357, 1384], "apia": [447, 1060], "app": [425, 719, 1034, 1305], "appear": [41, 68, 133, 173, 174, 349, 712, 751, 842, 964, 1344, 1357, 1386], "append": [39, 40, 42, 178, 227, 253, 254, 255, 349, 641, 832, 842, 886, 887, 888, 958, 1121, 1357], "appl": [214, 243, 253, 278, 279, 302, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 342, 349, 419, 421, 425, 647, 693, 719, 748, 842, 886, 905, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 958, 1029, 1034, 1279, 1305, 1373, 1380], "appli": [11, 21, 38, 41, 48, 62, 64, 129, 143, 150, 162, 175, 178, 182, 202, 217, 232, 255, 258, 272, 295, 296, 306, 335, 349, 374, 449, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 468, 470, 471, 475, 477, 488, 489, 491, 497, 498, 588, 589, 634, 653, 654, 655, 656, 659, 660, 666, 667, 684, 711, 712, 725, 727, 728, 732, 765, 776, 777, 790, 803, 804, 816, 821, 832, 842, 868, 888, 892, 900, 916, 917, 941, 958, 1041, 1062, 1065, 1066, 1067, 1070, 1072, 1073, 1077, 1078, 1079, 1081, 1082, 1085, 1087, 1088, 1092, 1094, 1105, 1106, 1108, 1117, 1118, 1209, 1244, 1245, 1247, 1251, 1297, 1298, 1311, 1313, 1314, 1318, 1357, 1366], "applic": [54, 307, 349, 589, 842], "apply_on_context_ent": 202, "appropri": [41, 168, 230, 277, 307, 349, 479, 640, 842, 878, 904, 958, 1096, 1232, 1357], "approx": [365, 842], "approx_n_uniqu": [349, 842, 958, 1357], "approxim": [47, 208, 349, 365, 496, 761, 842, 857, 958, 974, 1116, 1357, 1379, 1388], "april": [476, 1093, 1380, 1381], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 95, 96, 97, 104, 110, 126, 130, 131, 132, 133, 134, 135, 136, 137, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 178, 179, 180, 182, 192, 202, 206, 209, 210, 215, 217, 221, 222, 225, 228, 230, 231, 232, 237, 238, 239, 251, 253, 254, 255, 256, 258, 264, 265, 271, 273, 277, 281, 282, 283, 284, 287, 288, 292, 295, 302, 306, 307, 308, 311, 312, 316, 318, 319, 323, 324, 327, 328, 349, 361, 363, 377, 393, 398, 418, 419, 420, 428, 434, 436, 437, 446, 474, 479, 487, 492, 494, 495, 496, 497, 498, 503, 505, 520, 526, 528, 530, 531, 533, 534, 535, 536, 538, 543, 573, 580, 588, 625, 630, 637, 640, 643, 644, 645, 646, 650, 651, 654, 656, 658, 660, 662, 663, 665, 667, 669, 675, 678, 681, 683, 684, 689, 698, 702, 704, 705, 709, 710, 711, 712, 713, 715, 726, 728, 730, 735, 740, 742, 746, 747, 748, 757, 758, 760, 765, 768, 769, 770, 771, 772, 779, 781, 782, 784, 785, 800, 801, 806, 808, 811, 820, 824, 826, 829, 830, 832, 834, 835, 837, 841, 842, 843, 844, 847, 848, 849, 850, 851, 854, 858, 863, 864, 868, 871, 872, 876, 878, 881, 882, 886, 887, 888, 892, 896, 897, 901, 903, 904, 905, 907, 909, 910, 913, 914, 916, 921, 924, 925, 928, 929, 930, 934, 958, 962, 964, 971, 972, 986, 1002, 1007, 1027, 1031, 1041, 1050, 1051, 1059, 1091, 1096, 1104, 1110, 1112, 1114, 1115, 1116, 1117, 1118, 1123, 1125, 1127, 1139, 1144, 1147, 1149, 1150, 1152, 1153, 1154, 1155, 1159, 1164, 1194, 1201, 1221, 1230, 1232, 1236, 1237, 1238, 1242, 1249, 1261, 1265, 1268, 1275, 1284, 1288, 1290, 1295, 1296, 1297, 1298, 1301, 1312, 1314, 1316, 1321, 1328, 1336, 1338, 1339, 1340, 1342, 1349, 1351, 1353, 1357, 1358, 1361, 1363, 1364, 1365, 1367, 1369, 1372, 1377, 1385, 1388], "arbitrari": [52, 85, 234, 349, 441, 842, 869, 958, 964], "arbitrarili": [258, 349], "arcco": [842, 1357], "arccosh": [842, 1357], "arcsin": [842, 1357], "arcsinh": [842, 1357], "arctan": [763, 764, 842, 1357], "arctan2": 764, "arctanh": [842, 1357], "aren": [38, 48, 349, 958], "arg": [32, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 145, 195, 199, 230, 272, 277, 349, 374, 634, 765, 791, 842, 878, 900, 904, 958, 1209, 1357, 1370], "arg_max": [842, 1357], "arg_min": [842, 1357], "arg_sort": [842, 1357], "arg_tru": [766, 842, 1357], "arg_uniqu": [842, 1357], "arg_wher": [375, 842], "argmax": [588, 842], "argument": [37, 40, 47, 95, 143, 145, 147, 148, 152, 160, 162, 163, 178, 180, 182, 192, 215, 219, 226, 238, 239, 254, 271, 272, 281, 287, 288, 295, 308, 315, 319, 323, 324, 328, 349, 474, 487, 499, 505, 526, 588, 630, 634, 650, 684, 720, 721, 722, 740, 757, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 788, 820, 824, 832, 838, 842, 870, 875, 881, 882, 887, 900, 907, 909, 910, 916, 923, 928, 929, 934, 955, 958, 964, 1091, 1104, 1144, 1306, 1307, 1308, 1339, 1357, 1379, 1380], "aris": 150, "arithmet": [232, 349], "arm": 170, "arm64": 170, "around": [38, 48, 349, 958], "arr": [307, 349, 834, 1338, 1349, 1357, 1380], "arr_bar": 1375, "arr_foo": 1375, "arrai": [130, 134, 148, 149, 152, 160, 163, 204, 225, 226, 301, 306, 307, 308, 349, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 434, 435, 436, 437, 547, 562, 563, 564, 565, 567, 576, 577, 579, 582, 584, 588, 646, 653, 655, 657, 659, 661, 664, 666, 668, 674, 746, 769, 787, 801, 821, 842, 875, 958, 963, 966, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1048, 1049, 1050, 1051, 1056, 1114, 1168, 1183, 1184, 1185, 1186, 1188, 1196, 1197, 1198, 1200, 1203, 1205, 1206, 1238, 1244, 1245, 1247, 1250, 1251, 1252, 1259, 1263, 1332, 1336, 1338, 1339, 1340, 1357, 1378, 1380, 1384, 1387], "array_agg": 1378, "array_contain": 1378, "array_get": 1378, "array_length": 1378, "array_low": 1378, "array_mean": 1378, "array_revers": 1378, "array_sum": 1378, "array_to_str": 1378, "array_uniqu": 1378, "array_upp": 1378, "arraylik": [1056, 1357], "arrow": [43, 44, 49, 130, 131, 150, 151, 154, 156, 165, 205, 251, 283, 284, 301, 303, 307, 349, 958, 967, 1332, 1338, 1357], "arrowarrayexport": [130, 131], "arrowinvaliderror": [40, 349], "arrowstreamexport": [130, 131], "as_": [1357, 1362], "as_arrai": 801, "as_dict": [149, 271, 349], "as_expr": 964, "as_seri": [210, 302, 349, 860, 958, 964], "asarrai": [204, 966], "ascend": [239, 265, 281, 349, 630, 650, 842, 882, 897, 907, 958], "ascii": [7, 21, 423, 424, 689, 699, 701, 702, 706, 707, 713, 715, 726, 735, 964, 1032, 1033, 1275, 1285, 1287, 1288, 1292, 1293, 1299, 1301, 1312, 1321], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [689, 699, 701, 713, 1275, 1285, 1287, 1299], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1388, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 964, "ascii_t": 202, "ascii_uppercas": [317, 349], "asd": [690, 697, 1276, 1283], "asia": [137, 964, 1065, 1066, 1094], "asid": 479, "asin": 1378, "asind": 1378, "asof": [254, 349, 887, 958], "asofjoinstrategi": [254, 349, 887, 958], "assert": [171, 172, 173, 174, 178, 182, 281, 349, 854, 964], "assert_frame_equ": [172, 173, 224, 349, 1388], "assert_frame_not_equ": [171, 174], "assert_series_equ": [171, 174, 1113, 1357, 1388], "assert_series_not_equ": [172, 173], "assert_someth": 176, "assertionerror": [171, 172, 173, 174], "assign": [176, 239, 334, 349, 398, 580, 630, 640, 717, 718, 842, 882, 940, 958, 1007, 1201, 1232, 1303, 1304, 1357], "associ": [39, 41, 56, 151, 153, 177, 180, 284, 349, 963, 1368, 1370, 1374], "assum": [33, 284, 349, 892, 941, 958, 1380], "assume_rol": 33, "assumpt": [588, 842], "async": [62, 63, 150, 864, 958], "async_engin": 150, "asynchron": [63, 150, 864, 958], "asyncio": [63, 150, 864, 958], "asyncresult": [63, 864, 958], "asyncsurrealdb": 150, "ata": 27, "atan": 1378, "atan2": [763, 764, 1378], "atan2_ab": 1382, "atan2d": [764, 1378], "atan2d_ab": 1382, "atand": 1378, "atg": 27, "atgataaaggag": 27, "atol": [171, 172, 173, 174], "attain": [684, 842], "attempt": [1, 10, 48, 49, 50, 51, 62, 63, 441, 842, 863, 864, 869, 874, 901, 914, 958], "attr": [349, 352, 1357, 1362], "attribut": [65, 68, 71, 72, 73, 74, 75, 83, 87, 140, 141, 142, 175, 193, 194, 196, 197, 349, 352, 834, 835, 837, 838, 843, 844, 847, 849, 850, 851, 933, 958, 1349, 1351, 1353, 1357, 1358, 1362, 1363, 1364, 1365], "attributeerror": 1, "audi": [302, 349, 647, 842], "august": 479, "australia": 783, "auth": 35, "authent": [40, 152, 160, 162, 163, 164, 165, 167, 187, 349], "author": 1, "auto": [10, 38, 40, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 132, 133, 134, 136, 152, 157, 158, 160, 162, 163, 165, 166, 167, 187, 192, 313, 349, 863, 864, 874, 901, 914, 958, 1388], "auto_structifi": [287, 323, 349, 909, 928, 958], "autofilt": [41, 349], "autofit": [41, 349], "autogener": [148, 149, 153, 159, 162], "automat": [8, 38, 48, 64, 130, 132, 133, 134, 136, 137, 145, 148, 149, 150, 151, 157, 158, 160, 162, 164, 165, 166, 178, 182, 184, 187, 287, 296, 323, 349, 588, 645, 720, 721, 722, 821, 842, 909, 917, 928, 958, 1236, 1237, 1306, 1307, 1308, 1341, 1357, 1367, 1369, 1372, 1385], "autumn": [711, 712], "avail": [41, 47, 51, 139, 150, 151, 152, 163, 164, 176, 189, 190, 191, 202, 273, 296, 348, 349, 479, 640, 821, 834, 835, 837, 841, 842, 843, 844, 847, 848, 849, 850, 851, 854, 917, 956, 957, 958, 964, 1054, 1232, 1349, 1351, 1353, 1357, 1358, 1361, 1363, 1364, 1365, 1376], "available_timezon": [71, 964], "averag": [41, 349, 495, 496, 497, 498, 640, 842, 1115, 1116, 1117, 1118, 1232, 1357, 1374], "avg": 1378, "avocado": 1380, "avoid": [178, 182, 230, 277, 283, 349, 360, 842, 878, 904, 958], "avro": [36, 146, 195, 349, 854], "avrocompress": [36, 349], "aw": [33, 38, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 958], "awai": 1379, "await": [63, 150, 864, 952, 958], "await_result": [903, 958], "awar": [11, 150, 251, 283, 284, 303, 349, 496, 689, 699, 701, 713, 728, 842, 958, 1116, 1275, 1285, 1287, 1299, 1314, 1357], "aws_access_key_id": [40, 152, 163, 167, 349], "aws_region": [40, 163, 167, 349], "aws_secret_access_kei": [40, 152, 163, 167, 349], "awsassumerolekwarg": 33, "axi": [264, 316, 349, 352, 763, 764, 896, 924, 958, 1357, 1362], "aya": [715, 1301, 1312], "az": [152, 163, 164], "azur": [34, 38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 164, 165, 166, 167, 192, 349, 958], "azure_storage_account_kei": [152, 163, 164], "azure_storage_account_nam": [152, 163, 164], "b": [1, 11, 36, 38, 40, 43, 44, 47, 52, 59, 64, 87, 95, 101, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 150, 153, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 251, 252, 253, 256, 257, 259, 261, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 358, 360, 361, 363, 364, 374, 376, 381, 386, 402, 403, 404, 405, 406, 407, 408, 409, 414, 417, 419, 420, 432, 439, 443, 476, 479, 499, 501, 503, 504, 505, 507, 517, 518, 521, 524, 525, 526, 528, 531, 533, 534, 535, 536, 541, 547, 552, 559, 569, 570, 571, 572, 588, 589, 594, 610, 613, 614, 615, 616, 617, 618, 619, 627, 628, 630, 634, 637, 640, 644, 645, 647, 649, 676, 682, 684, 691, 695, 700, 704, 711, 712, 736, 737, 748, 751, 755, 757, 758, 759, 760, 761, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 787, 788, 789, 790, 791, 794, 795, 796, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 818, 819, 821, 823, 824, 825, 826, 827, 831, 838, 842, 857, 858, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 958, 964, 970, 973, 995, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1031, 1035, 1036, 1053, 1056, 1093, 1096, 1110, 1113, 1114, 1121, 1124, 1144, 1149, 1168, 1190, 1191, 1192, 1193, 1230, 1235, 1277, 1281, 1286, 1290, 1297, 1298, 1322, 1324, 1325, 1327, 1339, 1344, 1357, 1367, 1369, 1370, 1372, 1373, 1374, 1375, 1380, 1381, 1382, 1385], "b1": [57, 59], "b2": [57, 59], "b345": [41, 349], "b4": [41, 349], "b_b": [296, 349], "b_btm_by_a": [419, 842], "b_btm_by_b": [419, 842], "b_by_ca": [419, 748, 842], "b_by_cb": [419, 748, 842], "b_is_not_nan": [534, 842], "b_isnan": [533, 842], "b_isnul": [536, 842], "b_not_nul": [535, 842], "b_revers": [614, 618, 647, 842], "b_suffix": 619, "b_sum": [328, 934], "b_top_by_a": [748, 842], "b_top_by_b": [748, 842], "ba": [441, 499, 603, 719, 788, 842, 964], "back": [4, 56, 167, 227, 239, 289, 307, 308, 349, 603, 630, 712, 842, 863, 874, 882, 901, 911, 914, 933, 958, 1121, 1339, 1357], "backend": [40, 150, 151, 152, 163, 164, 349, 352, 1357, 1362], "background": [62, 63, 349, 353, 863, 864, 957, 958], "backward": [47, 51, 229, 254, 349, 401, 446, 467, 504, 842, 877, 887, 958, 1010, 1059, 1084, 1124, 1357], "backward_fil": [504, 510, 842, 1124, 1129, 1357], "bad": [711, 712, 1297, 1298], "balanc": [181, 183, 1388], "ballon_dor": [696, 698, 1282, 1284], "banana": [214, 302, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 419, 647, 693, 719, 748, 842, 937, 939, 942, 943, 944, 945, 946, 947, 948, 1380], "banded_column": [41, 349], "banded_row": [41, 349], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 144, 157, 158, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 230, 232, 234, 235, 236, 241, 243, 244, 245, 247, 253, 257, 258, 259, 260, 261, 262, 263, 266, 267, 270, 273, 275, 277, 278, 279, 282, 285, 286, 287, 289, 294, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 314, 315, 320, 321, 322, 327, 349, 352, 422, 441, 523, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 681, 690, 692, 695, 697, 698, 714, 716, 718, 723, 724, 761, 772, 773, 774, 789, 794, 795, 798, 799, 805, 807, 809, 810, 812, 813, 820, 823, 827, 831, 832, 838, 842, 860, 865, 866, 870, 871, 872, 873, 878, 884, 885, 886, 899, 904, 905, 908, 909, 922, 923, 927, 958, 963, 964, 1030, 1180, 1268, 1276, 1278, 1281, 1283, 1284, 1300, 1304, 1309, 1310, 1357, 1371, 1373, 1374, 1375, 1377, 1380, 1383], "bar2": 1380, "bar22": [232, 349], "bar_": 716, "bar_3": [304, 349], "bar_4": [304, 349], "bar_a": [273, 349], "bar_at_2": 1375, "bar_avg": 1374, "bar_b": [273, 349], "bar_color": [41, 349], "bar_max": 1374, "bar_median": 1374, "bar_min": 1374, "bar_negative_border_color_sam": [41, 349], "bar_negative_color_sam": [41, 349], "bar_std": 1374, "bar_sum": 1374, "bar_var": 1374, "bare": [596, 597, 964], "base": [32, 41, 52, 53, 54, 69, 115, 117, 153, 180, 222, 230, 239, 255, 277, 281, 349, 447, 455, 492, 495, 496, 497, 498, 505, 520, 525, 583, 584, 588, 589, 635, 637, 645, 650, 654, 656, 658, 660, 662, 665, 667, 669, 730, 790, 842, 878, 882, 888, 904, 907, 958, 964, 1060, 1068, 1110, 1115, 1116, 1117, 1118, 1139, 1143, 1204, 1205, 1209, 1228, 1230, 1236, 1237, 1316, 1348, 1357, 1373, 1379, 1388], "base64": [403, 404, 691, 692, 1012, 1013, 1277, 1278], "base_nam": [313, 349], "base_path": [52, 53, 54], "base_utc_offset": [455, 1068], "baseexcept": 1385, "basepartitioncontext": 53, "basi": [41, 153, 178, 349], "basic": [41, 204, 349, 595, 966, 1388], "basic_chart": [41, 349], "batch": [44, 95, 139, 143, 149, 150, 156, 158, 166, 168, 283, 311, 349, 863, 892, 958], "batch_siz": [38, 48, 143, 148, 149, 150, 158, 166, 168, 311, 349, 958], "batchedcsvread": 149, "baz": [234, 244, 245, 315, 349, 698, 716, 718, 789, 798, 813, 838, 885, 923, 958, 963, 964, 1284, 1304, 1371, 1377, 1380], "bb": [964, 1054, 1357, 1380, 1385], "bbb": [1, 41, 349, 736, 738, 739, 964], "bc": [700, 712, 825, 1286], "bcbc45": 1380, "bea": 13, "bear": 964, "bearer": 187, "bearer_token": 187, "beauti": 13, "becaus": [158, 166, 225, 239, 256, 258, 317, 335, 349, 509, 552, 580, 842, 882, 941, 958, 1114, 1173, 1209, 1357], "becom": [180, 348, 956, 957], "bed3": [41, 349], "been": [5, 31, 41, 185, 206, 330, 349, 511, 589, 607, 640, 842, 936, 1232, 1357], "beetl": [302, 349, 647, 842], "befor": [41, 48, 49, 50, 51, 52, 70, 71, 143, 145, 148, 150, 153, 162, 168, 171, 172, 173, 174, 184, 202, 227, 239, 254, 296, 306, 311, 315, 349, 412, 413, 415, 416, 436, 437, 438, 588, 630, 631, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 695, 735, 742, 770, 818, 819, 842, 882, 884, 887, 923, 958, 1021, 1022, 1024, 1025, 1050, 1051, 1052, 1121, 1225, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1281, 1321, 1328, 1357, 1373], "beforehand": [725, 727, 728, 1311, 1313, 1314], "begin": [13, 41, 245, 349, 495, 497, 498, 524, 525, 696, 726, 842, 885, 958, 1115, 1117, 1118, 1142, 1143, 1282, 1312, 1357], "behav": [230, 277, 349, 505, 589, 721, 722, 832, 842, 878, 904, 958], "behavior": [47, 51, 160, 167, 221, 222, 230, 253, 254, 349, 385, 511, 555, 557, 695, 789, 798, 842, 871, 872, 886, 887, 955, 958, 994, 1176, 1178, 1281], "behaviour": [11, 56, 221, 222, 230, 277, 296, 349, 688, 696, 697, 700, 711, 712, 749, 821, 842, 871, 872, 878, 904, 917, 958, 1274, 1282, 1283, 1286, 1297, 1298], "behind": 184, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 142, 143, 144, 148, 149, 150, 152, 153, 158, 159, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 210, 226, 255, 296, 304, 306, 311, 318, 349, 352, 353, 438, 439, 446, 458, 520, 589, 637, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 695, 767, 769, 787, 800, 801, 832, 842, 860, 863, 864, 875, 888, 917, 925, 958, 1036, 1052, 1053, 1059, 1071, 1139, 1230, 1242, 1243, 1246, 1248, 1249, 1281, 1333, 1336, 1341, 1357, 1362, 1388], "belong": [1, 239, 349, 882, 958], "below": [20, 40, 152, 153, 163, 164, 222, 230, 273, 277, 349, 479, 504, 702, 711, 712, 726, 781, 782, 784, 785, 829, 830, 832, 838, 842, 878, 904, 958, 1096, 1288, 1297, 1298, 1312], "best": [164, 258, 335, 349, 589, 842, 1209, 1357], "better": [258, 306, 307, 335, 349, 424, 589, 707, 842, 859, 941, 958, 1033, 1256, 1258, 1293, 1357], "between": [25, 64, 100, 175, 176, 178, 182, 207, 215, 253, 265, 275, 283, 341, 349, 386, 420, 442, 443, 479, 526, 550, 559, 569, 570, 571, 572, 631, 637, 638, 661, 662, 687, 703, 763, 764, 767, 772, 774, 801, 815, 818, 819, 842, 886, 897, 902, 947, 958, 995, 1028, 1035, 1055, 1056, 1096, 1144, 1171, 1180, 1190, 1191, 1192, 1193, 1225, 1230, 1231, 1248, 1273, 1289, 1357, 1374, 1382], "between_ab": [526, 842], "beyond": [52, 733, 1319], "bia": [497, 498, 538, 651, 663, 681, 842, 1117, 1118, 1159, 1242, 1249, 1268, 1357], "bias": [538, 681, 842, 1159, 1268, 1357], "big": [149, 406, 1015], "big_fil": 149, "bigidx": 138, "bigqueri": 151, "bigquery_format": 195, "bin": [439, 520, 637, 730, 756, 835, 842, 1053, 1139, 1230, 1316, 1351, 1357, 1362], "bin2int": 406, "bin_count": [520, 842, 1139, 1357], "bin_i": [756, 842], "bin_x": [756, 842], "bin_xor_xi": [756, 842], "binari": [41, 43, 144, 150, 218, 289, 349, 402, 403, 404, 405, 406, 407, 408, 441, 603, 691, 842, 869, 911, 958, 964, 1011, 1012, 1014, 1015, 1016, 1017, 1277, 1376], "binary_str": [756, 842], "bind": 153, "birthdai": 148, "bit": [70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 410, 411, 412, 413, 415, 416, 642, 688, 842, 1019, 1021, 1022, 1024, 1025, 1234, 1274, 1357, 1376, 1380], "bit_and": 1378, "bit_count": 1378, "bit_length": 1378, "bit_or": 1378, "bit_xor": 1378, "bitmap": [225, 349, 1114, 1357], "bitwis": [362, 409, 414, 417, 629, 756, 757, 758, 759, 760, 842, 1018, 1023, 1026, 1357, 1378, 1384], "bitwise_and": [842, 1357], "bitwise_count_on": [842, 1357], "bitwise_count_zero": [842, 1357], "bitwise_leading_on": [842, 1357], "bitwise_leading_zero": [842, 1357], "bitwise_or": [842, 1357], "bitwise_trailing_on": [842, 1357], "bitwise_trailing_zero": [842, 1357], "bitwise_xor": [842, 1357], "bla": [690, 697, 1276, 1283], "black": [258, 349, 402, 403, 404, 405, 408], "blindli": [552, 1173], "block": [21, 63, 238, 314, 349, 864, 881, 905, 922, 931, 932, 941, 958, 1256, 1258, 1357], "blue": [55, 96, 97, 402, 403, 404, 405, 408, 753, 842, 1346, 1357], "bob": [148, 265, 349, 897, 958, 1386], "bodi": [41, 349, 353], "bold": [41, 349], "bom": [38, 48, 349, 958], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 64, 95, 96, 129, 130, 131, 132, 133, 135, 136, 137, 143, 144, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 204, 206, 209, 210, 211, 212, 217, 219, 224, 229, 230, 231, 232, 236, 237, 238, 239, 243, 244, 246, 247, 248, 251, 253, 254, 262, 271, 273, 277, 278, 282, 283, 284, 285, 290, 293, 295, 296, 299, 302, 304, 307, 308, 312, 313, 314, 315, 318, 319, 321, 323, 331, 333, 336, 339, 349, 360, 361, 362, 363, 364, 374, 377, 378, 381, 385, 386, 394, 399, 402, 403, 405, 408, 419, 420, 421, 425, 433, 434, 435, 436, 437, 438, 439, 446, 458, 459, 475, 492, 493, 494, 495, 497, 498, 514, 516, 517, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 548, 552, 555, 557, 559, 568, 575, 580, 581, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 624, 625, 627, 629, 630, 632, 633, 637, 640, 642, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 672, 674, 676, 681, 683, 684, 687, 688, 689, 690, 691, 693, 699, 700, 701, 703, 711, 712, 713, 716, 717, 719, 725, 727, 728, 730, 732, 736, 738, 739, 748, 750, 753, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 771, 772, 774, 775, 776, 781, 782, 784, 785, 790, 796, 797, 800, 801, 802, 804, 808, 814, 817, 820, 821, 824, 826, 829, 830, 832, 833, 842, 858, 860, 861, 863, 864, 868, 870, 874, 877, 878, 881, 882, 886, 887, 892, 896, 901, 904, 905, 912, 914, 916, 917, 921, 922, 923, 924, 925, 928, 933, 937, 939, 942, 945, 958, 963, 964, 966, 971, 972, 983, 986, 987, 990, 994, 995, 1003, 1008, 1011, 1012, 1014, 1017, 1028, 1029, 1031, 1034, 1036, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1059, 1071, 1072, 1092, 1110, 1112, 1113, 1115, 1117, 1118, 1125, 1127, 1135, 1136, 1139, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1164, 1165, 1169, 1173, 1176, 1178, 1180, 1189, 1196, 1202, 1209, 1221, 1223, 1226, 1227, 1230, 1232, 1233, 1234, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1258, 1259, 1263, 1268, 1270, 1273, 1274, 1275, 1276, 1277, 1279, 1285, 1286, 1287, 1289, 1297, 1298, 1299, 1302, 1303, 1305, 1311, 1313, 1314, 1316, 1318, 1333, 1338, 1339, 1343, 1346, 1357, 1366, 1367, 1369, 1375, 1380, 1385], "boolean": [56, 95, 178, 209, 230, 232, 277, 295, 312, 349, 361, 362, 363, 377, 378, 381, 402, 405, 408, 419, 458, 459, 505, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 543, 544, 548, 627, 629, 632, 633, 684, 704, 748, 755, 756, 765, 766, 824, 832, 842, 858, 878, 904, 916, 921, 958, 964, 971, 972, 984, 986, 987, 990, 1011, 1071, 1072, 1125, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1164, 1165, 1169, 1223, 1226, 1227, 1258, 1274, 1348, 1357, 1377], "border": 21, "both": [11, 26, 38, 48, 55, 96, 97, 150, 153, 167, 213, 239, 253, 254, 255, 265, 281, 282, 308, 318, 349, 364, 428, 439, 479, 499, 526, 637, 650, 654, 656, 658, 660, 662, 665, 667, 669, 715, 781, 782, 784, 785, 800, 801, 829, 830, 832, 838, 842, 853, 882, 886, 887, 888, 897, 907, 914, 925, 958, 964, 1041, 1096, 1144, 1301, 1339, 1357, 1385, 1386], "boto3": 33, "bottom": [209, 349, 419, 842, 858, 958], "bottom_k": [312, 349, 419, 747, 748, 842, 921, 958, 1342, 1357], "bottom_k_bi": [418, 747, 748, 842], "bound": [111, 148, 149, 225, 239, 349, 385, 428, 526, 555, 557, 580, 586, 752, 762, 781, 782, 784, 785, 800, 801, 829, 830, 842, 882, 958, 994, 1041, 1114, 1144, 1176, 1178, 1207, 1345, 1357, 1375], "boundari": [239, 349, 428, 733, 842, 882, 958, 1041, 1319, 1357], "box": [21, 258, 349], "box_draw": 21, "branch": [62, 63, 129, 832, 863, 864, 874, 901, 914, 958], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 140, 141, 142, 143, 144, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 253, 255, 296, 306, 311, 318, 349, 352, 353, 438, 439, 446, 458, 520, 589, 637, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 767, 769, 800, 801, 842, 863, 864, 886, 888, 917, 925, 958, 1036, 1052, 1053, 1059, 1071, 1139, 1230, 1242, 1243, 1246, 1248, 1249, 1336, 1341, 1357, 1362], "breakpoint": [439, 520, 637, 842, 1053, 1139, 1230, 1357], "breezah": 162, "breviti": 202, "broadcast": [713, 769, 964, 1299], "broader": 964, "brotli": [47, 51, 349, 958], "brussel": [473, 1090], "bst": [451, 455, 473, 1064, 1068, 1090], "bucket": [40, 152, 163, 164, 167, 349, 474, 487, 520, 842, 1091, 1104, 1139, 1357], "bud": [711, 712, 1297, 1298], "budget": 1366, "buffer": [52, 148, 149, 150, 225, 251, 349, 406, 1015, 1114, 1357], "buffer_s": [251, 349], "bug": [95, 143, 588, 589, 842, 892, 941, 958, 1209, 1357], "build": [61, 131, 964, 1388], "built": 100, "builtin": [146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 349, 441, 842, 869, 958], "bundl": 202, "busi": [446, 458, 767, 1059, 1071], "by_alternate_row": 1, "by_dtyp": 964, "by_first_letter_of_column_nam": 57, "by_first_letter_of_column_valu": 57, "by_index": 964, "by_left": [254, 349, 887, 958], "by_nam": 964, "by_pred": [282, 349], "by_right": [254, 349, 887, 958], "bye": 1, "byi": 1380, "bys": [239, 349, 882, 958], "byte": [36, 38, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 144, 146, 147, 148, 149, 154, 155, 156, 157, 158, 161, 162, 165, 166, 218, 225, 289, 349, 406, 423, 424, 441, 603, 700, 701, 702, 706, 707, 715, 726, 842, 869, 911, 958, 1015, 1032, 1033, 1114, 1286, 1287, 1288, 1292, 1293, 1301, 1312, 1357, 1380], "bytesio": [41, 43, 44, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 289, 349, 441, 603, 842, 869, 911, 958], "c": [1, 11, 36, 38, 40, 43, 44, 47, 52, 57, 59, 64, 104, 131, 133, 135, 137, 145, 153, 162, 206, 207, 209, 210, 211, 212, 213, 214, 216, 219, 220, 221, 222, 223, 224, 226, 230, 232, 235, 236, 237, 238, 239, 241, 243, 244, 252, 253, 256, 257, 259, 261, 263, 266, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 282, 285, 286, 287, 294, 295, 296, 297, 298, 300, 301, 304, 305, 306, 307, 308, 309, 312, 316, 317, 318, 320, 321, 323, 328, 331, 332, 333, 336, 337, 339, 342, 343, 349, 353, 358, 360, 361, 363, 381, 419, 439, 479, 517, 526, 547, 559, 589, 596, 613, 614, 628, 630, 634, 637, 676, 717, 725, 748, 751, 758, 760, 761, 763, 764, 765, 768, 769, 771, 772, 773, 774, 776, 777, 779, 789, 790, 791, 794, 795, 798, 799, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 821, 823, 825, 826, 827, 831, 838, 842, 858, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 878, 881, 882, 886, 890, 899, 901, 904, 905, 906, 908, 909, 914, 915, 916, 917, 921, 924, 925, 928, 930, 934, 937, 938, 939, 942, 943, 945, 948, 949, 958, 964, 1035, 1053, 1144, 1168, 1230, 1303, 1311, 1325, 1344, 1357, 1367, 1369, 1370, 1372, 1373, 1374, 1375, 1380, 1385], "c00": 964, "c01": 964, "c02": 964, "c03": 964, "c05": 964, "c1": 398, "c123": 1380, "c2": 398, "c20": 964, "c25": 964, "c3": 398, "c40": 964, "c45": 1380, "c4d79b": [41, 349], "c50": 964, "c567": [41, 349], "c60": 964, "c75": 964, "c80": 964, "c8ae6d2b276": [41, 349], "c93": 964, "c95": 964, "c96": 964, "c97": 964, "c98": 964, "c99": 964, "c_btm_by_a": [419, 842], "c_btm_by_b": [419, 842], "c_by_ca": [419, 748, 842], "c_by_cb": [419, 748, 842], "c_c_c": [821, 917, 958], "c_contigu": [307, 349], "c_max": [630, 842], "c_mean_squar": [328, 934], "c_min": [630, 842], "c_top_by_a": [748, 842], "c_top_by_b": [748, 842], "c_total": 1385, "cach": [55, 62, 63, 96, 97, 124, 129, 154, 162, 165, 167, 171, 172, 173, 174, 186, 644, 645, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 725, 727, 728, 732, 842, 853, 863, 864, 874, 901, 914, 958, 1031, 1236, 1237, 1311, 1313, 1314, 1318, 1357], "cadi": [273, 349], "cafe": [730, 1316], "caf\u00e9": [423, 424, 706, 707, 964, 1032, 1033, 1292, 1293], "calamin": 153, "calcul": [41, 47, 51, 56, 217, 239, 297, 320, 349, 442, 495, 496, 497, 498, 538, 550, 569, 576, 582, 586, 651, 663, 681, 686, 752, 754, 774, 818, 819, 823, 831, 842, 868, 882, 918, 926, 958, 1054, 1055, 1115, 1116, 1117, 1118, 1159, 1171, 1190, 1242, 1249, 1268, 1272, 1347, 1357], "calendar": [70, 71, 239, 254, 281, 319, 349, 449, 460, 462, 469, 474, 487, 491, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 1062, 1073, 1078, 1086, 1091, 1104, 1108, 1116, 1357], "calendar_year": [460, 491], "call": [10, 38, 40, 41, 43, 47, 48, 49, 50, 51, 55, 62, 63, 129, 135, 143, 145, 148, 149, 150, 152, 153, 154, 158, 160, 162, 163, 165, 166, 167, 171, 172, 173, 174, 178, 182, 192, 202, 209, 238, 239, 256, 258, 281, 296, 307, 312, 348, 349, 418, 419, 434, 437, 446, 458, 588, 589, 613, 614, 616, 618, 620, 621, 644, 645, 677, 747, 748, 767, 773, 838, 842, 858, 863, 864, 874, 881, 882, 901, 907, 914, 917, 921, 955, 956, 957, 958, 964, 1027, 1059, 1071, 1209, 1237, 1264, 1338, 1342, 1357, 1367, 1371, 1385], "callabl": [52, 53, 54, 57, 58, 59, 60, 95, 143, 162, 232, 258, 272, 278, 335, 349, 398, 580, 588, 589, 614, 615, 634, 652, 776, 777, 790, 803, 804, 816, 842, 892, 900, 905, 941, 958, 1007, 1201, 1209, 1243, 1357], "callback": [52, 53, 54, 140, 142], "caller": [95, 151, 265, 349, 580, 892, 897, 941, 958], "cam": [278, 349, 905, 958], "can": [1, 15, 28, 38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 55, 56, 62, 70, 71, 73, 87, 95, 96, 97, 133, 143, 148, 149, 150, 152, 153, 154, 158, 159, 160, 162, 163, 165, 166, 167, 168, 176, 177, 178, 182, 184, 187, 192, 202, 204, 209, 211, 221, 222, 223, 232, 234, 238, 239, 246, 248, 250, 253, 254, 258, 269, 273, 281, 283, 284, 287, 289, 290, 295, 306, 307, 311, 312, 313, 317, 323, 326, 335, 349, 352, 361, 398, 419, 434, 437, 438, 441, 446, 458, 466, 467, 469, 473, 476, 479, 487, 496, 502, 505, 526, 552, 580, 588, 589, 596, 600, 603, 604, 610, 613, 614, 616, 618, 620, 621, 630, 635, 637, 642, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 674, 676, 681, 684, 689, 698, 705, 711, 712, 713, 720, 721, 722, 725, 736, 748, 765, 767, 780, 783, 790, 792, 796, 797, 800, 804, 821, 832, 838, 841, 842, 853, 858, 859, 863, 864, 869, 871, 872, 874, 882, 886, 887, 907, 909, 911, 912, 914, 916, 917, 921, 928, 931, 932, 958, 964, 966, 1007, 1052, 1059, 1071, 1083, 1084, 1086, 1090, 1091, 1093, 1096, 1104, 1116, 1122, 1144, 1173, 1201, 1209, 1214, 1228, 1230, 1234, 1237, 1256, 1258, 1259, 1262, 1268, 1275, 1276, 1284, 1291, 1297, 1298, 1299, 1306, 1307, 1308, 1311, 1336, 1338, 1357, 1362, 1372, 1385], "cancel": [863, 958], "candid": [696, 698, 1282, 1284], "cannot": [1, 47, 48, 49, 50, 51, 62, 63, 106, 109, 148, 149, 153, 154, 156, 158, 159, 160, 167, 184, 202, 254, 258, 284, 285, 307, 326, 335, 349, 403, 479, 499, 568, 589, 604, 672, 691, 717, 738, 804, 842, 863, 864, 874, 887, 901, 914, 932, 933, 941, 958, 964, 1012, 1096, 1189, 1209, 1255, 1277, 1303, 1338, 1357], "capabl": [1, 41, 349], "capac": [225, 293, 349, 1114, 1263, 1357], "capit": [733, 1319], "captur": [696, 698, 711, 712, 1282, 1284, 1297, 1298], "car": [278, 302, 349, 647, 842, 905, 958], "cardin": [208, 349, 365, 761, 842, 857, 958, 974, 1357], "care": [41, 290, 349, 589, 630, 674, 842, 912, 958, 1259, 1357], "cars_revers": [647, 842], "cartesian": [253, 349, 886, 958], "case": [41, 55, 56, 63, 95, 104, 130, 132, 133, 134, 136, 143, 145, 150, 157, 158, 166, 167, 184, 227, 239, 251, 258, 273, 281, 283, 284, 303, 306, 307, 349, 447, 496, 588, 600, 601, 614, 630, 650, 688, 689, 697, 699, 700, 701, 711, 712, 713, 733, 832, 842, 864, 882, 904, 907, 958, 964, 1060, 1116, 1121, 1274, 1275, 1283, 1285, 1286, 1287, 1297, 1298, 1299, 1319, 1336, 1357], "cast": [1, 40, 58, 59, 130, 132, 133, 136, 145, 171, 172, 173, 174, 232, 239, 272, 281, 306, 307, 311, 323, 349, 364, 436, 437, 448, 476, 479, 490, 629, 634, 635, 642, 644, 650, 704, 705, 735, 742, 746, 770, 771, 822, 842, 882, 900, 907, 928, 958, 964, 1036, 1050, 1051, 1061, 1093, 1096, 1107, 1228, 1234, 1290, 1291, 1321, 1328, 1334, 1338, 1340, 1341, 1357, 1378], "cast_str_to_int": [272, 349, 900, 958], "cast_to_supertyp": [145, 842], "cat": [27, 55, 96, 97, 439, 637, 688, 690, 731, 734, 746, 771, 837, 842, 964, 1053, 1139, 1230, 1274, 1276, 1317, 1320, 1353, 1357], "catalog": [0, 854], "catalog_nam": [188, 190, 191, 192], "cataloginfo": [189, 200], "categor": [40, 55, 74, 96, 97, 99, 171, 172, 173, 174, 253, 304, 349, 421, 422, 423, 424, 425, 439, 637, 644, 645, 746, 842, 964, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1053, 1230, 1236, 1237, 1340, 1357], "categori": [41, 55, 74, 97, 304, 349, 422, 439, 520, 637, 842, 1030, 1053, 1139, 1230, 1333, 1357], "categorical_as_str": [171, 172, 173, 174], "categoricalord": 68, "categoricaltyp": [301, 349], "caus": [112, 121, 131, 148, 149, 150, 162, 206, 227, 307, 349, 588, 842, 1121, 1338, 1357], "cba": 722, "cbrt": [842, 1357, 1378], "cbrt_a": 1379, "cc": [499, 788, 842, 964, 1054, 1357, 1380], "ccc": [1, 41, 349, 736, 738, 739, 964, 1380], "ccy": 1388, "cd": [712, 736, 738, 739, 964], "cd34": 712, "cdatainterfac": [131, 205, 967], "cde": [964, 1380], "cdt": [474, 487, 1091, 1104], "ceil": [58, 842, 1357, 1378], "ceil_a": 1379, "cell": [16, 17, 41, 273, 349], "cent": [449, 1297], "center": [16, 17, 41, 349, 495, 497, 498, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 842, 1115, 1117, 1118, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357], "central": [163, 164, 202, 538, 681, 842, 1159, 1268, 1357], "centuri": 1381, "certain": [48, 49, 50, 51, 52, 63, 244, 319, 349, 721, 722, 838, 863, 864, 901, 958, 1357], "certainli": [725, 727, 728, 1311, 1313, 1314], "cest": [473, 1090], "cet": [473, 1090], "cfg": [2, 4, 18, 202], "cfg_ascii_fram": 202, "cfg_markdown": 202, "cfg_verbos": 202, "cfoo": [930, 958], "chain": [613, 614, 616, 618, 620, 621, 832], "chanc": [175, 178, 182, 1388], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 63, 72, 78, 131, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 158, 160, 162, 163, 164, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 255, 296, 306, 311, 318, 325, 349, 352, 353, 438, 439, 442, 446, 458, 479, 520, 589, 630, 631, 637, 644, 649, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 767, 769, 800, 801, 832, 842, 863, 864, 888, 917, 925, 931, 958, 964, 1035, 1036, 1052, 1053, 1059, 1071, 1096, 1139, 1225, 1230, 1236, 1241, 1242, 1243, 1246, 1248, 1249, 1263, 1336, 1341, 1357, 1362], "changes_length": [145, 842], "char": [28, 148, 162, 697, 1283], "char_length": 1380, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 48, 98, 147, 148, 149, 151, 162, 349, 423, 424, 469, 694, 695, 697, 702, 706, 707, 709, 710, 711, 712, 715, 716, 717, 720, 721, 722, 723, 724, 726, 733, 735, 901, 958, 964, 1032, 1033, 1086, 1280, 1281, 1283, 1288, 1292, 1293, 1295, 1296, 1297, 1298, 1301, 1302, 1303, 1306, 1307, 1308, 1312, 1319, 1321, 1380], "character_length": 1380, "characterist": [178, 182], "charli": [148, 1386], "chart": [41, 349, 352, 901, 958, 1357, 1362], "cheap": [211, 212, 288, 324, 349, 861, 862, 910, 929, 958, 1040, 1042, 1357], "cheaper": [555, 1176], "check": [40, 71, 106, 148, 149, 162, 171, 172, 173, 174, 186, 224, 249, 253, 254, 349, 381, 402, 405, 408, 421, 425, 517, 526, 530, 548, 688, 693, 700, 719, 842, 886, 887, 892, 958, 990, 1011, 1014, 1017, 1029, 1034, 1113, 1135, 1136, 1146, 1149, 1156, 1158, 1169, 1274, 1279, 1286, 1305, 1357], "check_column_ord": [171, 172], "check_dtyp": [171, 172, 173, 174, 963, 1113, 1357], "check_exact": [171, 172, 173, 174], "check_nam": [173, 174, 1113, 1357], "check_ord": [173, 174], "check_row_ord": [171, 172], "check_sorted": [254, 349, 887, 958], "choos": [47, 49, 51, 239, 273, 349, 479, 882, 958, 1096], "chrono": [38, 48, 100, 349, 476, 479, 725, 727, 728, 732, 958, 1093, 1096, 1311, 1313, 1314, 1318, 1380, 1381], "chunk": [15, 51, 139, 148, 149, 152, 158, 160, 162, 163, 165, 166, 167, 178, 182, 227, 252, 268, 307, 349, 364, 641, 842, 958, 973, 1039, 1121, 1133, 1215, 1233, 1332, 1338, 1357], "chunk_length": 1357, "chunkedarrai": [130, 268, 349], "citi": [711, 712], "clang": 170, "clariti": [282, 349], "class": [1, 18, 32, 33, 34, 35, 52, 53, 54, 55, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 115, 117, 140, 141, 142, 175, 176, 187, 193, 194, 196, 197, 284, 289, 349, 603, 800, 829, 838, 842, 848, 854, 866, 873, 908, 927, 933, 958, 963, 1337, 1357, 1361, 1369, 1385], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 218, 349, 441, 511, 842, 869, 958, 1367, 1385], "claus": [854, 1375, 1384], "clean": [725, 727, 728, 1311, 1313, 1314], "cleaner": 202, "cleanli": [11, 237, 349, 1385], "clear": [55, 96, 212, 349, 862, 958, 1042, 1357], "clearer": 133, "clickhous": 151, "client": [33, 150, 187], "clip": [842, 1357], "clipboard": [37, 147, 349, 854], "clone": [132, 133, 134, 135, 136, 211, 307, 349, 861, 958, 1040, 1357], "close": [41, 48, 49, 50, 51, 53, 150, 239, 281, 296, 349, 439, 526, 585, 637, 650, 654, 656, 658, 660, 662, 665, 667, 669, 681, 781, 782, 784, 785, 800, 801, 829, 830, 842, 882, 907, 917, 958, 1053, 1144, 1230, 1268, 1357], "closedinterv": [239, 281, 349, 526, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 800, 801, 829, 830, 842, 882, 907, 958, 1144, 1357], "closest": [130, 254, 349, 887, 958, 1374, 1379], "closur": [654, 656, 665, 667, 669, 842], "cloud": [35, 38, 40, 43, 47, 48, 49, 50, 51, 95, 150, 152, 158, 160, 162, 163, 164, 165, 166, 167, 168, 192, 349, 854, 903, 958], "cloudi": [711, 712], "cloudpickl": 170, "cluster": 167, "cluster_with_column": [62, 63, 129, 863, 864, 874, 901, 914, 958], "co": [697, 842, 1283, 1357, 1378], "coalesc": [64, 253, 254, 318, 349, 524, 699, 701, 725, 832, 842, 886, 887, 925, 958, 1287, 1311, 1373, 1378], "code": [202, 213, 253, 349, 402, 403, 404, 405, 408, 441, 589, 674, 842, 869, 886, 890, 958, 1259, 1357, 1367], "codebas": 202, "coeffici": [215, 349, 681, 842, 1268, 1357], "coerc": [64, 643, 842, 1357], "coercion": [48, 49, 50, 51, 62, 63, 129, 643, 842, 863, 864, 874, 901, 914, 958, 1357], "col": [1, 13, 38, 41, 48, 52, 56, 57, 58, 59, 134, 136, 162, 176, 178, 230, 238, 239, 247, 249, 253, 254, 255, 258, 269, 272, 273, 277, 281, 282, 287, 295, 306, 311, 315, 317, 323, 328, 349, 353, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 617, 619, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 765, 766, 768, 769, 770, 771, 773, 775, 778, 780, 781, 783, 784, 786, 790, 791, 792, 793, 794, 795, 805, 807, 809, 810, 812, 815, 816, 820, 821, 823, 825, 827, 828, 831, 832, 842, 878, 881, 882, 884, 886, 887, 888, 900, 904, 907, 909, 916, 917, 923, 928, 930, 934, 958, 964, 1086, 1090, 1173, 1256, 1258, 1287, 1291, 1311, 1357, 1388], "col0": [178, 1388], "col1": [178, 273, 349, 958, 1388], "col2": [178, 273, 349, 958, 1388], "col3": [273, 349, 1388], "col4": 1388, "col_nam": [272, 349, 589, 832, 842, 900, 958], "cole": 144, "coli": [41, 349, 620, 621, 964, 1388], "collaps": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 901, 914, 958], "collapse_join": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 901, 914, 958], "collect": [10, 48, 49, 50, 51, 59, 62, 63, 95, 129, 162, 163, 164, 168, 178, 179, 182, 221, 222, 256, 273, 296, 301, 314, 315, 349, 499, 530, 569, 570, 571, 572, 589, 770, 788, 792, 820, 821, 824, 842, 857, 858, 860, 861, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 909, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 955, 957, 958, 964, 1149, 1190, 1191, 1192, 1193, 1357, 1367, 1368, 1369, 1372, 1373, 1385, 1386, 1388], "collect_al": [59, 63, 129, 863, 864, 958], "collect_all_async": [864, 958], "collect_async": [63, 958], "collect_schema": [59, 256, 349, 866, 873, 900, 908, 927, 958], "collis": 64, "colnam": [25, 41, 162, 349], "color": [55, 96, 97, 335, 349, 352, 402, 403, 404, 405, 408, 691, 753, 842, 941, 1011, 1012, 1013, 1014, 1017, 1277, 1346, 1357, 1380], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 51, 52, 54, 55, 56, 57, 64, 71, 87, 97, 101, 105, 130, 132, 133, 134, 135, 136, 137, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 178, 194, 197, 207, 209, 210, 213, 215, 216, 219, 220, 221, 222, 223, 226, 230, 231, 234, 235, 237, 238, 239, 243, 244, 249, 250, 251, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 290, 295, 297, 298, 299, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 334, 349, 352, 353, 360, 361, 363, 374, 383, 392, 394, 397, 406, 419, 428, 432, 433, 439, 449, 450, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 468, 470, 471, 472, 475, 476, 477, 479, 488, 489, 491, 499, 501, 505, 507, 520, 525, 526, 541, 547, 553, 555, 575, 579, 580, 589, 595, 596, 598, 600, 602, 613, 615, 616, 617, 618, 619, 620, 621, 630, 637, 641, 643, 644, 645, 646, 648, 649, 650, 654, 656, 658, 660, 662, 665, 667, 669, 676, 677, 683, 684, 687, 695, 700, 702, 703, 713, 717, 718, 725, 726, 727, 728, 729, 730, 732, 737, 740, 748, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 858, 860, 867, 870, 871, 872, 873, 875, 878, 881, 882, 886, 887, 888, 892, 893, 894, 895, 896, 898, 899, 902, 904, 905, 907, 908, 909, 910, 912, 916, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 940, 941, 958, 963, 964, 971, 972, 992, 1001, 1003, 1006, 1015, 1031, 1035, 1041, 1046, 1047, 1053, 1062, 1065, 1066, 1067, 1070, 1072, 1073, 1077, 1078, 1079, 1081, 1082, 1085, 1087, 1088, 1092, 1093, 1094, 1096, 1105, 1106, 1108, 1120, 1139, 1143, 1168, 1174, 1176, 1196, 1200, 1230, 1237, 1238, 1241, 1262, 1273, 1281, 1286, 1289, 1303, 1304, 1311, 1313, 1314, 1315, 1316, 1318, 1324, 1327, 1333, 1334, 1346, 1357, 1373, 1375, 1377, 1379, 1380, 1382, 1383, 1386, 1387, 1388], "column_0": [1, 258, 313, 349, 903, 958], "column_1": [258, 313, 349, 1382], "column_2": [313, 349, 1382], "column_abc": 16, "column_format": [41, 349], "column_nam": [278, 313, 349, 905, 958], "column_tot": [41, 349], "column_width": [41, 349], "column_x": [148, 149, 153, 159, 162], "column_xyz": 16, "columnar": [134, 136, 251, 283, 349], "columnformatdict": [41, 349], "columninfo": [197, 200], "columnnameorselector": [210, 219, 221, 222, 264, 271, 273, 284, 304, 314, 315, 316, 317, 349, 860, 870, 871, 872, 896, 922, 923, 924, 958], "columnnotfounderror": [234, 235, 349], "columntotalsdefinit": [41, 349], "columnwidthsdefinit": [41, 349], "colx": [41, 349, 620, 621, 964, 1372, 1388], "colz": [964, 1388], "com": [33, 41, 151, 349, 495, 497, 498, 696, 697, 698, 842, 1115, 1117, 1118, 1282, 1283, 1284, 1357], "combin": [47, 51, 62, 63, 64, 129, 230, 239, 240, 254, 273, 277, 281, 319, 349, 362, 375, 487, 496, 509, 604, 629, 645, 650, 720, 721, 722, 781, 782, 784, 785, 829, 830, 832, 842, 863, 864, 874, 882, 887, 901, 904, 907, 914, 958, 1091, 1104, 1116, 1237, 1306, 1307, 1308, 1357, 1373, 1386], "come": [124, 151, 239, 314, 316, 349, 446, 458, 466, 467, 538, 580, 767, 832, 842, 882, 922, 924, 958, 1059, 1071, 1083, 1084, 1159, 1357], "comm_subexpr_elim": [62, 63, 129, 863, 864, 874, 901, 914, 958], "comm_subplan_elim": [62, 63, 129, 863, 864, 874, 901, 914, 958], "comma": [37, 38, 148, 149, 162, 349], "comment": [148, 149, 162, 193, 194, 196, 197], "comment_prefix": [148, 149, 162], "common": [56, 62, 63, 64, 104, 129, 148, 149, 162, 318, 349, 614, 848, 863, 864, 874, 901, 914, 925, 958, 1361], "commonli": 832, "compact": 1383, "compani": 151, "compar": [167, 171, 172, 173, 174, 224, 230, 277, 349, 493, 494, 514, 516, 526, 540, 587, 624, 625, 842, 878, 904, 958, 1035, 1112, 1113, 1221, 1357], "comparison": [168, 230, 277, 349, 878, 904, 958], "compat": [21, 41, 43, 44, 47, 49, 51, 99, 301, 349, 688, 690, 696, 697, 698, 700, 711, 712, 958, 964, 1096, 1274, 1276, 1282, 1283, 1284, 1286, 1297, 1298, 1332, 1357, 1367, 1380, 1381, 1385], "compat_level": [43, 44, 49, 301, 349, 958, 1332, 1357], "compatibleframetyp": [1368, 1370, 1385], "compatlevel": [43, 44, 49, 301, 349, 958, 1332, 1357], "competit": [640, 842, 1232, 1357], "compil": [61, 379, 380, 545, 546, 962, 988, 989, 1166, 1167], "complement": 964, "complet": [148, 150, 162, 1386], "complex": [179, 418, 419, 438, 747, 748, 842, 1027, 1052, 1342, 1357], "compliant": [41, 349, 479, 1096], "compon": [450, 475, 479, 725, 728, 786, 1063, 1092, 1096, 1311, 1314], "compos": 1386, "composit": [87, 1388], "compound": [137, 284, 349, 964], "comprehens": 176, "compress": [36, 40, 43, 44, 47, 49, 51, 349, 648, 842, 958, 1240, 1357], "compression_level": [47, 51, 349, 958], "comput": [62, 64, 102, 225, 238, 254, 273, 308, 314, 328, 341, 349, 357, 366, 367, 368, 369, 370, 371, 388, 389, 390, 395, 396, 400, 426, 429, 430, 431, 434, 435, 436, 437, 443, 492, 495, 496, 497, 498, 500, 538, 562, 563, 564, 565, 569, 570, 571, 572, 576, 582, 583, 584, 585, 610, 630, 631, 636, 640, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 678, 679, 680, 681, 685, 744, 745, 753, 758, 760, 763, 764, 765, 772, 774, 787, 808, 818, 819, 832, 842, 863, 881, 884, 886, 887, 903, 922, 930, 934, 947, 958, 969, 975, 976, 977, 978, 979, 980, 997, 998, 999, 1004, 1005, 1009, 1037, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1056, 1110, 1114, 1115, 1116, 1117, 1118, 1119, 1159, 1183, 1184, 1185, 1186, 1190, 1191, 1192, 1193, 1197, 1203, 1204, 1205, 1206, 1214, 1225, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1265, 1266, 1267, 1268, 1271, 1330, 1331, 1339, 1346, 1357, 1379, 1382], "computecontext": [903, 958], "computeerror": [600, 730, 832, 1316], "concat": [55, 96, 97, 105, 149, 254, 349, 887, 930, 958, 1039, 1133, 1215, 1233, 1357, 1378], "concat_list": [552, 787], "concat_w": [296, 349, 821, 917, 958, 1378, 1385], "concaten": [55, 64, 96, 97, 232, 272, 349, 634, 687, 703, 769, 770, 771, 842, 900, 958, 1039, 1215, 1273, 1289, 1357, 1380], "concatmethod": 64, "conclus": [134, 136, 349, 958], "concret": [178, 182], "condit": [41, 222, 230, 255, 277, 282, 349, 421, 425, 505, 526, 693, 719, 766, 790, 832, 842, 878, 888, 904, 958, 1144, 1357, 1373, 1378, 1384], "conditional_format": [41, 349], "conditionalformatdict": [41, 349], "config": [0, 56, 217, 287, 306, 323, 349, 689, 699, 701, 713, 781, 782, 784, 785, 786, 854, 863, 868, 909, 928, 958, 1275, 1287, 1299], "configur": [5, 33, 40, 152, 163, 164, 202, 349, 352, 855, 863, 874, 901, 914, 933, 958, 1357, 1362], "configure_axisx": [349, 352, 1357, 1362], "configure_point": [349, 352, 1357, 1362], "conflat": [526, 842], "conform": 1388, "confus": [104, 361, 533, 534, 713, 842], "conjunct": [41, 96, 150, 153, 159, 176, 349, 796, 799, 958], "conn": 150, "connect": [38, 39, 43, 47, 48, 49, 50, 51, 74, 148, 150, 151, 154, 156, 158, 160, 162, 165, 166, 167, 168, 192, 349, 855, 958], "connectionorcursor": [39, 150, 349], "connector": 151, "connectorx": [150, 151, 170], "consecut": [229, 349, 401, 504, 510, 687, 703, 711, 842, 877, 958, 1010, 1124, 1129, 1273, 1289, 1298, 1357], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 96, 97, 140, 141, 142, 143, 144, 148, 149, 150, 152, 158, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 209, 221, 222, 224, 250, 255, 258, 264, 283, 296, 306, 311, 312, 314, 316, 318, 349, 352, 353, 419, 428, 438, 439, 446, 458, 509, 520, 588, 589, 596, 612, 613, 616, 618, 620, 621, 637, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 748, 767, 769, 776, 790, 800, 801, 838, 842, 858, 863, 864, 871, 872, 874, 888, 896, 901, 914, 917, 921, 922, 924, 925, 941, 958, 964, 1031, 1036, 1041, 1052, 1053, 1059, 1071, 1113, 1139, 1209, 1230, 1242, 1243, 1246, 1248, 1249, 1256, 1258, 1336, 1341, 1357, 1362, 1367], "consider": 144, "consist": [238, 271, 307, 349, 725, 781, 782, 800, 832, 881, 958, 964, 973, 1121, 1311, 1338, 1357], "consola": [41, 349], "const": 11, "constant": [225, 281, 349, 447, 496, 502, 801, 842, 907, 958, 1060, 1114, 1116, 1122, 1357], "constrain": [56, 162, 221, 222, 349, 871, 872, 958, 964], "constraint": [230, 277, 349, 505, 613, 614, 616, 618, 620, 621, 832, 842, 878, 904, 958, 964, 1387], "construct": [55, 96, 97, 104, 130, 132, 133, 134, 135, 136, 137, 144, 150, 349, 511, 814, 817, 833, 838, 842, 869, 958, 1031, 1357, 1372], "construct_categor": 55, "constructor": [144, 153, 182], "contain": [5, 38, 39, 40, 41, 48, 52, 53, 54, 56, 61, 100, 132, 135, 137, 145, 150, 151, 152, 160, 163, 164, 167, 177, 178, 180, 182, 209, 214, 221, 222, 223, 239, 247, 252, 269, 306, 307, 311, 312, 318, 330, 349, 361, 363, 386, 405, 408, 421, 425, 441, 517, 530, 559, 589, 687, 689, 693, 696, 698, 700, 703, 705, 718, 719, 735, 757, 758, 759, 760, 771, 804, 832, 842, 858, 866, 869, 871, 872, 873, 882, 901, 921, 925, 936, 958, 964, 971, 972, 995, 1029, 1034, 1135, 1136, 1180, 1215, 1273, 1275, 1279, 1282, 1284, 1286, 1289, 1291, 1304, 1305, 1321, 1332, 1338, 1357, 1375], "contains_with_expr": 402, "contains_with_lit": 402, "content": [14, 48, 49, 50, 51, 677, 842, 958, 962, 1264, 1357], "context": [55, 96, 97, 140, 142, 184, 269, 296, 349, 359, 505, 552, 588, 589, 600, 683, 684, 753, 773, 789, 792, 798, 799, 804, 813, 817, 820, 841, 842, 853, 854, 903, 917, 930, 958, 1173, 1346, 1357, 1372, 1385, 1387], "contigu": [64, 130, 131, 135, 148, 149, 152, 154, 156, 158, 160, 162, 163, 165, 166, 167, 276, 307, 349], "continu": [439, 637, 681, 842, 1053, 1230, 1268, 1357, 1374], "contrast": 786, "control": [11, 12, 41, 63, 64, 153, 176, 178, 295, 296, 306, 349, 645, 684, 821, 842, 863, 864, 874, 901, 914, 916, 917, 933, 955, 958, 1237, 1336, 1357, 1369, 1372, 1385], "conveni": [227, 311, 349, 950, 973, 1121, 1357, 1367], "convers": [131, 206, 251, 252, 283, 284, 303, 307, 308, 349, 451, 725, 727, 728, 732, 854, 1064, 1311, 1313, 1314, 1318, 1338, 1339, 1357, 1383, 1385], "convert": [40, 100, 131, 135, 145, 152, 153, 159, 163, 206, 284, 302, 303, 304, 305, 306, 307, 308, 310, 311, 349, 397, 398, 440, 451, 476, 479, 579, 580, 588, 614, 639, 698, 725, 727, 728, 729, 730, 732, 737, 842, 958, 1006, 1007, 1035, 1064, 1093, 1096, 1200, 1201, 1284, 1311, 1313, 1314, 1315, 1316, 1318, 1324, 1327, 1335, 1336, 1337, 1338, 1339, 1341, 1357, 1380, 1382, 1383, 1385], "convert_time_zon": [473, 1090], "coo": [278, 349, 905, 958], "coord": 740, "coordin": [41, 349, 1143, 1357], "copi": [37, 130, 131, 147, 204, 206, 211, 212, 252, 301, 307, 308, 323, 349, 502, 842, 861, 862, 928, 958, 966, 1040, 1042, 1122, 1332, 1337, 1338, 1339, 1357, 1385], "corasick": [689, 699, 701, 713, 1275, 1285, 1287, 1299], "core": [1, 255, 349, 888, 958, 1385, 1388], "cores_right": [255, 349, 888, 958], "corner": [21, 41, 137, 349], "corr": 349, "corrcoef": [215, 349], "correct": [95, 145, 153, 159, 497, 498, 538, 580, 651, 663, 681, 842, 892, 958, 1117, 1118, 1159, 1242, 1249, 1268, 1357], "correctli": [41, 349, 588, 790, 842], "correl": [215, 349, 772, 818], "correlationmethod": 772, "correspond": [239, 254, 281, 307, 319, 349, 419, 460, 469, 474, 487, 589, 640, 650, 654, 656, 658, 660, 662, 665, 667, 669, 748, 781, 782, 784, 785, 829, 830, 842, 863, 882, 887, 907, 958, 1073, 1086, 1091, 1104, 1232, 1357, 1374], "cosd": 1378, "cosh": [842, 1357], "cosin": [366, 367, 429, 430, 588, 842, 975, 976, 1043, 1044, 1357, 1382], "cost": [255, 284, 349, 711, 888, 958, 1298], "cost_usd": [711, 1298], "cot": [842, 1357, 1378], "cotang": [431, 842, 1045, 1357, 1382], "cotd": 1378, "could": [40, 93, 102, 349, 678, 776, 786, 790, 832, 842, 860, 868, 958, 1265, 1357], "count": [41, 168, 208, 217, 239, 269, 270, 281, 313, 319, 325, 340, 349, 365, 382, 391, 433, 446, 458, 496, 520, 541, 549, 561, 566, 589, 612, 628, 640, 650, 654, 656, 658, 660, 662, 665, 667, 669, 690, 751, 753, 761, 767, 775, 799, 812, 842, 857, 868, 882, 899, 907, 931, 946, 958, 964, 974, 991, 1000, 1047, 1054, 1059, 1071, 1116, 1139, 1162, 1170, 1182, 1187, 1216, 1224, 1276, 1344, 1346, 1357, 1362, 1366, 1378], "count_digit": 690, "count_num": [41, 349], "counterpart": 144, "countri": [254, 349, 447, 887, 958, 1060], "country_holidai": [446, 458, 767, 1059, 1071], "covari": [145, 774, 819, 842], "cover": 11, "cow": [709, 710, 1295, 1296], "cpu": [148, 149, 170, 306, 349, 933, 1336, 1357], "crab": [688, 700, 1274, 1286], "crate": [38, 48, 100, 349, 688, 690, 696, 697, 698, 700, 711, 712, 725, 727, 728, 732, 958, 964, 1274, 1276, 1282, 1283, 1284, 1286, 1297, 1298, 1311, 1313, 1314, 1318], "creat": [39, 41, 48, 49, 50, 51, 52, 54, 55, 97, 130, 134, 136, 148, 149, 150, 151, 154, 156, 160, 163, 164, 176, 177, 178, 179, 180, 181, 182, 183, 202, 211, 212, 239, 270, 273, 281, 306, 307, 319, 323, 326, 349, 352, 353, 450, 474, 487, 496, 520, 580, 588, 641, 650, 654, 656, 658, 660, 662, 665, 667, 669, 770, 780, 781, 782, 783, 784, 785, 786, 800, 828, 829, 830, 832, 838, 842, 861, 862, 868, 874, 882, 907, 928, 932, 958, 962, 963, 1040, 1042, 1053, 1063, 1091, 1104, 1116, 1139, 1222, 1230, 1233, 1336, 1338, 1357, 1362, 1384, 1385, 1388], "create_async_engin": 150, "create_engin": [39, 349], "created_at": [193, 196, 197], "created_bi": [193, 196, 197], "creation": [140, 142, 149], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 854, 958], "credential_provid": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 958], "credentialproviderfunct": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 958], "cross": [253, 349, 886, 958, 1373], "crustacean": [700, 1286], "cst": [474, 487, 1091, 1104], "csv": [37, 38, 48, 49, 50, 51, 52, 53, 54, 147, 148, 149, 153, 154, 162, 195, 349, 854, 958], "csvencod": [148, 149, 162], "csvquotestyl": [38, 48, 349, 958], "ctx": [52, 53, 54, 1366, 1368, 1369, 1370, 1371, 1372, 1385], "cube": [1, 60, 426, 635, 842, 1037, 1357, 1379], "cuda": 933, "cum_count": [842, 1357], "cum_count_revers": [433, 842], "cum_max": [842, 1357], "cum_max_all_fil": [434, 842], "cum_max_revers": [434, 842], "cum_min": [842, 1357], "cum_min_revers": [435, 842], "cum_prod": [358, 842, 1357], "cum_prod_revers": [436, 842], "cum_reduc": 776, "cum_sum": [523, 630, 741, 779, 842, 884, 958, 1158, 1357], "cum_sum_revers": [437, 842], "cumsum_horizont": 778, "cumul": [433, 434, 435, 436, 437, 775, 776, 777, 778, 779, 842, 1047, 1048, 1049, 1050, 1051, 1357], "cumulative_ev": [842, 1357], "cumulative_sal": [630, 842], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 137, 140, 141, 142, 150, 151, 158, 160, 162, 165, 166, 167, 175, 176, 178, 179, 180, 181, 182, 183, 192, 211, 212, 219, 253, 254, 278, 296, 306, 311, 349, 352, 353, 455, 580, 631, 842, 861, 862, 870, 886, 887, 905, 914, 917, 933, 958, 964, 1040, 1042, 1060, 1068, 1225, 1336, 1341, 1357, 1362, 1369, 1385], "cursor": [39, 150, 349], "custom": [1, 28, 40, 41, 57, 58, 59, 60, 103, 144, 181, 183, 217, 258, 273, 335, 349, 398, 446, 458, 476, 479, 580, 588, 589, 652, 753, 767, 803, 804, 842, 868, 892, 941, 958, 1007, 1059, 1071, 1093, 1096, 1201, 1209, 1243, 1346, 1357, 1388], "customis": [41, 349], "cut": [637, 842, 1230, 1357], "cxx": 1380, "cypher": 150, "d": [29, 36, 38, 40, 41, 43, 44, 47, 133, 168, 207, 230, 237, 239, 240, 241, 244, 253, 257, 277, 300, 301, 311, 317, 321, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 358, 360, 433, 456, 476, 479, 526, 595, 634, 676, 690, 697, 711, 712, 717, 725, 727, 728, 768, 769, 786, 792, 821, 842, 878, 882, 886, 904, 917, 937, 939, 942, 943, 944, 945, 946, 947, 948, 958, 964, 1035, 1047, 1069, 1093, 1096, 1144, 1168, 1276, 1283, 1297, 1298, 1303, 1311, 1313, 1314, 1325, 1357, 1373, 1375, 1377, 1380, 1381], "d1": [41, 349, 450], "d2": 450, "d3": 450, "d789": [41, 349], "d_4": [717, 1303], "dai": [70, 71, 88, 239, 252, 254, 281, 319, 349, 352, 446, 458, 466, 467, 469, 470, 472, 474, 476, 479, 480, 487, 489, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 767, 780, 781, 782, 783, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 964, 1059, 1071, 1083, 1084, 1086, 1087, 1089, 1091, 1093, 1096, 1097, 1104, 1106, 1116, 1357, 1381], "dark": 1366, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 64, 69, 70, 71, 73, 84, 85, 87, 88, 97, 100, 104, 106, 109, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 144, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 200, 204, 206, 212, 213, 223, 225, 226, 227, 237, 238, 239, 251, 252, 253, 256, 258, 271, 272, 276, 282, 283, 284, 286, 290, 293, 301, 306, 307, 308, 311, 313, 323, 327, 347, 349, 353, 361, 362, 363, 366, 367, 368, 369, 370, 371, 374, 377, 378, 379, 380, 381, 383, 386, 388, 389, 390, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 420, 422, 423, 424, 428, 429, 430, 431, 432, 439, 440, 441, 446, 447, 448, 449, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 501, 512, 514, 515, 516, 520, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 541, 545, 546, 548, 553, 559, 561, 568, 579, 581, 587, 589, 624, 625, 629, 630, 637, 639, 640, 643, 644, 645, 646, 648, 649, 654, 656, 658, 660, 662, 665, 667, 669, 670, 672, 674, 679, 680, 681, 687, 690, 691, 692, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 715, 716, 717, 718, 725, 726, 727, 728, 730, 732, 735, 744, 745, 746, 749, 750, 753, 756, 762, 770, 773, 780, 781, 782, 783, 784, 785, 786, 796, 797, 799, 800, 801, 802, 803, 804, 814, 817, 828, 829, 830, 833, 838, 842, 854, 861, 862, 869, 873, 875, 881, 882, 908, 912, 928, 958, 963, 966, 971, 972, 984, 986, 987, 988, 989, 990, 992, 994, 995, 1006, 1008, 1011, 1012, 1013, 1015, 1016, 1028, 1030, 1032, 1033, 1040, 1041, 1042, 1053, 1054, 1059, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1113, 1114, 1116, 1120, 1121, 1139, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1164, 1165, 1166, 1167, 1169, 1174, 1180, 1182, 1189, 1200, 1202, 1209, 1223, 1230, 1232, 1236, 1237, 1238, 1240, 1241, 1253, 1255, 1263, 1268, 1273, 1274, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1288, 1289, 1290, 1291, 1292, 1293, 1301, 1302, 1303, 1304, 1311, 1312, 1313, 1314, 1316, 1318, 1321, 1332, 1337, 1338, 1339, 1340, 1343, 1356, 1357, 1366, 1373, 1380, 1385, 1387], "data_bar": [41, 349], "data_bar_2010": [41, 349], "data_label": [41, 349], "data_page_s": [47, 51, 349, 958], "data_source_format": 197, "databas": [39, 128, 150, 151, 349, 854], "databrick": 187, "databricks_format": 195, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 83, 95, 101, 104, 105, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 171, 172, 175, 176, 202, 347, 348, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 838, 842, 854, 863, 864, 866, 868, 870, 873, 875, 879, 882, 886, 887, 888, 889, 890, 892, 896, 897, 901, 906, 908, 915, 917, 922, 923, 924, 925, 927, 930, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 958, 963, 964, 1053, 1054, 1090, 1116, 1139, 1209, 1230, 1287, 1291, 1303, 1304, 1327, 1333, 1334, 1346, 1357, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1388], "dataframeplot": [349, 352], "dataload": [311, 349], "datapoint": [239, 349, 882, 958], "dataset": [15, 47, 74, 148, 149, 152, 153, 159, 162, 163, 168, 253, 311, 349, 538, 842, 854, 886, 892, 958, 1159, 1357, 1386], "datasourceformat": [197, 200], "datat": [41, 349], "datatyp": [38, 48, 130, 132, 133, 134, 136, 138, 155, 157, 158, 160, 161, 166, 167, 179, 180, 182, 223, 232, 349, 420, 499, 676, 746, 769, 788, 790, 802, 838, 842, 854, 873, 958, 963, 964, 1028, 1054, 1109, 1209, 1262, 1340, 1357, 1383], "date": [17, 41, 56, 71, 148, 149, 151, 153, 159, 160, 162, 165, 167, 168, 210, 217, 237, 239, 252, 254, 281, 296, 349, 352, 381, 446, 448, 449, 450, 451, 454, 456, 458, 459, 460, 462, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 548, 630, 650, 654, 656, 658, 660, 662, 665, 667, 669, 725, 727, 746, 767, 781, 782, 784, 785, 792, 800, 802, 828, 842, 860, 868, 882, 887, 907, 958, 964, 990, 1059, 1061, 1062, 1063, 1064, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1116, 1169, 1218, 1219, 1311, 1313, 1340, 1357, 1378, 1381, 1383], "date32": [252, 349], "date_format": [38, 48, 349, 958], "date_min": 469, "date_minus_1y_2mon": 1086, "date_part": 1378, "date_plus_1i": [469, 1086], "date_rang": [254, 319, 349, 454, 456, 470, 478, 489, 784, 785, 887, 958, 1067, 1082, 1087, 1088, 1105, 1106], "date_right": [254, 349, 887, 958], "datetim": [17, 38, 41, 48, 56, 100, 137, 152, 160, 163, 165, 167, 178, 179, 180, 182, 192, 193, 196, 197, 210, 217, 237, 239, 252, 254, 281, 296, 319, 349, 352, 381, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 548, 597, 630, 650, 654, 656, 658, 660, 662, 665, 667, 669, 725, 728, 746, 767, 780, 781, 782, 784, 785, 786, 792, 800, 802, 829, 830, 842, 860, 868, 882, 887, 907, 958, 963, 964, 990, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1169, 1218, 1219, 1311, 1314, 1338, 1340, 1357, 1380, 1381], "datetime_format": [38, 48, 349, 958], "datetime_rang": [239, 349, 448, 451, 466, 467, 469, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 490, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 842, 882, 958, 1060, 1061, 1064, 1068, 1069, 1070, 1076, 1077, 1079, 1081, 1083, 1084, 1085, 1086, 1090, 1091, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104], "datetime_str": 476, "datetimeindex": 135, "david": 1386, "day_nam": [476, 479], "day_of_month": [454, 470, 489], "day_of_year": [454, 470, 489], "daylight": [239, 254, 281, 319, 349, 447, 455, 469, 474, 487, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 1068, 1086, 1091, 1104], "dayofweek": 1381, "dayofyear": 1381, "days_diff": 480, "db": [39, 150, 151, 349], "dbapi2": 150, "dbc": [690, 1276], "dbreadengin": 151, "dbwriteengin": [39, 349], "dbwritemod": [39, 349], "dd": [41, 349, 1380], "ddd": [1, 41, 349, 736, 738, 739], "dddd": 1380, "ddof": [297, 320, 349, 395, 400, 576, 582, 664, 665, 668, 669, 686, 754, 772, 774, 818, 819, 823, 831, 842, 918, 926, 958, 1004, 1009, 1197, 1203, 1250, 1252, 1272, 1347, 1357], "ddww": 1380, "de": 1380, "deal": [47, 51, 251, 349, 361, 363, 472, 473, 640, 725, 728, 757, 758, 759, 760, 783, 842, 958, 971, 972, 1089, 1090, 1232, 1311, 1314, 1357], "debug": [30, 892, 958, 1388], "decad": [1366, 1381], "decai": [495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357], "decemb": [479, 1096], "decim": [9, 11, 12, 28, 29, 38, 41, 48, 148, 149, 162, 349, 353, 670, 729, 842, 958, 964, 1253, 1315, 1357, 1379], "decimal_comma": [148, 149, 162], "decimal_separ": [9, 28], "declar": [130, 132, 133, 134, 136, 150, 157, 158, 166, 306, 311, 349, 832, 958, 964, 1366], "decod": [148, 149, 704], "decompos": [315, 349, 923, 958], "decompress": [47, 49, 51, 349, 958], "decor": [55, 57, 58, 59, 60, 178, 182, 258, 349, 589, 842, 853, 854, 1209, 1357], "dedic": [1, 131, 251, 283, 349, 964, 1385], "deem": [217, 349, 868, 958], "deepcopi": [211, 349, 861, 958, 1040, 1357], "def": [1, 55, 57, 58, 59, 60, 150, 176, 178, 182, 202, 272, 313, 349, 358, 634, 694, 697, 722, 756, 803, 842, 864, 900, 958, 964, 1280, 1283, 1388], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 62, 63, 64, 68, 71, 72, 73, 130, 131, 132, 133, 134, 135, 136, 137, 145, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 202, 217, 218, 221, 222, 225, 234, 238, 239, 240, 251, 253, 254, 262, 264, 271, 273, 281, 282, 283, 284, 285, 289, 292, 296, 297, 299, 304, 306, 307, 311, 314, 316, 317, 318, 320, 325, 334, 349, 360, 361, 363, 386, 393, 398, 406, 439, 441, 446, 458, 472, 473, 479, 492, 494, 495, 497, 498, 518, 530, 555, 559, 568, 573, 574, 576, 580, 582, 583, 588, 596, 597, 600, 603, 622, 623, 625, 630, 631, 637, 640, 644, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 675, 677, 686, 687, 696, 703, 715, 720, 721, 722, 725, 727, 728, 730, 732, 753, 754, 757, 759, 762, 766, 767, 768, 771, 772, 774, 781, 782, 783, 784, 785, 786, 789, 792, 796, 797, 798, 800, 801, 802, 808, 814, 817, 820, 823, 824, 826, 829, 830, 831, 832, 833, 842, 863, 864, 868, 869, 871, 872, 874, 881, 882, 886, 887, 896, 901, 903, 907, 911, 913, 914, 917, 918, 922, 924, 925, 926, 931, 933, 940, 958, 962, 964, 971, 972, 995, 1002, 1007, 1015, 1041, 1053, 1054, 1059, 1071, 1089, 1090, 1096, 1110, 1114, 1115, 1117, 1118, 1137, 1149, 1176, 1180, 1189, 1194, 1195, 1201, 1218, 1219, 1225, 1230, 1232, 1236, 1237, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1261, 1264, 1272, 1273, 1274, 1282, 1286, 1289, 1301, 1306, 1307, 1308, 1311, 1313, 1314, 1316, 1318, 1336, 1338, 1346, 1347, 1357, 1379, 1380, 1388], "default_match": [688, 700], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [284, 349], "defer": [202, 349, 352, 353, 1357, 1362], "defin": [38, 41, 48, 71, 74, 150, 157, 175, 176, 178, 210, 221, 222, 226, 239, 258, 269, 272, 281, 318, 335, 349, 424, 526, 555, 589, 634, 637, 649, 650, 654, 656, 658, 660, 662, 665, 667, 669, 702, 707, 715, 726, 733, 781, 782, 784, 785, 800, 801, 804, 824, 829, 830, 842, 860, 871, 872, 875, 882, 900, 907, 925, 941, 958, 962, 963, 964, 1033, 1144, 1176, 1209, 1230, 1241, 1288, 1293, 1301, 1312, 1319, 1357], "definit": [41, 75, 349, 538, 651, 842, 963, 964, 1159, 1242, 1357], "deflat": [36, 349], "deg": 1382, "degre": [297, 320, 349, 576, 582, 639, 664, 665, 668, 669, 686, 754, 764, 774, 818, 819, 823, 831, 842, 918, 926, 958, 1250, 1252, 1272, 1347, 1357, 1378], "delai": 95, "delet": [74, 1373, 1384], "delimit": [46, 48, 158, 166, 273, 304, 349, 687, 703, 958, 1273, 1289, 1333, 1357, 1380], "delta": [40, 152, 163, 195, 297, 320, 349, 576, 582, 664, 665, 668, 669, 686, 754, 774, 818, 819, 823, 831, 842, 854, 918, 926, 958, 1250, 1252, 1272, 1347, 1357], "delta_merge_opt": [40, 349], "delta_table_opt": [152, 163, 192], "delta_table_vers": 192, "delta_write_opt": [40, 349], "deltalak": [40, 152, 163, 170, 192, 349], "deltashar": 195, "deltat": [40, 152, 163, 349], "demo": [41, 349], "demonstr": [148, 509, 842, 964], "dens": [21, 237, 349, 640, 842, 1232, 1357], "densiti": [1357, 1362], "depend": [47, 52, 55, 61, 97, 150, 153, 159, 170, 207, 349, 379, 380, 545, 546, 589, 600, 637, 640, 786, 789, 792, 798, 842, 968, 988, 989, 1166, 1167, 1230, 1232, 1357, 1388], "deploi": [178, 182], "deprec": [40, 65, 148, 149, 175, 176, 177, 178, 182, 185, 208, 264, 307, 325, 330, 349, 453, 490, 511, 607, 644, 687, 695, 755, 764, 772, 773, 842, 857, 874, 896, 911, 924, 930, 931, 936, 958, 1066, 1075, 1076, 1107, 1136, 1236, 1273, 1281, 1338, 1357], "depth": 144, "desc": [964, 1366, 1369, 1373, 1375], "descend": [56, 290, 295, 349, 374, 394, 575, 630, 640, 674, 683, 684, 753, 765, 842, 912, 916, 958, 983, 1003, 1156, 1196, 1232, 1259, 1270, 1346, 1357], "describ": [178, 237, 349, 708, 958, 1294, 1357], "descript": [239, 349, 882, 958, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1383, 1386, 1387], "deseri": [144, 289, 349, 511, 603, 842, 911, 958], "deserializ": [218, 289, 349, 441, 603, 842, 869, 911, 958], "design": [306, 311, 349], "desir": [178, 253, 349, 398, 490, 580, 886, 958, 1007, 1107, 1201], "destin": 151, "detail": [61, 131, 150, 151, 171, 173, 206, 239, 318, 349, 479, 746, 842, 882, 925, 933, 958, 1096, 1340, 1357, 1388], "determin": [15, 38, 41, 48, 56, 64, 93, 144, 148, 149, 150, 153, 159, 160, 162, 167, 169, 209, 213, 232, 239, 251, 252, 258, 281, 312, 313, 319, 349, 419, 458, 459, 472, 473, 520, 580, 600, 637, 643, 645, 681, 689, 702, 725, 726, 728, 729, 748, 783, 801, 814, 817, 833, 842, 858, 865, 866, 873, 882, 907, 921, 927, 958, 1071, 1072, 1089, 1090, 1139, 1201, 1230, 1236, 1237, 1268, 1275, 1311, 1314, 1315, 1357], "dev": [205, 967, 1250, 1357], "develop": [151, 178, 182], "deviat": [297, 349, 497, 664, 665, 686, 823, 842, 918, 958, 1117, 1272, 1357, 1374], "devic": [306, 349, 863, 874, 901, 914, 933, 958, 1336, 1357], "devicememoryresourc": 933, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 57, 58, 83, 101, 105, 131, 132, 133, 134, 135, 136, 137, 149, 150, 151, 162, 175, 176, 178, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 409, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 730, 731, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 838, 842, 882, 907, 923, 925, 938, 941, 949, 958, 964, 1090, 1116, 1287, 1291, 1303, 1304, 1334, 1357, 1362, 1366, 1367, 1368, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1388], "df0": [265, 349, 897, 958, 1372], "df1": [56, 64, 171, 172, 224, 227, 265, 296, 321, 349, 897, 958, 1369, 1371, 1372, 1373, 1385], "df2": [56, 64, 171, 172, 224, 227, 321, 349, 1369, 1371, 1372, 1373, 1385], "df3": [56, 349], "df4": 349, "df5": 349, "df6": 349, "df_a": 1385, "df_a1": 64, "df_a2": 64, "df_a3": 64, "df_agg_nuniqu": [269, 349], "df_b": 1385, "df_current_batch": 149, "df_d1": 64, "df_d2": 64, "df_from_str_repr": [305, 349], "df_h1": 64, "df_h2": 64, "df_new_grid": [524, 842], "df_nuniqu": [269, 349], "df_original_grid": [524, 842], "df_panda": 1367, "df_pd": 131, "df_tempor": [654, 656, 658, 660, 662, 665, 667, 669, 842], "dfi": 206, "diagon": [64, 313, 349], "diagonal_relax": 64, "diagram": [903, 958], "dict": [31, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 57, 59, 61, 130, 132, 133, 134, 135, 136, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 178, 192, 193, 196, 197, 231, 251, 271, 282, 283, 284, 302, 303, 306, 311, 313, 349, 842, 958, 963, 964, 1127, 1357, 1370], "dictat": [145, 469, 842, 1086], "dictionari": [31, 38, 40, 41, 43, 47, 48, 49, 50, 51, 61, 87, 130, 132, 133, 134, 136, 144, 148, 149, 150, 151, 152, 155, 157, 158, 160, 161, 162, 163, 165, 166, 167, 192, 251, 271, 282, 283, 284, 302, 303, 306, 311, 349, 958, 963], "did": [447, 1060], "diff": [323, 349, 480, 481, 482, 483, 484, 485, 486, 569, 842, 928, 958, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1190, 1357], "differ": [41, 47, 100, 103, 124, 148, 153, 168, 171, 173, 202, 221, 227, 239, 240, 251, 253, 273, 281, 283, 284, 303, 306, 307, 313, 349, 442, 454, 469, 470, 473, 479, 488, 494, 509, 518, 550, 569, 571, 580, 589, 622, 623, 625, 630, 644, 645, 725, 751, 789, 792, 798, 842, 855, 871, 872, 874, 882, 886, 907, 958, 962, 964, 1035, 1055, 1067, 1086, 1087, 1090, 1096, 1105, 1112, 1121, 1137, 1171, 1190, 1192, 1209, 1218, 1219, 1221, 1236, 1237, 1311, 1357, 1381, 1383, 1385], "digit": [72, 634, 670, 671, 697, 842, 964, 1253, 1254, 1276, 1283, 1357, 1388], "dimens": [130, 132, 134, 136, 157, 158, 166, 349, 646, 842, 958, 1238, 1338, 1357], "dimension": [132, 134, 136, 307, 349, 958, 1357], "direct": [41, 151, 160, 164, 167, 292, 306, 317, 349, 393, 573, 675, 842, 913, 958, 1002, 1194, 1261, 1357], "directli": [6, 31, 41, 63, 64, 150, 178, 182, 202, 284, 306, 349, 495, 497, 498, 645, 817, 842, 864, 958, 1115, 1117, 1118, 1237, 1336, 1357, 1369, 1385, 1388], "directori": [41, 47, 48, 49, 50, 51, 52, 54, 145, 160, 162, 165, 167, 349, 958], "dirpath": [36, 38, 43, 44, 47, 162, 349], "disabl": [47, 51, 55, 96, 97, 160, 165, 179, 251, 349, 863, 958], "disable_string_cach": 97, "disallow": 178, "discard": [230, 277, 349, 505, 842, 878, 904, 958, 1125, 1357], "disco": [699, 701, 1285, 1287], "discont": [699, 701, 1285, 1287], "discourag": [589, 842], "discoveri": [273, 349], "discret": [439, 442, 492, 550, 569, 637, 842, 1053, 1055, 1110, 1171, 1190, 1230, 1357], "disk": [47, 48, 49, 50, 51, 154, 349, 604, 855, 914, 958], "dispatch": 964, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 217, 237, 349, 868, 874, 914, 958], "distanc": [254, 349, 887, 958], "distinct": [41, 182, 271, 273, 327, 349, 399, 529, 530, 532, 581, 640, 649, 786, 842, 1008, 1148, 1149, 1151, 1202, 1232, 1241, 1357, 1374, 1384, 1386, 1388], "distinct_count": [47, 51, 349, 958], "distinguish": [479, 1096], "distribut": [538, 681, 842, 903, 958, 1159, 1268, 1357], "div": 1378, "diverg": [62, 129], "divid": [21, 439, 474, 487, 495, 497, 498, 509, 538, 637, 640, 842, 1053, 1091, 1104, 1115, 1117, 1118, 1159, 1230, 1357, 1374, 1379], "divis": [509, 749, 842, 1379], "divisor": [297, 320, 349, 576, 582, 664, 665, 668, 669, 686, 754, 774, 818, 819, 823, 831, 842, 918, 926, 958, 1250, 1252, 1272, 1347, 1357], "dl": [311, 349], "do": [1, 41, 48, 49, 50, 51, 56, 62, 63, 129, 132, 133, 136, 148, 160, 162, 167, 171, 172, 173, 174, 207, 217, 219, 227, 250, 253, 254, 273, 278, 301, 313, 317, 349, 352, 438, 446, 552, 588, 711, 712, 720, 721, 722, 772, 814, 817, 833, 842, 859, 863, 864, 868, 870, 874, 886, 887, 892, 901, 903, 905, 914, 933, 958, 964, 1052, 1059, 1121, 1173, 1297, 1298, 1306, 1307, 1308, 1341, 1357, 1362], "do_polars_oper": 30, "do_someth": 150, "do_various_th": 202, "doc": [40, 43, 44, 131, 151, 154, 156, 171, 173, 204, 205, 215, 349, 966, 967], "document": [33, 100, 151, 204, 349, 353, 476, 479, 705, 725, 727, 728, 732, 838, 933, 966, 1035, 1093, 1096, 1291, 1311, 1313, 1314, 1318], "doe": [11, 38, 40, 48, 49, 50, 51, 56, 62, 63, 118, 130, 132, 133, 134, 136, 137, 148, 149, 150, 151, 152, 153, 157, 158, 162, 163, 166, 168, 212, 227, 234, 239, 240, 252, 253, 277, 282, 283, 284, 314, 323, 326, 349, 352, 353, 490, 505, 509, 518, 580, 589, 689, 699, 701, 713, 721, 722, 751, 838, 842, 862, 863, 864, 868, 874, 878, 882, 886, 892, 901, 904, 914, 922, 928, 932, 958, 1042, 1107, 1121, 1125, 1137, 1263, 1275, 1285, 1287, 1299, 1357, 1362, 1380], "doesn": [40, 148, 162, 239, 254, 349, 492, 842, 882, 887, 958, 1110, 1357], "dog": [688, 731, 734, 771, 1274, 1317, 1320], "doi": 1381, "dollar": [711, 712, 1297, 1298], "domain": [1, 697, 1283], "don": [64, 239, 254, 258, 314, 317, 349, 438, 552, 589, 630, 842, 882, 887, 922, 958, 964, 1052, 1173, 1209, 1357], "done": [149, 168, 202, 208, 254, 349, 364, 365, 630, 842, 857, 860, 887, 958, 974, 1357], "dot": [56, 604, 838, 842, 903, 914, 958, 1357], "doubl": [308, 349, 711, 712, 1297, 1298], "dow": 1381, "down": [162, 165, 166, 167, 168, 210, 349, 420, 508, 842, 1128, 1357], "download": [158, 162, 165, 166, 604, 914, 958], "downstream": [307, 349, 674, 842, 1259, 1357], "dr": 164, "drago": [702, 1288], "dragon": 702, "dragonfr": 1288, "dragonfruit": [702, 715, 726, 1288, 1301, 1312], "dramat": 153, "draw": [21, 26, 178, 182, 1388], "drawback": 838, "drawfn": 1388, "drawing_charact": 21, "dremio": 150, "driver": [39, 150, 151, 349], "drop": [1, 133, 220, 221, 222, 258, 277, 314, 323, 349, 442, 444, 445, 550, 551, 637, 842, 871, 872, 904, 922, 928, 958, 1055, 1057, 1058, 1171, 1172, 1230, 1357, 1384], "drop_dupl": [314, 349, 922, 958], "drop_empty_col": [153, 159], "drop_empty_row": [153, 159], "drop_first": [304, 349, 1333, 1357], "drop_in_plac": 349, "drop_nan": [349, 445, 842, 958, 1058, 1357], "drop_nul": [349, 444, 842, 958, 1057, 1357], "dset": 168, "dst": [474, 487, 1091, 1104], "dst_offset": [447, 1060], "dt": [1, 41, 56, 153, 159, 281, 349, 650, 786, 842, 851, 907, 958, 964, 1365, 1380, 1381], "dt1": 1380, "dt2": 1380, "dtm": [41, 349, 450, 479, 964, 1063, 1096, 1380], "dtm_iso": 479, "dtm_iso_strict": 479, "dtype": [11, 41, 55, 59, 65, 71, 75, 87, 96, 97, 107, 130, 132, 134, 136, 137, 148, 149, 150, 151, 153, 157, 158, 159, 162, 166, 175, 176, 177, 178, 182, 204, 206, 210, 213, 225, 239, 254, 281, 305, 306, 307, 308, 311, 317, 326, 349, 406, 420, 421, 422, 423, 424, 425, 436, 437, 479, 490, 499, 512, 547, 555, 586, 588, 589, 596, 635, 642, 643, 650, 676, 678, 704, 725, 742, 746, 752, 762, 769, 788, 790, 792, 796, 797, 799, 800, 801, 802, 803, 804, 814, 817, 824, 833, 842, 860, 865, 882, 887, 907, 932, 958, 963, 964, 966, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1040, 1050, 1051, 1054, 1055, 1096, 1107, 1114, 1146, 1164, 1165, 1168, 1176, 1200, 1207, 1209, 1228, 1239, 1262, 1265, 1290, 1311, 1328, 1335, 1336, 1338, 1339, 1340, 1341, 1345, 1357, 1385, 1388], "dtype_format": [41, 349], "dtypekind": 206, "dtypelik": [204, 966], "dtypeoper": [1, 59], "dubiou": 100, "due": [239, 254, 281, 284, 319, 349, 360, 455, 469, 474, 487, 613, 614, 616, 618, 620, 621, 650, 654, 656, 658, 660, 662, 665, 667, 669, 767, 781, 782, 784, 785, 829, 830, 842, 860, 882, 887, 907, 958, 1068, 1086, 1091, 1104], "dummi": [304, 349, 1333, 1357], "dump": 144, "duplic": [56, 105, 246, 253, 254, 255, 314, 318, 349, 360, 527, 613, 637, 832, 842, 886, 887, 888, 922, 925, 958, 1145, 1230, 1357, 1386], "duplicateerror": [637, 842, 1230, 1357], "dur": [255, 349, 888, 958], "durat": [202, 254, 319, 349, 447, 455, 479, 480, 481, 482, 483, 484, 485, 486, 490, 496, 746, 781, 782, 784, 785, 829, 830, 842, 887, 958, 963, 964, 1060, 1068, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1116, 1338, 1340, 1357], "dure": [55, 104, 148, 149, 162, 202, 227, 349, 1121, 1357], "dutch": [446, 458, 767, 1059, 1071], "dynam": [145, 239, 349, 398, 580, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 842, 882, 958, 962, 1007, 1201], "dynamicgroupbi": [239, 349], "e": [11, 34, 36, 38, 40, 43, 44, 47, 48, 144, 148, 154, 156, 160, 165, 167, 168, 180, 218, 230, 237, 241, 250, 254, 257, 300, 301, 307, 317, 349, 358, 441, 492, 496, 499, 526, 583, 589, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 676, 681, 700, 721, 722, 733, 788, 804, 821, 832, 842, 869, 878, 887, 890, 905, 958, 962, 964, 1110, 1116, 1144, 1268, 1286, 1319, 1357, 1375, 1380, 1388], "e101": [41, 349], "e_filt": [600, 602], "e_sum_ov": [600, 602], "e_sum_slic": [600, 602], "each": [38, 41, 48, 52, 53, 54, 56, 65, 72, 83, 149, 150, 153, 158, 166, 171, 172, 173, 174, 176, 214, 216, 223, 230, 237, 238, 239, 252, 254, 258, 271, 273, 277, 281, 283, 285, 306, 311, 315, 318, 319, 327, 328, 330, 332, 334, 335, 343, 349, 374, 419, 423, 424, 439, 458, 474, 487, 505, 529, 532, 558, 561, 568, 578, 585, 589, 637, 640, 648, 649, 657, 661, 672, 677, 684, 697, 701, 702, 706, 707, 715, 717, 718, 726, 733, 748, 762, 765, 771, 796, 797, 801, 824, 832, 842, 863, 866, 867, 873, 878, 882, 887, 901, 904, 907, 923, 925, 934, 936, 938, 940, 941, 949, 958, 983, 1032, 1033, 1039, 1053, 1071, 1091, 1104, 1148, 1151, 1179, 1182, 1189, 1199, 1230, 1232, 1240, 1241, 1255, 1264, 1283, 1287, 1288, 1292, 1293, 1301, 1303, 1304, 1312, 1319, 1327, 1357, 1374, 1380, 1385, 1386, 1388], "eager": [95, 239, 254, 273, 317, 349, 448, 451, 454, 456, 466, 467, 469, 470, 473, 474, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 654, 656, 658, 660, 662, 665, 667, 669, 762, 766, 768, 772, 774, 781, 782, 784, 785, 792, 796, 797, 800, 801, 814, 817, 820, 821, 824, 829, 830, 833, 841, 842, 882, 887, 892, 958, 963, 1060, 1061, 1064, 1067, 1068, 1069, 1070, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1385], "eagerli": [580, 1366], "ear": [715, 726, 1301], "earlier": [254, 349, 887, 958], "earliest": [239, 349, 472, 473, 725, 728, 783, 882, 950, 958, 1089, 1090, 1311, 1314], "easi": 202, "easiest": 207, "easili": [56, 287, 311, 323, 328, 349, 824, 838, 909, 928, 934, 958], "east": [74, 167, 255, 349, 888, 958], "ebf1d": [41, 349], "edg": [520, 842, 1139, 1357], "eee": [1, 41, 349, 964], "ef": 712, "effect": [41, 232, 239, 349, 455, 509, 589, 615, 617, 619, 772, 842, 882, 931, 932, 958, 1060, 1068], "effici": [131, 150, 250, 252, 349, 588, 842], "efgh": 1380, "eg": [18, 26, 27, 41, 64, 151, 202, 306, 349, 474, 725, 728, 749, 842, 964, 1311, 1314], "egnaro": 1380, "either": [62, 63, 87, 145, 178, 249, 253, 254, 255, 271, 281, 282, 306, 307, 349, 496, 588, 635, 637, 650, 725, 757, 765, 769, 824, 842, 863, 864, 886, 887, 888, 890, 907, 958, 962, 964, 1116, 1228, 1230, 1311, 1357, 1370, 1388], "element": [14, 15, 26, 173, 174, 177, 178, 180, 182, 207, 209, 216, 249, 273, 282, 295, 297, 312, 320, 349, 366, 367, 368, 369, 370, 371, 382, 383, 418, 419, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 444, 445, 500, 501, 505, 518, 522, 530, 541, 549, 551, 552, 553, 556, 561, 569, 570, 571, 572, 576, 582, 584, 585, 588, 589, 630, 631, 640, 643, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 673, 678, 679, 680, 684, 685, 686, 717, 718, 729, 744, 745, 747, 748, 754, 765, 774, 800, 818, 819, 823, 831, 842, 858, 867, 916, 918, 921, 926, 958, 975, 976, 977, 978, 979, 980, 991, 992, 1027, 1037, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1057, 1058, 1119, 1120, 1125, 1126, 1138, 1141, 1149, 1158, 1160, 1162, 1163, 1170, 1172, 1173, 1174, 1177, 1182, 1190, 1191, 1192, 1193, 1205, 1206, 1209, 1225, 1232, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1257, 1265, 1266, 1267, 1271, 1272, 1303, 1304, 1315, 1329, 1330, 1331, 1335, 1342, 1343, 1347, 1357, 1374, 1375], "elementwis": [588, 630, 652, 653, 655, 657, 659, 661, 664, 666, 668, 842, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1357], "elig": [892, 958], "elimin": [62, 129, 538, 842, 1159, 1357], "elis": [265, 349, 897, 958], "ellips": 21, "ellipsi": [237, 349], "elppa": 1380, "els": 149, "email": [697, 1283], "email_part": [697, 1283], "emphas": [349, 353], "emploi": 964, "empti": [14, 36, 38, 48, 109, 133, 148, 149, 153, 159, 162, 211, 212, 239, 264, 316, 349, 687, 695, 802, 820, 861, 862, 882, 896, 924, 958, 963, 964, 1040, 1042, 1126, 1146, 1160, 1273, 1281, 1357], "en": [21, 41, 349], "enabl": [29, 30, 47, 51, 55, 62, 63, 96, 97, 152, 160, 163, 165, 167, 171, 172, 173, 174, 186, 204, 287, 308, 323, 349, 361, 363, 644, 645, 674, 689, 699, 701, 713, 753, 838, 842, 863, 864, 874, 901, 909, 914, 928, 958, 966, 971, 972, 1236, 1237, 1259, 1275, 1285, 1287, 1299, 1339, 1346, 1357], "enable_string_cach": 96, "enclos": [511, 842], "encod": [68, 74, 86, 144, 148, 149, 162, 304, 349, 352, 403, 511, 648, 691, 737, 842, 1012, 1240, 1277, 1333, 1357, 1362], "encompass": [520, 842, 1139, 1357], "encount": [120, 148, 149, 162, 239, 349, 622, 623, 704, 705, 772, 776, 790, 842, 882, 958, 1218, 1219, 1290, 1291, 1357], "end": [38, 41, 48, 148, 149, 162, 239, 245, 273, 349, 402, 405, 408, 421, 425, 447, 474, 499, 524, 525, 574, 688, 693, 697, 702, 709, 715, 719, 720, 721, 724, 762, 767, 780, 781, 782, 783, 784, 785, 788, 796, 797, 800, 801, 829, 830, 832, 838, 842, 882, 885, 901, 958, 964, 1014, 1029, 1034, 1060, 1091, 1142, 1143, 1156, 1195, 1279, 1283, 1288, 1295, 1301, 1305, 1306, 1307, 1312, 1357, 1380], "endian": [406, 1015], "endpoint": [187, 439, 637, 800, 842, 1053, 1230, 1357], "ends_a": 1380, "ends_in_digit": 1380, "ends_with": [402, 408, 425, 688, 719, 964, 1034, 1305, 1378], "ends_with_expr": 405, "ends_with_lit": 405, "engin": [10, 15, 39, 48, 49, 50, 51, 62, 63, 95, 143, 150, 151, 153, 159, 184, 238, 253, 258, 307, 314, 335, 349, 588, 821, 842, 863, 864, 874, 881, 886, 892, 896, 901, 914, 922, 933, 941, 955, 958, 962, 1209, 1338, 1357, 1369, 1385], "engine_opt": [39, 153, 349], "enginetyp": [48, 49, 50, 51, 62, 63, 863, 864, 874, 901, 914, 958], "enough": [552, 681, 842, 1173, 1268, 1357], "ensur": [11, 41, 52, 54, 95, 145, 151, 177, 180, 204, 230, 238, 271, 273, 277, 282, 307, 349, 526, 588, 842, 878, 881, 892, 904, 933, 958, 964, 966, 1338, 1357], "enter": 202, "entir": [41, 153, 159, 349], "entri": [202, 349, 958, 963, 1385], "entropi": [842, 1357], "enumer": [74, 135, 148, 149, 153, 159, 162, 252, 349], "env": [4, 183], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 145, 158, 160, 162, 165, 166, 167, 181, 184, 187, 192, 306, 349, 863, 864, 874, 901, 914, 958], "eol_char": [148, 149, 162], "eparg": 1380, "epoch": [70, 71, 792, 1381], "epoch_": [456, 1069], "epoch_n": [456, 1069], "epochtimeunit": [456, 792, 1069], "eq": [230, 277, 349, 494, 505, 842, 878, 904, 958, 1112, 1357], "eq_miss": [842, 1221, 1357], "equal": [55, 97, 148, 149, 162, 171, 172, 173, 174, 239, 254, 255, 265, 295, 349, 439, 487, 493, 494, 514, 540, 580, 625, 637, 643, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 684, 709, 710, 713, 735, 765, 800, 818, 819, 832, 838, 842, 878, 882, 887, 888, 897, 904, 916, 958, 1053, 1091, 1112, 1201, 1221, 1230, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1295, 1296, 1299, 1321, 1357, 1374, 1377, 1388], "equival": [41, 64, 130, 132, 133, 134, 136, 157, 158, 166, 239, 249, 269, 349, 358, 362, 424, 493, 494, 496, 509, 514, 516, 540, 587, 609, 611, 624, 625, 626, 629, 635, 707, 731, 733, 734, 741, 749, 756, 842, 882, 958, 1033, 1111, 1112, 1116, 1132, 1134, 1158, 1161, 1208, 1220, 1221, 1293, 1317, 1319, 1320, 1357, 1367, 1375, 1387], "err": 698, "error": [15, 40, 63, 64, 95, 115, 119, 121, 132, 133, 136, 143, 148, 149, 153, 160, 162, 167, 254, 273, 282, 307, 349, 360, 385, 386, 403, 446, 555, 557, 559, 580, 613, 645, 688, 691, 696, 698, 700, 704, 705, 725, 727, 728, 732, 842, 860, 864, 887, 933, 941, 958, 994, 995, 1012, 1059, 1176, 1178, 1180, 1237, 1274, 1277, 1282, 1284, 1286, 1290, 1291, 1311, 1313, 1314, 1318, 1338, 1357, 1383], "escap": [98, 148, 149, 151, 162, 694, 711, 712, 1280, 1297, 1298], "esp": 15, "especi": [176, 649, 842, 958, 1241, 1357], "espresso": 964, "est": 784, "establish": [150, 202], "estim": [148, 149, 208, 225, 349, 365, 497, 498, 538, 761, 842, 857, 958, 974, 1114, 1117, 1118, 1159, 1357], "estimated_s": [349, 1357], "etc": [22, 40, 41, 145, 148, 152, 153, 154, 156, 163, 164, 349, 589, 842, 964, 1256, 1258, 1357, 1381], "eu": [163, 164], "eur": [237, 349, 1388], "europ": [451, 455, 473, 1064, 1068, 1090], "eval": [305, 349, 588, 589, 787, 842, 1209, 1335, 1357], "evalu": [48, 49, 50, 51, 167, 228, 230, 254, 277, 349, 362, 375, 377, 378, 410, 411, 412, 413, 415, 416, 438, 505, 523, 543, 544, 580, 629, 630, 757, 759, 762, 766, 768, 772, 774, 781, 782, 784, 785, 787, 796, 797, 800, 801, 814, 817, 820, 824, 829, 830, 832, 833, 842, 863, 878, 884, 886, 887, 904, 958, 984, 986, 987, 1019, 1020, 1021, 1022, 1024, 1025, 1052, 1125, 1164, 1165, 1348, 1357, 1377], "even": [38, 48, 148, 253, 349, 496, 634, 637, 842, 886, 958, 964, 1116, 1230, 1357], "evenli": [239, 349, 800, 801, 882, 958], "event": [63, 864, 958], "eventu": [39, 349], "ever": [630, 842], "everi": [15, 38, 48, 148, 149, 153, 159, 162, 233, 239, 303, 319, 349, 377, 378, 379, 380, 383, 385, 391, 434, 435, 436, 437, 438, 474, 487, 501, 513, 545, 546, 550, 553, 556, 557, 558, 566, 569, 574, 578, 649, 695, 776, 777, 842, 880, 882, 958, 986, 987, 988, 989, 992, 994, 1000, 1048, 1049, 1050, 1051, 1052, 1091, 1104, 1120, 1131, 1166, 1167, 1171, 1174, 1177, 1178, 1179, 1187, 1190, 1195, 1199, 1241, 1281, 1357], "everybodi": [689, 713, 1275, 1299], "everyth": 964, "ew": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "ewm_mean": [842, 1357], "ewm_mean_bi": [842, 1357], "ewm_std": [842, 1357], "ewm_var": [842, 1357], "ewma": [496, 842, 1116, 1357], "exact": [173, 176, 178, 182, 254, 293, 349, 365, 509, 695, 723, 724, 725, 727, 728, 749, 842, 887, 958, 1281, 1311, 1313, 1314], "exactli": [132, 133, 136, 171, 172, 173, 174, 177, 178, 182, 349, 717, 718, 723, 724, 786, 958, 1263, 1303, 1304, 1309, 1310, 1357], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 148, 149, 150, 151, 152, 153, 157, 158, 159, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 854, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357, 1362, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1386, 1387], "exc_tb": 1385, "exc_typ": 1385, "exc_val": 1385, "exce": [237, 349], "excel": [37, 41, 147, 153, 349, 854], "excelspreadsheetengin": 153, "except": [0, 219, 234, 241, 254, 257, 278, 300, 349, 645, 702, 726, 788, 842, 854, 870, 887, 905, 958, 964, 1028, 1138, 1163, 1237, 1288, 1312, 1329, 1338, 1357, 1384], "exclud": [178, 182, 239, 349, 419, 434, 437, 446, 458, 526, 596, 748, 767, 838, 842, 882, 958, 964, 1059, 1071, 1144, 1357], "excluded_dtyp": [178, 179, 182], "exclus": [282, 349, 756, 762, 796, 797, 842], "execut": [10, 40, 48, 49, 50, 51, 55, 62, 63, 64, 95, 145, 150, 151, 256, 296, 349, 441, 552, 753, 821, 832, 842, 859, 863, 864, 869, 874, 892, 901, 903, 914, 917, 933, 958, 1173, 1346, 1357, 1367, 1368, 1369, 1371, 1385, 1387], "execute_glob": 1385, "execute_opt": [150, 151], "exist": [1, 39, 40, 41, 42, 56, 74, 105, 152, 160, 163, 167, 178, 219, 234, 273, 278, 313, 318, 323, 324, 349, 360, 402, 405, 408, 450, 473, 711, 712, 770, 842, 866, 870, 873, 905, 908, 925, 927, 928, 929, 958, 964, 1063, 1090, 1297, 1298, 1387], "existing_t": 1387, "existing_table_path": [40, 349], "exit": [55, 96, 202, 1372, 1385], "exp": [495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357, 1378], "exp_a": 1379, "expand": [145, 148, 160, 162, 167, 501, 594, 598, 643, 739, 842, 964, 1120, 1357], "expand_selector": 964, "expans": 736, "expect": [38, 40, 43, 47, 48, 49, 50, 51, 54, 72, 78, 110, 118, 126, 148, 150, 152, 158, 160, 162, 163, 165, 166, 167, 172, 174, 192, 349, 580, 589, 802, 842, 890, 892, 958], "expens": [148, 149, 158, 160, 162, 166, 167, 181, 183, 251, 258, 282, 283, 284, 313, 314, 349, 589, 842, 866, 868, 873, 908, 922, 927, 958, 1121, 1209, 1357, 1388], "experiment": [255, 311, 349, 800, 801, 888, 928, 958], "expiri": [38, 40, 43, 47, 48, 49, 50, 51, 152, 158, 160, 162, 163, 165, 166, 167, 192, 349, 958], "explain": [129, 207, 256, 349, 863, 958, 1384], "explainformat": [874, 958], "explicit": [41, 104, 150, 162, 176, 296, 318, 349, 479, 816, 917, 925, 958, 1096], "explicitli": [74, 104, 151, 176, 178, 202, 234, 253, 349, 644, 824, 842, 853, 886, 958, 1385], "explod": [145, 349, 419, 507, 630, 646, 748, 842, 958, 1238, 1357, 1375], "explor": [217, 349, 868, 958], "expon": [635, 842, 1228, 1357, 1379], "exponenti": [495, 496, 497, 498, 500, 635, 842, 1115, 1116, 1117, 1118, 1119, 1357, 1379], "export": [41, 43, 44, 49, 205, 251, 252, 283, 284, 301, 303, 306, 349, 838, 958, 964, 967, 1332, 1357], "expos": 854, "expr": [1, 52, 54, 56, 57, 58, 59, 60, 143, 145, 226, 228, 229, 253, 254, 255, 269, 273, 282, 287, 288, 306, 311, 323, 324, 349, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 842, 843, 844, 847, 848, 849, 850, 851, 875, 876, 877, 886, 887, 888, 902, 909, 910, 928, 929, 958, 964, 1052, 1111, 1112, 1116, 1123, 1124, 1130, 1132, 1134, 1161, 1173, 1179, 1195, 1199, 1208, 1220, 1221, 1274, 1279, 1286, 1305, 1357, 1383], "expr1": [1377, 1385], "expr2": [1377, 1385], "expr_unique_subset": [269, 349], "express": [0, 8, 48, 49, 50, 51, 52, 54, 62, 63, 129, 143, 145, 175, 178, 182, 209, 226, 228, 230, 238, 244, 253, 254, 258, 269, 273, 277, 282, 287, 288, 292, 295, 306, 311, 312, 323, 324, 326, 328, 335, 349, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 374, 375, 379, 380, 381, 382, 383, 386, 397, 402, 403, 404, 405, 406, 407, 408, 419, 421, 423, 424, 425, 428, 429, 430, 431, 432, 438, 439, 440, 441, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 499, 501, 502, 504, 505, 509, 511, 512, 514, 515, 516, 517, 523, 526, 527, 528, 529, 530, 531, 532, 540, 541, 545, 546, 548, 549, 552, 553, 559, 561, 579, 580, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 609, 611, 613, 614, 616, 618, 620, 621, 624, 625, 627, 629, 630, 634, 635, 636, 637, 639, 643, 644, 645, 646, 648, 649, 672, 673, 674, 677, 679, 680, 682, 684, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 711, 712, 713, 715, 716, 717, 718, 726, 730, 740, 741, 744, 745, 748, 749, 750, 752, 753, 755, 756, 757, 758, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 811, 814, 816, 817, 818, 819, 820, 822, 824, 826, 828, 829, 830, 832, 833, 838, 841, 854, 858, 863, 864, 874, 875, 878, 881, 886, 887, 901, 904, 909, 910, 913, 914, 916, 921, 928, 929, 930, 932, 934, 941, 958, 964, 991, 1041, 1052, 1059, 1063, 1096, 1111, 1112, 1116, 1122, 1132, 1134, 1144, 1161, 1170, 1173, 1208, 1209, 1220, 1221, 1236, 1237, 1257, 1261, 1274, 1275, 1276, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1297, 1298, 1299, 1312, 1316, 1357, 1375, 1377, 1379, 1380, 1384], "exprmetanamespac": [593, 599], "ext": [52, 53, 54, 150], "extend": [0, 133, 321, 349, 502, 842, 854, 962, 973, 1122, 1357], "extend_const": [842, 1357], "extens": [308, 349, 1339, 1357], "extern": [199, 930, 958], "external_shallow_clon": 199, "extra": [40, 145, 148, 149, 152, 154, 156, 160, 162, 163, 164, 167, 227, 239, 349, 842, 882, 958, 1121, 1357], "extract": [137, 207, 296, 349, 449, 452, 454, 457, 460, 461, 462, 463, 464, 465, 468, 470, 471, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 634, 697, 698, 699, 704, 705, 715, 717, 842, 1062, 1065, 1066, 1067, 1070, 1073, 1077, 1078, 1079, 1081, 1082, 1085, 1087, 1088, 1092, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1108, 1283, 1284, 1285, 1290, 1291, 1301, 1378], "extract_mani": [701, 1287], "extract_numb": [634, 842], "extracted_nr": 697, "extrem": [502, 652, 842, 1122, 1243, 1357], "extrema": [676, 842, 1262, 1357], "f": [52, 57, 149, 150, 230, 237, 252, 301, 307, 313, 317, 349, 358, 398, 407, 580, 676, 695, 725, 728, 770, 842, 878, 958, 964, 1007, 1201, 1281, 1311, 1314, 1357, 1362, 1375], "f32": [1, 59, 210, 296, 305, 311, 349, 676, 821, 842, 860, 917, 958, 964, 1207, 1357, 1383], "f4": [307, 349], "f5ed2452": [41, 349], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 56, 58, 60, 64, 83, 95, 131, 133, 157, 168, 175, 178, 210, 211, 212, 215, 217, 218, 219, 221, 223, 228, 229, 232, 236, 237, 238, 239, 244, 245, 253, 254, 260, 261, 262, 263, 267, 273, 274, 275, 294, 295, 297, 299, 311, 320, 323, 328, 331, 333, 336, 337, 338, 339, 341, 342, 349, 357, 360, 366, 367, 368, 369, 370, 371, 389, 395, 400, 407, 420, 426, 427, 429, 430, 431, 439, 440, 444, 445, 475, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 508, 509, 514, 516, 524, 525, 533, 534, 535, 536, 538, 540, 552, 563, 564, 576, 582, 583, 584, 585, 587, 590, 591, 592, 608, 611, 613, 622, 623, 624, 625, 631, 635, 637, 638, 639, 640, 644, 645, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 678, 679, 680, 681, 685, 686, 740, 744, 745, 749, 754, 763, 764, 768, 770, 772, 774, 787, 788, 800, 801, 804, 807, 808, 809, 821, 823, 831, 838, 842, 860, 861, 868, 870, 871, 876, 877, 881, 882, 885, 886, 887, 894, 895, 902, 916, 918, 926, 928, 930, 934, 937, 939, 942, 943, 944, 945, 947, 948, 958, 964, 975, 976, 977, 978, 979, 980, 998, 1004, 1009, 1016, 1037, 1038, 1043, 1044, 1045, 1053, 1054, 1057, 1058, 1092, 1115, 1116, 1117, 1118, 1119, 1123, 1128, 1139, 1142, 1143, 1173, 1184, 1185, 1197, 1203, 1204, 1205, 1206, 1225, 1228, 1230, 1232, 1237, 1242, 1243, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1254, 1265, 1266, 1267, 1271, 1330, 1331, 1345, 1357, 1366, 1374, 1375, 1379, 1382, 1385, 1388], "f_string": 791, "fa1e": [730, 1316], "face": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 958], "facil": 150, "facilit": [213, 349], "factor": [495, 497, 498, 746, 842, 1115, 1117, 1118, 1340, 1357], "fail": [38, 39, 40, 43, 47, 48, 49, 50, 51, 131, 152, 154, 158, 160, 162, 163, 165, 166, 167, 192, 206, 307, 314, 349, 375, 477, 580, 725, 727, 728, 732, 842, 922, 958, 1209, 1311, 1313, 1314, 1318, 1338, 1357, 1383], "fall": [167, 439, 637, 842, 863, 874, 901, 914, 933, 958, 1053, 1230, 1357, 1374], "fallback": [131, 153], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 38, 40, 41, 47, 48, 49, 50, 51, 52, 56, 62, 63, 64, 129, 131, 132, 133, 135, 136, 137, 143, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 206, 209, 210, 211, 212, 217, 224, 230, 232, 236, 237, 238, 239, 243, 244, 246, 247, 248, 251, 253, 254, 256, 261, 262, 268, 269, 271, 273, 274, 277, 282, 283, 284, 285, 287, 290, 293, 295, 296, 299, 302, 304, 307, 308, 312, 313, 314, 318, 319, 321, 323, 331, 333, 336, 337, 339, 342, 349, 361, 362, 363, 374, 377, 378, 381, 385, 386, 394, 399, 402, 405, 408, 419, 420, 421, 425, 433, 434, 435, 436, 437, 438, 439, 446, 458, 459, 475, 492, 493, 494, 495, 497, 498, 516, 517, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 548, 552, 555, 557, 559, 568, 575, 580, 581, 587, 588, 589, 593, 595, 596, 597, 599, 601, 604, 605, 624, 625, 627, 629, 630, 632, 633, 637, 640, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 672, 674, 676, 681, 683, 684, 687, 688, 689, 690, 693, 699, 700, 701, 703, 704, 711, 712, 713, 716, 717, 719, 725, 727, 728, 730, 748, 750, 753, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 771, 772, 774, 775, 776, 781, 782, 784, 785, 790, 796, 797, 800, 801, 802, 804, 808, 814, 817, 820, 821, 824, 826, 829, 830, 832, 833, 842, 858, 860, 861, 862, 863, 864, 868, 874, 878, 881, 882, 886, 887, 890, 892, 901, 904, 909, 912, 914, 916, 917, 921, 922, 925, 928, 933, 937, 939, 942, 943, 945, 948, 958, 963, 964, 971, 972, 983, 986, 987, 990, 994, 995, 1003, 1008, 1011, 1012, 1014, 1017, 1028, 1029, 1031, 1034, 1036, 1039, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1059, 1071, 1072, 1092, 1112, 1113, 1115, 1117, 1118, 1125, 1127, 1133, 1135, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1164, 1165, 1169, 1173, 1176, 1178, 1180, 1189, 1196, 1202, 1215, 1221, 1223, 1226, 1227, 1230, 1232, 1233, 1234, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1259, 1263, 1268, 1270, 1273, 1274, 1275, 1276, 1279, 1285, 1286, 1287, 1289, 1290, 1297, 1298, 1299, 1302, 1303, 1305, 1311, 1313, 1314, 1316, 1333, 1338, 1339, 1343, 1346, 1348, 1357, 1367, 1369, 1375, 1380, 1385], "far": [41, 349], "fashion": [253, 349], "fast": [47, 49, 51, 145, 181, 183, 349, 502, 674, 842, 958, 962, 1122, 1259, 1357, 1388], "fast_executemani": [39, 349], "faster": [48, 49, 50, 51, 62, 63, 129, 150, 153, 227, 307, 317, 349, 589, 751, 842, 863, 864, 874, 901, 914, 958, 1121, 1209, 1357], "fastexcel": [153, 170], "favor": [39, 349], "fay": 144, "feat1": [306, 311, 349], "feat2": [306, 311, 349], "feather": [43, 154, 165, 349, 854], "featur": [1, 47, 61, 72, 78, 164, 306, 311, 349], "feature_0": [930, 958], "feature_0_train": [930, 958], "feature_1": [930, 958], "feature_nam": [311, 349], "feb": [170, 1380], "februari": 1380, "fed": 721, "feel": [689, 713, 1275, 1299], "fetch": [139, 863, 958], "fetch_california_h": [311, 349], "few": [237, 349], "fewer": [702, 726, 958, 1288, 1312], "ff": 1374, "ff00": [730, 1316], "fff": 1, "ffff00": [403, 404, 691, 1012, 1013, 1277], "ffffff": [41, 349], "ffi": [225, 349, 1114, 1357], "fgg": 964, "fghi": 1380, "fh": 149, "fiction": 1366, "field": [37, 38, 40, 48, 87, 122, 125, 133, 315, 349, 398, 580, 588, 589, 615, 617, 619, 648, 697, 698, 704, 717, 718, 738, 739, 740, 746, 753, 776, 777, 803, 824, 832, 842, 923, 958, 1007, 1201, 1209, 1240, 1284, 1303, 1304, 1325, 1327, 1340, 1357, 1381], "field_0": [398, 580, 1007, 1201], "field_1": [398, 580, 1007, 1201], "field_2": [1007, 1201], "field_n": [398, 580, 1007, 1201], "field_nam": [589, 842, 1209, 1357], "fiftyf": [522, 842], "figsiz": [604, 901, 914, 958], "figur": [604, 671, 842, 914, 958, 1254, 1357], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 218, 227, 289, 349, 441, 511, 603, 607, 842, 869, 911, 958, 962, 1121, 1357], "file_cache_ttl": [158, 162, 165, 166], "file_idx": [53, 140, 142], "file_path": [52, 53, 54, 140, 142], "filenam": 154, "filesourc": [153, 159, 160, 167], "filesystem": [40, 152, 163, 164, 349], "fill": [56, 64, 211, 228, 229, 292, 317, 349, 353, 401, 434, 437, 503, 504, 510, 524, 525, 653, 655, 657, 659, 661, 664, 666, 668, 675, 791, 814, 817, 833, 842, 876, 877, 913, 930, 958, 1010, 1123, 1124, 1129, 1143, 1222, 1244, 1245, 1247, 1250, 1251, 1252, 1261, 1357], "fill_char": [709, 710, 1295, 1296], "fill_nan": [229, 349, 504, 842, 877, 958, 1124, 1357], "fill_nul": [56, 228, 319, 349, 401, 434, 437, 503, 510, 675, 842, 876, 930, 958, 1010, 1123, 1129, 1357], "fill_valu": [292, 317, 349, 675, 842, 913, 958, 1261, 1357], "fillnullstrategi": [229, 349, 504, 842, 877, 958, 1124, 1357], "film": 1366, "filter": [1, 48, 49, 50, 51, 57, 62, 63, 95, 129, 143, 162, 163, 167, 168, 221, 222, 246, 247, 248, 273, 277, 335, 349, 421, 425, 600, 602, 693, 719, 755, 780, 783, 790, 820, 821, 832, 842, 863, 864, 871, 872, 874, 884, 901, 904, 914, 917, 941, 958, 964, 1258, 1357, 1373], "final": [14, 41, 56, 145, 167, 254, 256, 349, 495, 497, 498, 842, 868, 887, 958, 1115, 1117, 1118, 1357, 1386], "find": [64, 235, 349, 522, 673, 688, 689, 701, 842, 1141, 1257, 1275, 1287, 1297, 1357], "find_pat": 700, "fine": [863, 874, 901, 914, 955, 958], "finish": [227, 349, 1121, 1357], "finit": [528, 749, 772, 842, 1147, 1357], "first": [47, 56, 148, 149, 153, 154, 156, 159, 160, 162, 167, 171, 172, 173, 174, 207, 237, 239, 241, 253, 254, 257, 258, 268, 272, 273, 281, 300, 304, 305, 313, 314, 319, 326, 332, 349, 374, 376, 385, 438, 442, 467, 469, 474, 490, 509, 519, 522, 529, 542, 550, 552, 557, 558, 580, 588, 589, 601, 610, 634, 635, 650, 673, 684, 688, 695, 696, 700, 702, 704, 705, 711, 712, 726, 733, 768, 769, 776, 790, 794, 832, 838, 842, 882, 883, 886, 887, 891, 900, 907, 922, 930, 932, 938, 958, 964, 983, 994, 1052, 1054, 1055, 1084, 1086, 1091, 1107, 1138, 1141, 1148, 1163, 1171, 1173, 1178, 1179, 1201, 1209, 1257, 1270, 1281, 1282, 1284, 1286, 1288, 1290, 1291, 1297, 1298, 1312, 1319, 1329, 1333, 1335, 1338, 1357, 1377, 1378, 1380, 1386, 1388], "first_column": [41, 349], "first_non_nul": [580, 1201], "first_part": [717, 718, 1303, 1304], "fisher": [538, 651, 681, 842, 1159, 1242, 1268, 1357], "fit": [144, 251, 293, 317, 349, 676, 817, 842, 1262, 1263, 1357], "five": [310, 349, 1388], "fix": [11, 65, 74, 176, 490, 786, 801, 1107], "flag": [61, 152, 163, 175, 290, 307, 349, 674, 688, 696, 697, 700, 711, 712, 842, 874, 892, 912, 958, 964, 1259, 1274, 1282, 1283, 1286, 1297, 1298, 1338, 1357, 1380], "flat": [144, 284, 349, 553, 646, 842, 1174, 1238, 1357], "flatten": 842, "flavour": [41, 150, 349], "flight": 150, "flight_sql": 150, "flightsql": 150, "float": [11, 12, 38, 41, 48, 76, 77, 148, 149, 162, 168, 171, 172, 173, 174, 175, 178, 182, 206, 217, 221, 225, 228, 254, 275, 285, 306, 307, 341, 349, 381, 427, 439, 444, 445, 475, 492, 493, 494, 495, 497, 498, 503, 508, 509, 514, 516, 524, 528, 531, 533, 534, 535, 536, 540, 548, 568, 583, 587, 590, 604, 608, 622, 623, 624, 625, 635, 637, 638, 652, 653, 655, 657, 659, 661, 662, 664, 666, 668, 670, 672, 678, 749, 815, 817, 842, 868, 871, 876, 887, 902, 914, 947, 958, 964, 990, 1028, 1038, 1053, 1054, 1056, 1057, 1058, 1092, 1110, 1114, 1115, 1117, 1118, 1123, 1128, 1139, 1159, 1169, 1189, 1204, 1218, 1219, 1228, 1229, 1230, 1231, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1255, 1258, 1265, 1268, 1272, 1328, 1338, 1347, 1357, 1385, 1388], "float16": [311, 349], "float32": [1, 11, 38, 48, 59, 210, 232, 305, 306, 307, 311, 349, 496, 842, 860, 958, 964, 1116, 1146, 1207, 1336, 1338, 1341, 1357], "float4": [296, 349, 821, 917, 958, 1383], "float64": [11, 38, 41, 48, 95, 133, 148, 157, 175, 178, 213, 223, 225, 232, 286, 311, 323, 349, 366, 367, 368, 369, 370, 371, 407, 420, 429, 430, 431, 440, 475, 496, 499, 533, 534, 639, 679, 680, 744, 745, 788, 804, 814, 817, 833, 838, 842, 865, 873, 908, 928, 958, 963, 964, 1092, 1116, 1339, 1345, 1357], "float_list": 83, "float_precis": [9, 11, 28, 38, 41, 48, 349, 958], "float_scientif": [38, 48, 349, 958], "floatfmt": 12, "floor": [58, 509, 842, 1357, 1378], "floor_a": 1379, "floordiv": [749, 842], "fmt": [12, 254, 349, 523, 791, 842, 884, 887, 958], "fmt_number": [349, 353], "fmt_str_length": [13, 781, 782, 784, 785], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 349], "fn": [776, 777, 790, 816], "foggi": [711, 712, 1297, 1298], "fold": [349, 601, 768, 776, 777, 816, 832], "folder": 168, "follow": [41, 47, 61, 143, 148, 149, 150, 152, 153, 159, 162, 163, 164, 239, 254, 258, 272, 281, 307, 319, 349, 469, 474, 487, 496, 588, 634, 635, 640, 650, 654, 656, 658, 660, 662, 663, 665, 667, 669, 678, 738, 749, 764, 781, 782, 784, 785, 804, 829, 830, 832, 834, 835, 837, 842, 843, 844, 847, 849, 850, 851, 882, 887, 900, 907, 958, 964, 1086, 1091, 1104, 1116, 1228, 1232, 1256, 1258, 1265, 1338, 1349, 1351, 1353, 1357, 1358, 1363, 1364, 1365, 1383, 1388], "font": [41, 349], "font_color": [41, 349], "font_siz": [41, 349], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 144, 157, 158, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 227, 230, 232, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 253, 257, 258, 259, 260, 261, 262, 263, 266, 267, 270, 273, 275, 277, 278, 279, 282, 285, 286, 287, 289, 291, 294, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 313, 314, 315, 320, 321, 322, 327, 349, 422, 439, 441, 469, 513, 519, 523, 542, 593, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 637, 646, 687, 690, 692, 695, 697, 698, 703, 714, 716, 718, 720, 721, 722, 723, 724, 731, 734, 743, 761, 772, 773, 774, 789, 793, 794, 795, 798, 799, 805, 807, 809, 810, 812, 813, 815, 820, 823, 827, 831, 832, 838, 842, 860, 865, 866, 870, 871, 872, 873, 878, 884, 885, 886, 899, 904, 905, 908, 909, 922, 923, 927, 930, 958, 963, 964, 1030, 1053, 1086, 1180, 1228, 1230, 1238, 1276, 1278, 1281, 1283, 1284, 1300, 1304, 1309, 1310, 1317, 1320, 1357, 1371, 1373, 1374, 1375, 1377, 1380, 1383], "foo1": 1380, "foo11": [232, 349], "foo_": [598, 716, 791], "foo_1": [304, 349], "foo_2": [304, 349], "foo_3_4": 1380, "foo_a": [273, 349], "foo_a_bar_1": 791, "foo_at_1": 1375, "foo_b": [273, 349], "foo_b_bar_2": 791, "foo_bar": [593, 599, 716, 802, 1371], "foo_bar2": [593, 599], "foo_bar_baz": 716, "foo_c_bar_3": 791, "foo_low": [731, 1380], "foo_mean": 1375, "foo_q25": 1374, "foo_q50": 1374, "foo_q75": 1374, "foo_std": 1374, "foo_strip": 720, "foo_strip_end": 721, "foo_strip_start": 722, "foo_sum": [1374, 1375], "foo_uniqu": 1375, "foo_upp": [734, 1380], "foo_var": 1374, "foobar": [723, 724, 1309, 1310, 1380], "foobarbar": [724, 1310], "foofoobar": [723, 1309], "foral": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "forc": [148, 154, 158, 160, 254, 258, 307, 335, 349, 580, 886, 887, 941, 958, 1209, 1338, 1357], "force_parallel": [254, 349, 886, 887, 958], "foreign": 199, "form": [38, 48, 130, 132, 133, 134, 136, 157, 158, 166, 251, 283, 317, 349, 479, 631, 708, 733, 842, 958, 1096, 1225, 1294, 1319, 1357, 1380], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 48, 100, 131, 146, 148, 149, 150, 153, 154, 156, 159, 162, 168, 205, 218, 226, 237, 251, 264, 273, 283, 284, 289, 303, 316, 347, 349, 353, 441, 474, 476, 479, 603, 604, 605, 725, 727, 728, 732, 786, 842, 869, 874, 875, 896, 911, 924, 958, 962, 967, 1093, 1096, 1311, 1313, 1314, 1318, 1356, 1380, 1381], "formul": [221, 349, 871, 872, 958], "formula": [41, 349, 492, 842, 1110, 1357], "fortran": [306, 307, 349], "forward": [229, 254, 292, 319, 349, 393, 434, 437, 446, 466, 504, 510, 573, 675, 842, 877, 887, 913, 958, 1002, 1059, 1083, 1124, 1129, 1194, 1261, 1357], "forward_fil": [401, 504, 842, 1010, 1124, 1357], "found": [21, 38, 41, 48, 101, 122, 125, 133, 137, 153, 160, 167, 223, 296, 349, 522, 673, 700, 705, 723, 724, 725, 728, 842, 917, 958, 1141, 1257, 1286, 1291, 1309, 1310, 1311, 1314, 1357, 1369, 1380, 1385], "four": [310, 349, 1385], "fourth": [538, 842, 1159, 1357], "frac": [495, 496, 497, 498, 681, 842, 1115, 1116, 1117, 1118, 1268, 1357], "fraction": [38, 48, 171, 172, 173, 174, 285, 349, 475, 568, 631, 672, 725, 728, 842, 958, 1092, 1189, 1225, 1255, 1311, 1314, 1357], "fragment": 1385, "frame": [38, 39, 41, 48, 56, 63, 64, 133, 149, 153, 159, 171, 172, 210, 211, 217, 251, 252, 256, 258, 265, 269, 272, 282, 283, 284, 296, 311, 317, 318, 349, 479, 821, 860, 861, 868, 897, 900, 917, 925, 958, 964, 1040, 1096, 1357, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1384, 1388], "frame_data": [1368, 1371], "frameinittyp": [349, 958], "frametyp": [56, 1385], "framework": [273, 316, 349, 924, 958], "freedom": [297, 320, 349, 576, 582, 664, 665, 668, 669, 686, 754, 774, 818, 819, 823, 831, 842, 918, 926, 958, 1250, 1252, 1272, 1347, 1357], "freeli": [821, 917, 958, 964], "freez": [41, 349], "freeze_pan": [41, 349], "frequenc": [319, 349, 753, 842, 1346, 1357], "frequent": [1256, 1258, 1357], "fri": [349, 352], "fridai": [239, 349, 446, 458, 476, 767, 882, 958, 1059, 1071, 1093, 1096], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 48, 49, 50, 51, 56, 64, 74, 87, 95, 100, 104, 120, 124, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 192, 207, 210, 217, 218, 219, 225, 227, 230, 231, 237, 239, 251, 252, 253, 254, 255, 256, 264, 273, 277, 278, 281, 282, 284, 285, 287, 288, 296, 304, 311, 313, 314, 316, 317, 318, 319, 325, 349, 352, 353, 398, 407, 439, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 499, 509, 511, 524, 538, 556, 568, 580, 589, 597, 622, 623, 625, 630, 631, 634, 637, 639, 650, 652, 654, 656, 658, 660, 662, 665, 667, 669, 672, 684, 696, 697, 702, 704, 705, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 751, 763, 764, 767, 768, 780, 781, 782, 783, 784, 785, 786, 800, 802, 817, 821, 828, 829, 830, 832, 838, 841, 842, 860, 868, 869, 870, 878, 882, 886, 887, 888, 896, 904, 905, 907, 909, 910, 917, 922, 924, 925, 930, 931, 958, 962, 963, 964, 1007, 1016, 1053, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1114, 1116, 1121, 1159, 1177, 1189, 1201, 1218, 1219, 1221, 1222, 1225, 1230, 1243, 1255, 1282, 1283, 1288, 1290, 1301, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1318, 1333, 1348, 1357, 1366, 1367, 1368, 1369, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388], "from_arrai": 821, "from_arrow": 131, "from_json": 842, "from_panda": 131, "from_repr": [305, 349, 1335, 1357], "fromkei": [57, 59], "front": [239, 349, 882, 958], "fruit": [302, 349, 421, 425, 647, 693, 719, 726, 842, 1029, 1034, 1279, 1305, 1312], "fruits_revers": [647, 842], "fsspec": [148, 149, 154, 156, 163, 164, 170], "fsspecfileio": 164, "full": [12, 27, 47, 51, 56, 71, 100, 133, 136, 148, 149, 150, 152, 154, 157, 158, 160, 162, 163, 164, 166, 167, 168, 253, 318, 349, 702, 704, 711, 712, 725, 726, 727, 728, 732, 781, 782, 886, 892, 925, 958, 962, 964, 1288, 1290, 1297, 1298, 1311, 1312, 1313, 1314, 1318, 1357, 1373, 1388], "full_path": [140, 142], "full_sent": 771, "fulli": [180, 272, 285, 307, 349, 520, 842, 1139, 1357], "funcnam": [41, 349], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 72, 78, 95, 96, 97, 127, 131, 135, 137, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 198, 202, 204, 206, 209, 215, 218, 225, 232, 255, 258, 264, 272, 273, 278, 296, 306, 307, 308, 311, 312, 313, 316, 318, 335, 349, 352, 353, 361, 398, 418, 419, 438, 439, 441, 446, 458, 495, 497, 498, 520, 580, 588, 589, 614, 615, 630, 634, 637, 649, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 678, 681, 701, 746, 747, 748, 757, 761, 767, 769, 773, 775, 776, 777, 789, 790, 792, 794, 795, 798, 800, 801, 803, 804, 807, 809, 812, 814, 816, 823, 827, 831, 833, 838, 842, 854, 858, 864, 869, 888, 892, 896, 900, 905, 917, 921, 924, 925, 932, 941, 958, 962, 966, 1007, 1027, 1036, 1052, 1053, 1059, 1071, 1114, 1115, 1117, 1118, 1139, 1201, 1209, 1230, 1241, 1242, 1243, 1246, 1248, 1249, 1256, 1258, 1263, 1265, 1268, 1287, 1336, 1339, 1341, 1342, 1357, 1362, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388], "function_nam": 145, "further": 838, "futur": [63, 206, 217, 253, 290, 349, 864, 868, 886, 912, 958], "g": [34, 38, 48, 144, 148, 152, 154, 156, 163, 168, 180, 206, 218, 250, 307, 317, 349, 358, 441, 496, 499, 589, 676, 788, 832, 842, 869, 905, 958, 962, 1116, 1357, 1388], "g1": [505, 755, 842], "g2": [505, 755, 842], "g_1": [681, 842, 1268, 1357], "gag": 27, "gamma": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "gantt": [901, 958], "gather": [149, 233, 349, 374, 513, 556, 765, 842, 880, 958, 983, 1131, 1177, 1357], "gather_everi": [349, 842, 958, 1357], "gb": [225, 349, 407, 1114, 1357], "gbp": 1388, "gc": [40, 152, 163, 164, 349], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 164, 165, 166, 167, 192, 349, 958], "gdp": [254, 349, 887, 958], "gdp2": [254, 349, 887, 958], "gdp_date": [254, 349, 887, 958], "ge": [842, 1357], "gener": [1, 52, 53, 95, 143, 144, 150, 151, 169, 175, 176, 177, 178, 179, 180, 182, 206, 213, 215, 273, 285, 304, 307, 313, 349, 568, 672, 677, 762, 781, 784, 796, 797, 799, 800, 801, 817, 829, 830, 842, 958, 1028, 1189, 1255, 1264, 1333, 1357, 1388], "geq": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "germani": [254, 349, 887, 958], "get": [56, 63, 74, 145, 155, 161, 168, 198, 207, 209, 213, 214, 223, 231, 234, 236, 239, 241, 242, 246, 248, 249, 257, 260, 267, 268, 273, 281, 282, 286, 291, 294, 300, 308, 312, 322, 332, 343, 349, 359, 372, 373, 374, 376, 384, 387, 399, 407, 419, 422, 434, 435, 436, 437, 446, 456, 458, 506, 512, 519, 522, 537, 539, 542, 554, 560, 581, 590, 591, 592, 600, 602, 608, 622, 623, 632, 633, 638, 649, 650, 682, 686, 695, 742, 743, 747, 748, 750, 754, 765, 767, 789, 794, 798, 804, 805, 806, 807, 809, 810, 811, 813, 823, 827, 831, 842, 858, 863, 864, 866, 873, 878, 879, 882, 883, 889, 891, 907, 908, 915, 920, 921, 927, 938, 949, 958, 963, 968, 981, 982, 983, 984, 985, 993, 996, 1008, 1016, 1030, 1039, 1048, 1049, 1050, 1051, 1059, 1069, 1071, 1109, 1126, 1127, 1133, 1138, 1141, 1144, 1145, 1157, 1160, 1163, 1175, 1181, 1202, 1210, 1212, 1213, 1215, 1217, 1218, 1219, 1226, 1227, 1231, 1241, 1269, 1272, 1281, 1329, 1333, 1339, 1343, 1347, 1357], "get_chunk": 1357, "get_column": [206, 309, 349], "get_column_index": 349, "get_polars_schema": 200, "get_table_info": 200, "get_token": 34, "get_worksheet_by_nam": [41, 349], "gevent": [63, 170, 864, 958], "gh": 712, "gh45": 712, "gh45ij67kl": 712, "ghi": [358, 697, 842, 964, 1283], "gil": [589, 842, 962], "git": 61, "github": [151, 349], "give": [158, 165, 166, 254, 264, 314, 316, 349, 456, 509, 538, 643, 749, 753, 832, 842, 854, 887, 896, 903, 922, 924, 958, 1069, 1159, 1346, 1357, 1384], "given": [41, 52, 53, 54, 56, 95, 106, 111, 128, 130, 132, 133, 134, 136, 143, 144, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 173, 174, 175, 176, 178, 180, 181, 182, 183, 204, 225, 226, 228, 230, 239, 249, 258, 265, 271, 272, 277, 282, 283, 284, 292, 295, 311, 318, 349, 381, 393, 398, 407, 419, 428, 447, 451, 476, 478, 479, 492, 496, 520, 526, 548, 573, 580, 583, 589, 630, 634, 640, 643, 644, 646, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 675, 697, 698, 709, 710, 725, 728, 735, 738, 748, 766, 768, 772, 774, 788, 789, 798, 803, 804, 817, 818, 819, 832, 842, 875, 882, 892, 897, 900, 903, 904, 913, 916, 925, 941, 958, 963, 964, 966, 990, 1002, 1007, 1016, 1041, 1060, 1064, 1093, 1095, 1096, 1110, 1114, 1116, 1139, 1144, 1158, 1169, 1194, 1201, 1204, 1207, 1209, 1222, 1228, 1232, 1238, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1257, 1261, 1283, 1284, 1295, 1296, 1311, 1314, 1321, 1345, 1348, 1357, 1366, 1368, 1373, 1375, 1376, 1379, 1380, 1385, 1387, 1388], "glimps": [217, 241, 349], "glob": [148, 149, 153, 154, 158, 160, 162, 165, 166, 167], "global": [55, 96, 97, 153, 169, 178, 186, 296, 349, 644, 645, 821, 842, 917, 958, 1031, 1035, 1236, 1237, 1357, 1367, 1369, 1384], "gmt": [451, 455, 473, 1064, 1068, 1090], "go": [13, 148, 149, 162, 421, 693, 1029, 1279], "godfath": 1366, "goe": 13, "gonfruit": 1312, "good": [47, 49, 51, 251, 349, 958, 1379], "goodby": 1, "googl": [35, 152, 163, 164], "gpu": [10, 49, 62, 63, 306, 349, 863, 864, 874, 901, 914, 933, 955, 958, 1336, 1357], "gpu_devic": [306, 349], "gpudevic": [306, 349], "gpuengin": [10, 863, 874, 901, 914, 958], "grade": [1159, 1357], "grain": [863, 874, 901, 914, 955, 958], "granular": 1385, "grape": 1380, "graph": [62, 150, 256, 349, 604, 863, 884, 930, 958], "graphviz": [256, 349, 604, 914, 958], "great": [349, 353], "great_tabl": [349, 353], "greater": [211, 254, 349, 514, 516, 526, 681, 709, 710, 718, 735, 832, 842, 887, 958, 1144, 1268, 1295, 1296, 1304, 1321, 1357], "greatest": [1374, 1378], "greatli": [154, 165], "green": [55, 96, 97, 335, 753, 842, 941, 1346, 1357], "greenlet": [63, 864, 958], "greet": 1, "grid": [524, 842], "grid_point": [524, 842], "gridlin": [41, 349], "gross": 1366, "group": [9, 28, 47, 51, 54, 145, 149, 167, 210, 238, 239, 252, 254, 269, 271, 273, 281, 284, 317, 319, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 359, 419, 438, 501, 507, 512, 515, 552, 588, 589, 600, 602, 630, 640, 649, 650, 683, 684, 688, 696, 697, 698, 700, 711, 712, 748, 753, 804, 842, 860, 881, 882, 887, 907, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 964, 1052, 1173, 1241, 1274, 1282, 1283, 1284, 1286, 1297, 1298, 1346, 1357, 1366, 1374, 1384, 1385], "group_bi": [239, 269, 273, 281, 319, 348, 349, 359, 409, 414, 417, 419, 505, 507, 512, 515, 588, 589, 630, 683, 684, 748, 755, 781, 784, 804, 842, 863, 864, 874, 882, 901, 903, 907, 914, 956, 958, 964], "group_by_dynam": [281, 349, 907, 958], "group_by_partit": [901, 958], "group_col": [505, 755, 842], "group_df": [335, 941], "group_dtyp": [630, 842], "group_index": [696, 1282], "group_to_row": [630, 842], "groupbi": [238, 349, 589, 804, 842], "grouper": [409, 414, 417, 842], "grow": [321, 349], "grown": [243, 349], "gt": [349, 353, 842, 1357], "gte": [505, 755, 842], "guarante": [10, 47, 51, 148, 149, 209, 217, 240, 265, 312, 314, 349, 418, 419, 518, 746, 747, 748, 842, 858, 868, 897, 921, 922, 958, 1027, 1137, 1340, 1342, 1357], "guid": [143, 145, 842, 962, 1388], "gzip": [47, 51, 349, 958], "h": [317, 349, 358, 476, 479, 676, 711, 712, 725, 728, 732, 842, 1297, 1298, 1311, 1314, 1318, 1380, 1381], "ha": [40, 41, 56, 63, 135, 150, 162, 185, 206, 319, 325, 330, 349, 418, 419, 438, 511, 588, 601, 607, 702, 726, 736, 747, 748, 772, 789, 798, 838, 842, 864, 914, 931, 936, 941, 958, 1027, 1040, 1052, 1054, 1288, 1312, 1342, 1357], "half": [311, 349, 474, 495, 496, 497, 498, 842, 1091, 1115, 1116, 1117, 1118, 1357], "half_lif": [495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357], "half_to_even": [670, 842, 1253, 1357], "ham": [36, 38, 40, 43, 44, 47, 210, 213, 214, 215, 219, 220, 221, 222, 223, 224, 230, 235, 240, 241, 243, 253, 257, 259, 261, 263, 266, 270, 275, 277, 278, 279, 282, 285, 286, 287, 294, 297, 298, 300, 304, 305, 307, 308, 309, 314, 320, 321, 349, 422, 604, 605, 838, 860, 865, 866, 870, 871, 872, 873, 878, 886, 899, 904, 905, 908, 909, 922, 930, 958, 1030, 1373, 1374], "ham_a": [304, 349], "ham_b": [304, 349], "ham_right": [253, 349, 886, 958], "hamburg": 838, "hand": [41, 148, 149, 162, 349, 569, 570, 571, 572, 1190, 1191, 1192, 1193], "handi": [446, 458, 767, 1059, 1071], "handl": [40, 42, 103, 137, 145, 148, 149, 162, 168, 230, 234, 277, 349, 442, 550, 695, 735, 842, 863, 878, 904, 958, 1055, 1171, 1281, 1321, 1357], "handler": [146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 349, 441, 842, 869, 958], "happen": [150, 451, 637, 842, 1064, 1230, 1357], "hard": [95, 143, 162, 892, 958], "harder": [239, 349, 882, 958], "hardwar": 1388, "has_head": [148, 149, 153, 159, 162], "has_nul": [842, 1136, 1357], "has_prefix": [425, 719], "has_suffix": [421, 693], "has_two": 1375, "has_valid": 1357, "hash": [240, 349, 842, 1357], "hash_row": 349, "hat": [711, 712, 1297, 1298], "have": [5, 15, 31, 34, 41, 53, 55, 56, 64, 71, 97, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 207, 218, 227, 251, 253, 254, 273, 276, 281, 283, 284, 303, 311, 326, 349, 438, 441, 495, 497, 498, 589, 601, 640, 644, 645, 650, 698, 713, 769, 842, 869, 886, 887, 896, 907, 931, 932, 958, 964, 1052, 1054, 1115, 1117, 1118, 1121, 1232, 1236, 1237, 1297, 1299, 1357, 1384, 1386, 1388], "haystack": [697, 1283], "he": 721, "head": [74, 162, 237, 257, 300, 349, 364, 542, 842, 891, 958, 1163, 1329, 1357], "header": [38, 41, 47, 48, 51, 137, 148, 149, 153, 159, 162, 223, 313, 349, 958], "header_format": [41, 349], "header_nam": [313, 349], "headerless": 162, "heap": [145, 225, 349, 842, 1114, 1357], "heatmap": [41, 349], "heavili": 167, "height": [41, 144, 178, 222, 349, 352, 1357, 1362], "hell": [720, 1306], "hello": [1, 21, 720, 721, 722, 964, 1180, 1306, 1307, 1308, 1368, 1371, 1380], "hello_": 791, "hello_data": 1371, "hello_world": 1371, "help": [41, 171, 172, 173, 174, 349, 958], "helper": [349, 353, 838], "henc": [711, 1298], "here": [38, 40, 41, 43, 47, 48, 49, 50, 51, 130, 132, 133, 134, 136, 150, 151, 152, 157, 158, 160, 162, 163, 164, 165, 166, 167, 176, 178, 182, 192, 207, 273, 349, 446, 458, 588, 589, 604, 698, 705, 767, 832, 842, 914, 958, 964, 1059, 1071, 1291], "hex": [403, 404, 691, 692, 730, 1012, 1013, 1277, 1278, 1316], "hexadecim": [1012, 1013], "hf": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 958], "hf_token": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 958], "hi": [1, 1380], "hidden": [41, 349], "hidden_column": [41, 349], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 349], "hide_password": 150, "high": [284, 349, 353, 637, 842, 854, 1230, 1357], "higher": [47, 51, 217, 275, 341, 349, 638, 661, 662, 815, 842, 868, 902, 947, 958, 1054, 1231, 1248, 1357], "highest": [349, 353, 640, 752, 772, 842, 958, 1232, 1357], "highli": [145, 842], "hint": 143, "hippopotamu": [709, 710, 1295, 1296], "hist": [842, 1357, 1362], "histogram": [1357, 1362], "hit": [859, 958], "hive": [52, 160, 165, 167], "hive_custom": 195, "hive_dir": [52, 54], "hive_partit": [160, 165, 167], "hive_schema": [160, 165, 167], "hive_serd": 195, "hmm": [964, 1380], "hold": [293, 307, 349, 1338, 1357], "holidai": [446, 458, 767, 1059, 1071], "home": [733, 1319], "horizont": [21, 64, 105, 232, 243, 260, 262, 267, 299, 317, 349, 758, 760, 769, 770, 771, 776, 777, 779, 787, 790, 806, 808, 811, 816, 826, 930, 958], "host": [61, 148, 154, 156, 167], "hour": [158, 162, 165, 166, 239, 254, 281, 319, 349, 461, 463, 464, 468, 469, 472, 474, 475, 479, 481, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 783, 784, 785, 786, 800, 828, 829, 830, 842, 882, 887, 907, 958, 964, 1086, 1089, 1091, 1098, 1104, 1116, 1357, 1381], "hours_diff": 481, "hous": [311, 349], "how": [12, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 56, 64, 105, 145, 151, 158, 160, 162, 165, 166, 167, 192, 222, 230, 253, 254, 273, 317, 318, 349, 382, 442, 472, 473, 524, 549, 550, 630, 643, 663, 725, 728, 767, 783, 842, 878, 886, 887, 925, 930, 958, 991, 1055, 1089, 1090, 1170, 1171, 1249, 1311, 1314, 1357], "howev": [1, 10, 52, 133, 150, 160, 167, 202, 225, 258, 307, 349, 630, 842, 863, 874, 901, 914, 958, 1114, 1357], "hstack": [105, 349], "html": [33, 41, 43, 44, 131, 150, 154, 156, 204, 205, 206, 215, 349, 966, 967], "http": [21, 33, 41, 43, 44, 74, 131, 150, 151, 154, 156, 187, 204, 205, 206, 215, 349, 604, 696, 698, 708, 914, 958, 966, 967, 1282, 1284, 1294], "httpmethod": 74, "hug": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 958], "huge": [225, 349, 1114, 1357], "hut": [711, 712, 1297, 1298], "hvplot": [349, 352, 1357, 1362], "hyperbol": [367, 369, 371, 430, 680, 745, 842, 976, 978, 980, 1044, 1267, 1331, 1357], "hyperloglog": [208, 349, 365, 761, 842, 857, 958, 974, 1357], "hyphen": [687, 1273], "hypothesi": [176, 178, 181, 182, 1388], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 70, 71, 72, 73, 78, 88, 95, 97, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 198, 202, 207, 208, 209, 210, 212, 213, 217, 218, 221, 222, 224, 225, 227, 230, 234, 238, 239, 240, 241, 244, 245, 249, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 269, 271, 272, 273, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 290, 292, 294, 295, 296, 297, 300, 301, 306, 307, 308, 311, 312, 313, 314, 316, 318, 319, 320, 324, 326, 327, 335, 349, 352, 353, 358, 361, 363, 364, 365, 375, 378, 385, 386, 393, 398, 401, 406, 418, 419, 420, 423, 424, 438, 439, 441, 444, 445, 446, 447, 450, 458, 459, 466, 467, 469, 474, 476, 479, 487, 495, 496, 497, 498, 501, 505, 509, 510, 518, 520, 523, 526, 538, 544, 551, 552, 555, 557, 559, 568, 573, 574, 576, 580, 582, 585, 588, 589, 593, 595, 596, 597, 599, 600, 601, 603, 612, 630, 635, 637, 640, 642, 643, 644, 645, 646, 649, 650, 651, 652, 654, 656, 658, 660, 662, 663, 664, 665, 667, 668, 669, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 718, 720, 721, 722, 725, 726, 727, 728, 730, 732, 733, 735, 740, 747, 748, 753, 754, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 781, 782, 784, 785, 790, 794, 795, 796, 797, 799, 800, 801, 802, 804, 807, 809, 812, 814, 817, 818, 819, 820, 821, 823, 827, 829, 830, 831, 832, 833, 838, 842, 857, 858, 859, 862, 863, 864, 866, 868, 869, 871, 872, 873, 874, 878, 881, 882, 885, 886, 887, 888, 890, 892, 896, 897, 901, 904, 905, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 921, 922, 924, 925, 926, 927, 929, 932, 933, 941, 951, 958, 962, 964, 971, 972, 973, 974, 987, 994, 995, 1002, 1007, 1010, 1015, 1027, 1031, 1032, 1033, 1036, 1041, 1042, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1063, 1071, 1072, 1086, 1091, 1093, 1096, 1104, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1125, 1126, 1129, 1137, 1138, 1139, 1141, 1144, 1146, 1149, 1156, 1158, 1159, 1160, 1163, 1165, 1172, 1173, 1176, 1178, 1180, 1189, 1194, 1195, 1201, 1209, 1228, 1230, 1232, 1234, 1236, 1237, 1238, 1241, 1242, 1243, 1246, 1248, 1249, 1250, 1252, 1255, 1256, 1257, 1258, 1259, 1261, 1264, 1265, 1268, 1269, 1272, 1273, 1274, 1275, 1276, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1304, 1306, 1307, 1308, 1311, 1312, 1313, 1314, 1316, 1318, 1319, 1321, 1329, 1332, 1336, 1338, 1339, 1341, 1342, 1346, 1347, 1357, 1362, 1366, 1367, 1372, 1376, 1377, 1380, 1383, 1385, 1386, 1388], "i0e0": 1388, "i16": [1, 59, 454, 470, 489, 676, 842, 964, 1087, 1335, 1357, 1388], "i32": [1, 59, 130, 133, 137, 175, 177, 178, 287, 296, 349, 384, 385, 387, 406, 420, 449, 457, 460, 461, 462, 463, 464, 468, 491, 676, 767, 832, 842, 909, 958, 963, 993, 994, 996, 1015, 1062, 1073, 1077, 1078, 1079, 1085, 1108, 1207, 1357, 1377, 1381, 1388], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 57, 58, 59, 60, 64, 65, 83, 104, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 150, 157, 158, 162, 207, 209, 210, 211, 212, 214, 218, 219, 222, 223, 226, 227, 229, 230, 233, 234, 236, 237, 238, 239, 241, 243, 244, 246, 248, 250, 253, 254, 255, 257, 258, 259, 265, 266, 271, 272, 273, 274, 277, 278, 279, 280, 281, 285, 287, 289, 292, 294, 295, 296, 298, 300, 302, 309, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 339, 342, 343, 349, 358, 360, 364, 374, 379, 380, 382, 383, 388, 390, 391, 392, 393, 394, 396, 399, 409, 414, 417, 418, 419, 428, 434, 435, 436, 437, 438, 439, 442, 443, 456, 472, 478, 480, 481, 482, 483, 484, 485, 486, 496, 499, 501, 502, 504, 505, 506, 507, 509, 512, 513, 515, 519, 521, 523, 524, 525, 526, 529, 530, 532, 533, 534, 535, 536, 539, 542, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 586, 588, 589, 609, 610, 611, 613, 614, 616, 618, 620, 621, 626, 630, 631, 634, 635, 636, 637, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 672, 674, 675, 676, 677, 682, 683, 684, 702, 711, 712, 726, 730, 735, 736, 738, 739, 740, 741, 742, 743, 747, 748, 749, 750, 752, 755, 762, 765, 768, 769, 770, 771, 776, 777, 778, 779, 780, 783, 786, 787, 788, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811, 813, 816, 820, 821, 822, 825, 826, 827, 828, 832, 838, 842, 858, 860, 861, 863, 864, 869, 870, 872, 875, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 891, 892, 893, 897, 898, 900, 901, 903, 904, 905, 906, 907, 909, 911, 913, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 928, 931, 932, 934, 935, 937, 938, 939, 941, 942, 945, 948, 949, 958, 964, 968, 969, 970, 973, 992, 997, 999, 1001, 1002, 1003, 1005, 1008, 1027, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1069, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1120, 1121, 1122, 1124, 1125, 1130, 1131, 1133, 1138, 1140, 1149, 1163, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1183, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1201, 1202, 1209, 1214, 1222, 1228, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1244, 1247, 1251, 1255, 1256, 1258, 1261, 1262, 1264, 1269, 1270, 1316, 1322, 1327, 1329, 1334, 1342, 1343, 1348, 1357, 1366, 1367, 1369, 1373, 1374, 1375, 1376, 1377, 1379, 1382, 1383, 1385, 1386, 1388], "i8": [397, 398, 454, 457, 461, 463, 464, 465, 468, 470, 471, 475, 488, 489, 579, 676, 814, 817, 833, 842, 1006, 1007, 1055, 1067, 1070, 1081, 1082, 1088, 1092, 1105, 1106, 1200, 1239, 1262, 1345, 1357, 1381], "i_bitand_j": 1376, "i_bitand_op_j": 1376, "i_bitcount": 1376, "i_bitor_j": 1376, "i_bitor_op_j": 1376, "i_bitxor_j": 1376, "i_bitxor_op_j": 1376, "iceberg": [42, 164, 349, 854], "icon": [41, 349], "id": [27, 34, 41, 64, 144, 148, 153, 164, 255, 306, 313, 326, 335, 349, 649, 711, 712, 751, 842, 888, 932, 941, 958, 964, 1241, 1344, 1357, 1385, 1386, 1388], "id_char": 1388, "id_var": [264, 316, 349, 896, 924, 958], "ideal": [139, 143], "ident": [34, 137, 211, 212, 349, 476, 648, 649, 842, 861, 862, 958, 1040, 1042, 1093, 1240, 1241, 1357], "identif": [153, 159], "identifi": [137, 150, 264, 271, 314, 316, 327, 349, 896, 922, 924, 958], "idiograph": 964, "idiom": 832, "idiomat": [838, 866, 873, 908, 927, 941, 958], "idx": [162, 239, 252, 326, 349, 385, 398, 580, 882, 932, 958, 1007, 1201, 1286], "idx_lit": 1286, "idx_rx": 1286, "ieee": [749, 842], "if_set": [5, 31], "if_table_exist": [39, 349], "ifnul": 1378, "ignor": [40, 150, 177, 178, 182, 262, 299, 318, 349, 361, 363, 386, 406, 442, 473, 495, 497, 498, 550, 559, 622, 623, 687, 703, 757, 759, 771, 808, 826, 842, 925, 958, 964, 971, 972, 995, 1015, 1055, 1090, 1115, 1117, 1118, 1171, 1180, 1218, 1219, 1273, 1289, 1357], "ignore_error": [148, 149, 158, 162, 166], "ignore_nul": [262, 299, 349, 361, 363, 386, 495, 497, 498, 559, 687, 703, 757, 759, 771, 808, 826, 842, 971, 972, 995, 1115, 1117, 1118, 1180, 1273, 1289, 1357], "ignore_spac": 964, "ij": 712, "ij67": 712, "ijkl": 1380, "ilmsuxu": [688, 696, 697, 700, 711, 712, 1274, 1282, 1283, 1286, 1297, 1298], "imbal": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "imdb_scor": 1366, "immedi": [202, 640, 762, 766, 768, 772, 774, 781, 782, 784, 785, 796, 797, 800, 801, 814, 817, 820, 824, 829, 830, 833, 842, 1232, 1357, 1367], "immut": [307, 349, 1338, 1357], "impact": [239, 349, 882, 958, 1366, 1385], "impl": 164, "implement": [47, 95, 143, 150, 206, 240, 258, 335, 349, 352, 353, 518, 589, 613, 614, 616, 618, 620, 621, 736, 746, 804, 842, 941, 1137, 1209, 1256, 1258, 1340, 1357, 1362], "implic": [441, 842, 869, 958], "implicit": [318, 349, 832, 925, 958], "implicitli": [230, 277, 349, 505, 832, 842, 878, 904, 958, 1385], "implod": [842, 1357, 1375], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 56, 71, 74, 95, 130, 131, 134, 135, 144, 148, 150, 151, 157, 158, 162, 168, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 210, 217, 218, 219, 222, 237, 239, 252, 254, 271, 273, 289, 296, 304, 306, 311, 316, 317, 319, 349, 352, 353, 407, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 596, 597, 603, 630, 652, 654, 656, 658, 660, 662, 665, 667, 669, 767, 780, 781, 782, 783, 784, 785, 786, 800, 821, 829, 830, 838, 842, 854, 860, 864, 868, 869, 870, 872, 882, 887, 892, 911, 924, 958, 962, 1016, 1043, 1045, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1116, 1147, 1150, 1152, 1153, 1243, 1266, 1330, 1357, 1362, 1367, 1382, 1385, 1388], "improv": [39, 51, 154, 164, 165, 253, 349, 588, 842, 886, 958], "in_part_idx": [52, 54, 142], "in_plac": [243, 293, 321, 349, 1233, 1263, 1270, 1357], "in_progress": [903, 958], "includ": [7, 21, 31, 38, 40, 41, 48, 52, 54, 61, 135, 150, 152, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167, 178, 179, 202, 213, 217, 225, 255, 271, 273, 277, 284, 295, 311, 313, 317, 318, 349, 439, 475, 505, 509, 520, 526, 596, 637, 651, 653, 655, 657, 659, 661, 663, 664, 666, 668, 711, 712, 716, 717, 720, 721, 767, 776, 818, 819, 842, 868, 878, 888, 904, 916, 925, 958, 964, 1053, 1054, 1092, 1114, 1125, 1139, 1144, 1230, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1297, 1298, 1302, 1303, 1306, 1357, 1385], "include_bom": [38, 48, 349, 958], "include_boundari": [239, 349, 882, 958], "include_break": [439, 637, 842, 1053, 1230, 1357], "include_breakpoint": [520, 842, 1139, 1357], "include_categor": 964, "include_categori": [520, 842, 1139, 1357], "include_col": 178, "include_file_path": [153, 158, 159, 160, 162, 165, 166, 167], "include_head": [38, 41, 48, 149, 313, 349, 958], "include_index": 135, "include_init": 776, "include_kei": [52, 54, 271, 284, 349], "include_nul": [318, 349, 925, 958], "inclus": [207, 239, 281, 349, 479, 526, 650, 654, 656, 658, 660, 662, 665, 667, 669, 716, 717, 762, 781, 782, 784, 785, 796, 797, 800, 801, 829, 830, 842, 882, 907, 958, 1096, 1144, 1302, 1303, 1357], "incom": 150, "incompat": 123, "incomplet": [645, 842, 1237, 1357], "incorpor": 1385, "incorrect": [290, 349, 490, 588, 589, 674, 842, 912, 941, 958, 1107, 1259, 1357], "incorrectli": [148, 580], "increas": [41, 56, 148, 153, 159, 160, 167, 349, 438, 649, 842, 1052, 1241, 1357], "independ": [62, 63, 129, 175, 178, 182, 311, 349, 677, 842, 863, 864, 874, 901, 914, 958], "index": [41, 111, 131, 135, 138, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 170, 206, 233, 235, 239, 244, 249, 251, 273, 279, 281, 282, 283, 292, 294, 306, 307, 309, 316, 318, 319, 325, 326, 349, 359, 372, 373, 374, 376, 379, 380, 385, 393, 398, 496, 512, 513, 515, 522, 545, 546, 555, 556, 557, 573, 574, 580, 650, 654, 656, 658, 660, 662, 665, 667, 669, 673, 675, 682, 688, 696, 700, 702, 715, 726, 736, 765, 796, 799, 842, 880, 882, 907, 913, 915, 924, 925, 931, 932, 958, 964, 981, 982, 983, 984, 985, 988, 989, 994, 1002, 1007, 1116, 1130, 1131, 1141, 1158, 1166, 1167, 1176, 1177, 1178, 1194, 1195, 1201, 1222, 1256, 1257, 1261, 1269, 1282, 1286, 1288, 1301, 1312, 1357, 1362, 1375, 1380], "index_column": [239, 281, 349, 650, 842, 882, 907, 958], "index_of": [842, 1357], "indexord": [306, 307, 349], "indic": [38, 41, 43, 47, 48, 49, 50, 51, 70, 71, 73, 88, 104, 114, 145, 146, 148, 149, 150, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 175, 176, 182, 192, 239, 281, 284, 292, 304, 349, 375, 393, 512, 520, 527, 528, 529, 531, 532, 533, 534, 535, 536, 555, 573, 593, 594, 595, 596, 597, 598, 599, 630, 650, 654, 656, 658, 660, 662, 665, 667, 669, 673, 675, 765, 766, 813, 842, 882, 907, 913, 958, 964, 1002, 1036, 1130, 1139, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1176, 1194, 1256, 1257, 1261, 1333, 1357, 1380, 1388], "indistinguish": [38, 48, 349, 958], "individu": [41, 51, 202, 281, 306, 307, 311, 349, 589, 697, 739, 842, 863, 907, 958, 964, 1039, 1283, 1357], "inequ": [624, 842], "inexact": [171, 172, 173, 174], "inf": [175, 178, 182, 371, 439, 528, 531, 637, 749, 842, 980, 1045, 1053, 1147, 1150, 1207, 1225, 1230, 1345, 1357, 1382], "infer": [38, 43, 47, 48, 49, 50, 51, 72, 87, 104, 130, 132, 133, 134, 135, 136, 148, 149, 150, 153, 157, 158, 159, 160, 162, 165, 166, 167, 192, 258, 349, 588, 589, 646, 704, 725, 727, 728, 729, 732, 786, 790, 802, 817, 842, 958, 1209, 1238, 1290, 1311, 1313, 1314, 1315, 1318, 1357], "infer_schema": [148, 162], "infer_schema_length": [133, 136, 144, 148, 149, 150, 153, 157, 158, 159, 162, 166, 349, 704, 958, 1290], "inference_length": [729, 1315], "inference_s": [258, 349], "infin": [733, 749, 842, 1319], "infinit": [531, 749, 842, 1150, 1357], "influenc": [153, 892, 958], "influxdb": 150, "info": [152, 163, 164, 170], "inform": [20, 24, 38, 39, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 143, 145, 152, 158, 160, 162, 163, 164, 165, 166, 167, 171, 173, 192, 193, 194, 196, 197, 204, 215, 217, 349, 353, 538, 589, 681, 688, 696, 697, 700, 711, 712, 842, 863, 868, 874, 901, 914, 958, 962, 966, 1035, 1159, 1268, 1274, 1282, 1283, 1286, 1297, 1298, 1357], "inherit": [282, 349, 441, 842, 869, 958], "init": [202, 1366], "initcap": 1378, "initi": [33, 34, 35, 41, 87, 143, 187, 202, 349, 776, 790, 832, 1385], "initialis": [74, 150, 202, 958], "inject": [41, 56, 349], "inlin": [25, 284, 349, 688, 696, 697, 700, 711, 712, 1274, 1282, 1283, 1286, 1297, 1298, 1375], "inner": [65, 83, 177, 253, 255, 318, 349, 386, 397, 443, 559, 579, 589, 643, 746, 821, 842, 886, 888, 925, 958, 995, 1006, 1056, 1180, 1200, 1209, 1340, 1357, 1373, 1385], "inner_dtyp": [177, 180], "innermost": [177, 180], "innter": 994, "inprocessqueri": [863, 958], "input": [0, 54, 56, 62, 104, 133, 135, 145, 148, 149, 209, 219, 238, 255, 258, 262, 271, 273, 278, 287, 288, 292, 295, 299, 312, 318, 323, 324, 328, 349, 358, 419, 421, 425, 428, 496, 499, 511, 526, 584, 588, 589, 601, 630, 644, 645, 678, 684, 702, 713, 715, 721, 722, 723, 724, 726, 728, 740, 748, 756, 758, 760, 762, 765, 768, 769, 770, 771, 779, 786, 788, 796, 797, 802, 803, 804, 806, 808, 811, 820, 824, 826, 832, 838, 842, 854, 858, 870, 881, 888, 905, 909, 910, 913, 916, 921, 925, 928, 929, 934, 958, 1041, 1116, 1144, 1205, 1206, 1209, 1228, 1236, 1237, 1261, 1265, 1288, 1301, 1312, 1314, 1357, 1379, 1380, 1382], "input_wildcard_expans": [145, 842], "insensit": [689, 697, 699, 701, 711, 712, 713, 964, 1274, 1275, 1283, 1285, 1286, 1287, 1297, 1298, 1299], "insensitive_match": [688, 700], "insert": [39, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 244, 313, 315, 349, 673, 687, 703, 735, 842, 923, 958, 1257, 1273, 1289, 1321, 1357], "insert_aft": [41, 349], "insert_befor": [41, 349], "insert_chart": [41, 349], "insert_column": 349, "insid": [63, 588, 832, 842, 864, 958], "inspect": [842, 958], "instal": [33, 34, 35, 108, 135, 148, 149, 151, 154, 156, 215, 308, 349, 446, 458, 604, 767, 914, 958, 1059, 1071, 1339, 1357], "instanc": [38, 43, 47, 48, 49, 50, 51, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 178, 182, 192, 227, 232, 349, 601, 776, 790, 838, 854, 860, 892, 903, 931, 932, 958, 1121, 1357], "instanti": [34, 39, 41, 150, 180, 287, 305, 306, 323, 349, 909, 928, 958, 963, 1335, 1336, 1357], "instantli": [63, 864, 958], "instead": [38, 40, 45, 46, 56, 63, 65, 131, 132, 133, 136, 148, 149, 150, 153, 159, 160, 162, 167, 168, 175, 176, 177, 178, 182, 208, 209, 237, 250, 251, 254, 258, 264, 269, 271, 282, 283, 284, 287, 288, 289, 292, 306, 307, 308, 312, 324, 325, 349, 352, 353, 374, 393, 419, 420, 423, 424, 439, 453, 479, 496, 499, 509, 573, 603, 637, 644, 675, 687, 695, 706, 707, 720, 721, 722, 723, 724, 735, 748, 755, 762, 764, 766, 768, 772, 773, 774, 781, 782, 784, 785, 786, 796, 797, 800, 801, 814, 817, 820, 821, 824, 829, 830, 833, 842, 857, 858, 864, 874, 887, 896, 909, 910, 911, 913, 921, 929, 930, 931, 933, 958, 964, 983, 1002, 1012, 1028, 1032, 1033, 1053, 1066, 1075, 1076, 1096, 1116, 1136, 1194, 1230, 1236, 1256, 1258, 1261, 1270, 1273, 1281, 1292, 1293, 1306, 1307, 1308, 1321, 1338, 1339, 1357, 1362, 1366, 1367, 1371, 1385, 1386], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 48, 49, 50, 51, 53, 58, 65, 72, 133, 136, 139, 140, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 192, 194, 209, 211, 217, 225, 228, 229, 233, 235, 237, 240, 241, 242, 244, 249, 251, 252, 254, 257, 258, 268, 269, 279, 281, 282, 285, 291, 292, 294, 297, 300, 305, 309, 312, 317, 320, 322, 325, 326, 332, 343, 349, 358, 381, 385, 393, 395, 398, 400, 401, 418, 419, 438, 442, 446, 472, 495, 497, 498, 502, 503, 504, 510, 512, 513, 515, 518, 519, 520, 542, 548, 550, 555, 556, 557, 558, 568, 573, 574, 576, 578, 579, 580, 582, 629, 631, 634, 635, 637, 640, 643, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 682, 686, 696, 702, 704, 709, 710, 711, 715, 717, 718, 726, 729, 730, 735, 743, 747, 748, 754, 756, 762, 772, 774, 780, 783, 786, 792, 794, 796, 797, 800, 801, 813, 814, 817, 818, 819, 823, 824, 827, 828, 831, 833, 842, 858, 861, 868, 876, 877, 880, 883, 887, 891, 901, 913, 915, 918, 920, 921, 926, 927, 931, 932, 933, 938, 949, 958, 963, 964, 981, 982, 990, 994, 1002, 1004, 1007, 1009, 1010, 1027, 1028, 1039, 1040, 1046, 1052, 1055, 1056, 1059, 1089, 1114, 1115, 1117, 1118, 1122, 1123, 1124, 1129, 1130, 1131, 1137, 1138, 1139, 1141, 1158, 1162, 1163, 1169, 1171, 1176, 1177, 1178, 1179, 1189, 1194, 1195, 1197, 1199, 1200, 1201, 1203, 1215, 1216, 1218, 1219, 1222, 1224, 1225, 1228, 1229, 1230, 1232, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1264, 1269, 1272, 1282, 1288, 1290, 1295, 1296, 1297, 1301, 1303, 1304, 1312, 1315, 1316, 1321, 1328, 1329, 1335, 1342, 1347, 1357, 1369, 1372, 1385, 1388], "int16": [1, 59, 311, 349, 436, 437, 470, 742, 842, 964, 1050, 1051, 1087, 1328, 1335, 1357], "int32": [1, 41, 59, 64, 130, 133, 175, 177, 178, 239, 252, 281, 306, 349, 384, 385, 387, 406, 420, 449, 460, 461, 462, 463, 468, 491, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 746, 817, 842, 882, 907, 958, 963, 964, 990, 993, 994, 996, 1015, 1062, 1073, 1077, 1078, 1079, 1085, 1108, 1116, 1207, 1340, 1341, 1357], "int64": [1, 40, 41, 58, 59, 64, 65, 87, 106, 148, 157, 213, 223, 232, 239, 272, 281, 286, 287, 301, 308, 349, 379, 380, 382, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 436, 437, 480, 481, 482, 483, 484, 485, 486, 490, 496, 499, 588, 589, 615, 617, 619, 634, 642, 650, 654, 656, 658, 660, 662, 665, 667, 669, 704, 730, 742, 746, 762, 769, 788, 796, 797, 802, 817, 824, 838, 842, 865, 873, 882, 900, 907, 908, 909, 958, 964, 988, 989, 991, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1050, 1051, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1109, 1116, 1209, 1234, 1316, 1328, 1338, 1339, 1340, 1341, 1357], "int64arrai": [1332, 1357], "int8": [1, 59, 87, 232, 349, 397, 398, 436, 437, 454, 457, 464, 465, 471, 475, 488, 489, 579, 742, 814, 817, 833, 842, 963, 1006, 1007, 1050, 1051, 1055, 1067, 1070, 1081, 1082, 1088, 1092, 1105, 1106, 1200, 1239, 1328, 1338, 1345, 1357], "int_rang": [239, 317, 326, 335, 349, 762, 799, 820, 882, 892, 932, 941, 958], "integ": [38, 41, 48, 70, 71, 73, 78, 79, 80, 81, 82, 88, 89, 90, 91, 92, 169, 176, 178, 181, 183, 222, 239, 281, 304, 307, 349, 362, 427, 475, 508, 509, 629, 635, 637, 642, 649, 650, 651, 663, 702, 726, 730, 756, 762, 792, 796, 797, 817, 842, 872, 882, 907, 958, 964, 1038, 1092, 1128, 1228, 1230, 1234, 1241, 1242, 1249, 1256, 1288, 1312, 1316, 1338, 1357, 1379, 1385, 1388], "integer_list": 83, "integr": [41, 311, 349, 654, 656, 658, 660, 662, 665, 667, 669, 842, 1388], "intend": [1, 171, 172, 173, 174, 735, 1321], "intens": [258, 335, 349, 630, 842, 1209, 1357], "interact": [178, 182, 217, 349, 352, 868, 958, 1357, 1362], "interchang": [131, 206], "interest": [149, 476, 479, 1093, 1096], "interfac": [0, 119, 120, 130, 131, 200, 201, 205, 854, 967, 1385], "interfer": 962, "interleav": 1380, "intermedi": [245, 349, 524, 842, 885, 958, 1142, 1143, 1357, 1388], "intern": [43, 44, 49, 150, 169, 251, 301, 349, 509, 842, 958, 1332, 1357, 1367], "interoper": [204, 966], "interpol": [217, 275, 341, 349, 504, 525, 592, 638, 661, 662, 815, 842, 868, 902, 947, 958, 1054, 1143, 1231, 1248, 1357, 1374], "interpolate_bi": [842, 1357], "interpolationmethod": [524, 842, 1142, 1357], "interpret": [134, 136, 148, 149, 162, 349, 406, 958, 1015], "intersect": [41, 349, 570, 964, 1191, 1384], "interv": [239, 281, 319, 349, 439, 474, 487, 520, 526, 637, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 800, 801, 829, 830, 842, 882, 907, 958, 1053, 1067, 1069, 1070, 1077, 1079, 1081, 1082, 1085, 1087, 1088, 1091, 1095, 1104, 1105, 1139, 1144, 1230, 1357, 1374], "intoexpr": [145, 209, 238, 239, 281, 287, 288, 292, 295, 312, 323, 324, 328, 349, 364, 382, 402, 405, 408, 419, 442, 446, 472, 496, 502, 512, 520, 522, 525, 526, 549, 569, 570, 571, 572, 630, 644, 645, 654, 656, 658, 660, 662, 665, 667, 669, 673, 675, 684, 689, 699, 701, 713, 716, 717, 718, 720, 721, 722, 723, 724, 740, 748, 758, 760, 765, 768, 769, 770, 771, 772, 774, 776, 779, 783, 790, 800, 806, 808, 811, 817, 820, 824, 826, 842, 858, 881, 882, 907, 909, 910, 913, 916, 921, 928, 929, 934, 958, 991, 1011, 1014, 1017, 1059, 1116, 1122, 1141, 1143, 1144, 1170, 1236, 1237, 1257, 1261, 1287, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1357], "intoexprcolumn": [230, 244, 277, 349, 381, 385, 386, 393, 418, 419, 428, 474, 502, 505, 548, 556, 559, 568, 573, 631, 635, 672, 675, 696, 702, 705, 715, 726, 730, 735, 747, 748, 762, 767, 781, 782, 784, 785, 796, 797, 801, 829, 830, 832, 842, 878, 904, 913, 958, 990, 994, 995, 1002, 1041, 1086, 1091, 1104, 1122, 1169, 1177, 1180, 1189, 1194, 1225, 1282, 1288, 1291, 1301, 1312, 1316, 1321, 1357], "introduc": [55, 97, 725, 727, 728, 1311, 1313, 1314], "introduct": 1384, "intuit": [509, 842, 964], "invalid": [38, 48, 120, 148, 149, 162, 210, 349, 420, 704, 705, 730, 749, 842, 958, 1012, 1028, 1290, 1291, 1316, 1357], "invalid_valu": 1012, "invalidoperationerror": [645, 842, 1237, 1357, 1383], "invari": [892, 958], "invers": [366, 367, 368, 369, 370, 371, 842, 975, 976, 977, 978, 979, 980, 1338, 1357, 1382], "invert": 964, "invok": [202, 588, 842], "involv": [230, 277, 349, 878, 904, 958], "io": [36, 38, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 146, 148, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 218, 289, 349, 441, 511, 603, 842, 869, 911, 958], "io_sourc": 143, "iobas": [45, 46, 157, 158, 218, 289, 349, 441, 603, 607, 842, 869, 911, 958], "ipc": [43, 44, 49, 154, 155, 156, 165, 168, 349, 854, 958], "ipccompress": [43, 44, 49, 349, 958], "ir": [914, 958], "is_between": [842, 1357], "is_dupl": [349, 842, 1357], "is_elementwis": [145, 588, 842], "is_empti": [349, 1357], "is_finit": [842, 1357], "is_first_distinct": [842, 1357], "is_in": [106, 230, 349, 842, 1357], "is_infinit": [842, 1357], "is_last_distinct": [842, 1357], "is_nan": [221, 349, 842, 871, 958, 1357], "is_not_nan": [842, 1357], "is_not_nul": [277, 349, 842, 904, 958, 1357], "is_nul": [222, 349, 842, 872, 958, 1357], "is_numer": 1388, "is_odd": [287, 349, 909, 958, 964], "is_selector": 964, "is_sort": 1357, "is_uniqu": [349, 842, 1357], "isn": [95, 143, 832], "iso": [460, 479, 488, 489, 1073, 1096, 1105, 1106, 1380], "iso8601": [148, 149, 162, 479, 1096], "iso_lang": 1380, "iso_year": 491, "isodow": 1381, "isoweek": 1381, "isoyear": 1381, "issu": [99, 100, 103, 104, 107, 114, 116, 127, 148, 149, 150, 162, 349, 436, 437, 742, 842, 1050, 1051, 1328, 1357, 1385], "ital": [41, 349], "item": [14, 64, 149, 237, 282, 285, 349, 381, 385, 386, 442, 501, 548, 550, 557, 559, 568, 672, 718, 842, 990, 994, 995, 1055, 1120, 1169, 1171, 1178, 1180, 1189, 1255, 1304, 1357], "iter": [56, 62, 63, 64, 74, 129, 130, 133, 143, 145, 150, 181, 183, 209, 219, 230, 238, 239, 250, 251, 252, 255, 277, 281, 282, 283, 284, 287, 288, 295, 312, 313, 323, 324, 327, 328, 349, 419, 438, 446, 458, 505, 630, 684, 740, 748, 758, 760, 765, 767, 768, 769, 770, 771, 779, 806, 808, 811, 820, 824, 826, 832, 838, 842, 858, 870, 878, 881, 882, 888, 904, 907, 909, 910, 916, 921, 928, 929, 934, 958, 963, 964, 1052, 1059, 1071, 1125, 1256, 1357, 1388], "iter_batch": 150, "iter_column": 349, "iter_row": [252, 282, 283, 284, 349], "iter_slic": 349, "its": [75, 137, 170, 225, 307, 349, 450, 474, 487, 496, 588, 648, 684, 739, 832, 842, 866, 873, 927, 958, 962, 1035, 1063, 1091, 1104, 1114, 1116, 1240, 1338, 1357, 1387], "itself": [176, 349, 352, 353, 589, 651, 653, 655, 657, 659, 661, 663, 664, 666, 668, 766, 818, 819, 842, 890, 958, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357, 1362, 1366, 1367, 1385], "ix": [273, 349], "j": [313, 349, 1376], "jax": [306, 349, 1336, 1357], "jax_enable_x64": [306, 349], "jaxexporttyp": [306, 349], "jjk": 964, "jkl": [697, 1283], "jklmn": 1380, "job": [859, 958], "join": [48, 49, 50, 51, 55, 56, 62, 63, 64, 97, 129, 230, 254, 255, 277, 318, 349, 505, 524, 630, 687, 821, 842, 863, 864, 874, 878, 887, 888, 901, 904, 914, 925, 930, 958, 1273, 1367, 1369, 1375, 1384, 1385], "join_asof": [253, 349, 886, 958], "join_wher": [349, 958], "joinstrategi": [56, 253, 349, 886, 958], "joinvalid": [253, 349, 886, 958], "jpy": 1388, "json": [2, 3, 5, 6, 45, 46, 144, 145, 157, 158, 164, 166, 195, 218, 289, 349, 441, 511, 603, 607, 704, 705, 737, 842, 854, 869, 911, 958, 1290, 1291, 1324], "json_path": [705, 1291], "json_path_match": [704, 1290], "json_stat": 5, "json_str": [157, 158], "json_val": [705, 1291], "jsonencod": 144, "jsonpath": [704, 705, 1290, 1291], "jst": [137, 964], "jul": [725, 1311, 1380], "juli": [1096, 1380, 1381], "just": [41, 135, 150, 162, 264, 316, 349, 896, 924, 958, 964], "k": [209, 284, 312, 313, 349, 418, 419, 433, 538, 747, 748, 842, 858, 921, 958, 1027, 1047, 1159, 1342, 1357], "k_2": [681, 842, 1268, 1357], "k_3": [681, 842, 1268, 1357], "kadokawa": [708, 1294], "kanji": 964, "karen": [273, 349], "kathmandu": [1065, 1066, 1094], "kb": [225, 349, 407, 1016, 1114, 1357], "kde": [1357, 1362], "keep": [56, 148, 149, 158, 162, 165, 166, 230, 314, 318, 319, 349, 511, 588, 606, 614, 644, 768, 832, 842, 922, 925, 958, 1236, 1357], "kei": [38, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 61, 64, 141, 142, 152, 158, 160, 162, 163, 164, 165, 166, 167, 192, 207, 239, 251, 253, 254, 265, 271, 278, 280, 283, 284, 318, 349, 505, 589, 644, 645, 713, 781, 784, 824, 842, 882, 886, 887, 897, 903, 905, 906, 925, 958, 964, 968, 1236, 1237, 1299, 1357, 1373], "kept": [314, 349, 922, 958], "keyedpartit": 142, "keyedpartitioncontext": [52, 54, 141], "keyerror": 17, "keystrok": 838, "keyword": [40, 152, 160, 163, 178, 182, 192, 215, 238, 272, 282, 287, 288, 308, 323, 324, 328, 349, 505, 634, 740, 820, 824, 832, 842, 881, 900, 909, 910, 928, 929, 934, 958, 1339, 1357, 1370], "kl": 712, "kleen": [361, 363, 757, 758, 759, 760, 842, 971, 972, 1357], "klmnoopqrstuvwxyz": [252, 349], "knight": 1366, "know": [56, 150, 273, 316, 349, 580, 588, 842, 924, 958], "known": [154, 196, 398, 580, 941, 1007, 1201], "kurtosi": [651, 842, 1242, 1357], "kuzu_db_conn": 150, "kwarg": [32, 33, 37, 55, 66, 67, 69, 70, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 145, 147, 150, 151, 178, 180, 182, 195, 199, 215, 230, 272, 277, 308, 349, 352, 634, 842, 878, 900, 904, 933, 958, 1339, 1357, 1362, 1370, 1385], "k\u00f9zudb": 150, "l": [800, 801], "l1": 64, "l2": 64, "label": [239, 306, 311, 349, 352, 353, 439, 637, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 842, 882, 901, 958, 1053, 1230, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357, 1362], "label_column": [311, 349], "labelangl": [349, 352, 1357, 1362], "lag": [292, 349, 393, 573, 675, 770, 842, 913, 958, 1002, 1194, 1261, 1357], "lake": [40, 152, 163, 349, 854], "lambda": [52, 95, 162, 232, 258, 272, 273, 278, 335, 349, 398, 497, 498, 580, 588, 589, 614, 615, 776, 777, 790, 803, 804, 816, 842, 892, 900, 905, 941, 958, 1007, 1117, 1118, 1201, 1209, 1357], "land": [446, 458, 1059, 1071], "languag": [162, 239, 254, 281, 319, 349, 469, 474, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104, 1116, 1357], "larg": [11, 12, 15, 56, 150, 153, 159, 167], "large_str": [252, 301, 308, 349], "larger": [11, 48, 49, 50, 51, 509, 772, 842, 958], "largest": [209, 312, 349, 419, 747, 748, 842, 858, 921, 958, 1342, 1357], "last": [40, 158, 162, 165, 166, 171, 172, 173, 174, 241, 254, 257, 273, 284, 295, 300, 307, 314, 343, 349, 374, 385, 394, 438, 454, 466, 470, 488, 510, 532, 557, 575, 578, 580, 613, 614, 616, 618, 620, 621, 630, 645, 683, 684, 702, 718, 726, 743, 765, 827, 838, 842, 887, 916, 920, 922, 949, 958, 964, 983, 994, 1003, 1052, 1067, 1083, 1087, 1105, 1129, 1138, 1151, 1163, 1178, 1196, 1199, 1237, 1270, 1288, 1304, 1312, 1329, 1338, 1357, 1378, 1380], "last_column": [41, 349], "later": [254, 289, 349, 603, 887, 911, 958], "latest": [33, 131, 152, 163, 206, 472, 473, 601, 725, 728, 783, 1089, 1090, 1311, 1314], "latt": 964, "latter": [41, 131, 227, 349, 1121, 1357], "lazi": [1, 48, 49, 50, 51, 52, 64, 148, 154, 158, 160, 162, 178, 254, 272, 273, 296, 349, 589, 792, 814, 817, 833, 842, 868, 886, 887, 930, 934, 935, 937, 939, 941, 942, 943, 944, 945, 946, 947, 948, 958, 964, 1366, 1367, 1368, 1369, 1370, 1372, 1385, 1388], "lazili": [148, 149, 154, 158, 160, 162, 163, 164, 165, 166, 167, 864, 958], "lazy_fram": [62, 63, 129], "lazyfram": [0, 1, 10, 56, 57, 58, 59, 60, 62, 63, 64, 95, 129, 143, 148, 154, 158, 160, 162, 163, 164, 165, 166, 167, 168, 171, 172, 178, 192, 213, 218, 256, 272, 273, 289, 296, 349, 441, 505, 580, 603, 820, 821, 832, 842, 854, 955, 956, 957, 963, 964, 1366, 1367, 1370, 1372, 1385, 1386, 1388], "lazyframeext": [903, 958], "lazygroupbi": [881, 882, 907, 958], "lbl": [306, 311, 349], "ldf": [1, 934, 935, 937, 939, 942, 943, 944, 945, 946, 947, 948], "ldot": [496, 842, 1116, 1357], "le": [693, 842, 1357], "lead": [15, 47, 95, 137, 143, 168, 262, 290, 292, 299, 349, 393, 512, 515, 573, 580, 588, 589, 674, 675, 720, 722, 772, 808, 826, 842, 892, 912, 913, 941, 958, 1002, 1194, 1209, 1259, 1261, 1306, 1308, 1357], "leap": [459, 469, 1072, 1086], "leap_year": 459, "learn": [311, 349], "least": [64, 110, 273, 349, 415, 416, 631, 696, 698, 768, 772, 774, 842, 1024, 1025, 1225, 1282, 1284, 1357, 1378], "leav": [6, 264, 316, 349, 580, 896, 924, 958], "left": [16, 17, 41, 56, 171, 172, 173, 174, 239, 253, 254, 281, 318, 349, 439, 495, 496, 497, 498, 524, 526, 637, 650, 654, 656, 658, 660, 662, 665, 667, 669, 673, 746, 768, 776, 777, 781, 782, 784, 785, 790, 800, 801, 816, 829, 830, 832, 842, 882, 886, 887, 907, 925, 958, 1053, 1115, 1116, 1117, 1118, 1144, 1230, 1257, 1340, 1357, 1369, 1373, 1378], "left_clos": [439, 637, 842, 1053, 1230, 1357], "left_on": [253, 254, 318, 349, 886, 887, 925, 958], "left_right": [253, 318, 349, 886, 925, 958], "leftmost": [673, 842, 1257, 1357, 1380], "len": [13, 178, 182, 213, 252, 273, 326, 330, 335, 349, 432, 589, 600, 602, 640, 648, 773, 796, 800, 842, 865, 927, 932, 936, 941, 958, 963, 1046, 1240, 1357], "len_byt": [13, 424, 707, 708, 1033, 1293], "len_char": [423, 706, 1032, 1292], "length": [64, 65, 83, 145, 153, 159, 162, 176, 180, 237, 239, 281, 294, 349, 352, 423, 438, 474, 487, 574, 580, 601, 640, 644, 645, 648, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 682, 702, 706, 707, 709, 710, 713, 715, 726, 735, 769, 800, 801, 814, 817, 818, 819, 833, 842, 882, 901, 907, 915, 958, 1032, 1039, 1052, 1063, 1091, 1104, 1195, 1201, 1222, 1236, 1237, 1240, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1269, 1288, 1292, 1293, 1295, 1296, 1299, 1301, 1312, 1321, 1357, 1374, 1375, 1378], "leq": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "less": [54, 162, 254, 349, 509, 540, 587, 588, 718, 832, 842, 887, 958, 1304, 1388], "letter": [226, 332, 343, 349, 499, 689, 697, 699, 701, 713, 733, 788, 842, 875, 938, 949, 958, 964, 1275, 1283, 1285, 1287, 1299, 1319, 1380], "level": [11, 41, 43, 44, 47, 49, 51, 144, 162, 165, 166, 167, 232, 258, 269, 296, 301, 349, 353, 505, 842, 854, 917, 958, 1332, 1357, 1385], "lexic": [68, 964, 1036], "lf": [10, 48, 49, 50, 51, 59, 95, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 911, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 930, 931, 932, 936, 940, 958, 1374, 1385, 1388], "lf1": [821, 917, 958, 1370, 1372, 1386], "lf2": [821, 917, 958, 1370, 1372, 1386], "lf3": [958, 1370], "lf4": [958, 1370], "lf5": 958, "lf6": 958, "lf_other": [930, 958], "lib": [842, 1332, 1357], "librari": [1, 112, 145, 150, 153, 588, 842, 962, 1388], "life": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "lifetim": [202, 853, 1372], "light": [41, 349], "like": [36, 38, 40, 43, 44, 45, 46, 47, 63, 131, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 218, 239, 246, 248, 253, 284, 289, 306, 307, 349, 352, 441, 447, 511, 552, 588, 606, 640, 696, 721, 722, 753, 838, 842, 859, 864, 869, 882, 958, 1060, 1173, 1232, 1282, 1346, 1357, 1362], "limit": [11, 12, 51, 52, 150, 151, 184, 229, 349, 401, 504, 510, 842, 877, 958, 1010, 1124, 1129, 1357, 1375, 1384], "line": [11, 21, 41, 148, 149, 153, 162, 237, 246, 248, 349, 352, 696, 1282, 1357, 1362], "line_termin": [38, 48, 349, 958], "linear": [217, 245, 275, 341, 349, 524, 525, 547, 592, 638, 661, 662, 770, 771, 815, 842, 868, 885, 902, 947, 958, 1054, 1142, 1143, 1168, 1231, 1248, 1357], "linearli": 801, "lineitem": [139, 149, 151], "link": 962, "list": [1, 14, 34, 40, 41, 56, 57, 59, 62, 63, 65, 71, 87, 104, 129, 130, 132, 133, 134, 136, 137, 139, 142, 143, 146, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 176, 177, 178, 182, 189, 190, 191, 197, 214, 219, 223, 225, 226, 230, 236, 238, 239, 243, 251, 268, 271, 277, 281, 282, 283, 284, 287, 295, 302, 303, 311, 313, 314, 315, 317, 323, 328, 329, 349, 359, 386, 397, 398, 399, 439, 446, 458, 501, 507, 512, 521, 530, 588, 589, 601, 602, 630, 637, 643, 646, 652, 653, 655, 657, 659, 661, 664, 666, 668, 683, 684, 695, 697, 699, 701, 716, 736, 738, 739, 746, 765, 767, 770, 781, 782, 784, 785, 787, 795, 797, 801, 802, 804, 822, 824, 830, 838, 842, 866, 873, 875, 878, 881, 882, 904, 909, 916, 922, 923, 928, 930, 934, 935, 958, 963, 964, 995, 1006, 1007, 1008, 1039, 1053, 1059, 1071, 1114, 1120, 1130, 1133, 1139, 1140, 1149, 1209, 1230, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1275, 1281, 1283, 1285, 1287, 1299, 1302, 1337, 1340, 1357, 1366, 1371, 1375, 1377, 1380, 1387, 1388], "list_catalog": 200, "list_namespac": 200, "list_of_seri": 804, "list_tabl": 200, "listtostructwidthstrategi": [580, 1201], "lit": [1, 360, 402, 526, 597, 613, 700, 769, 770, 776, 790, 814, 817, 832, 833, 842, 1124, 1357], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 48, 49, 50, 51, 150, 152, 158, 160, 162, 163, 164, 165, 166, 167, 181, 182, 183, 192, 195, 199, 268, 287, 288, 292, 318, 323, 324, 349, 360, 402, 421, 425, 428, 450, 472, 493, 494, 502, 509, 514, 516, 526, 540, 587, 597, 609, 611, 624, 625, 635, 644, 645, 688, 689, 690, 699, 700, 701, 711, 712, 713, 740, 741, 749, 758, 760, 762, 768, 769, 770, 771, 779, 780, 783, 796, 800, 802, 806, 808, 811, 820, 824, 826, 828, 832, 842, 877, 909, 910, 913, 925, 928, 929, 958, 964, 1011, 1041, 1063, 1089, 1112, 1122, 1144, 1221, 1236, 1237, 1256, 1258, 1261, 1274, 1275, 1276, 1285, 1286, 1287, 1297, 1298, 1299, 1357, 1380], "littl": [283, 349, 406, 1015], "lmn": 964, "ln": [495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357, 1378], "ln_a": 1379, "load": [3, 5, 6, 133, 135, 145, 150, 152, 153, 159, 163, 164, 181, 183, 349, 842, 854, 958, 1388], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 153, "load_tabl": 153, "load_workbook": 153, "loader": [311, 349], "lobster": [700, 1286], "loc": [349, 353], "local": [4, 40, 150, 152, 163, 164, 167, 349, 487, 632, 633, 842, 1031, 1035, 1065, 1066, 1091, 1094, 1104, 1226, 1227, 1357, 1367], "localhost": 150, "localis": [474, 487, 1104], "locat": [41, 160, 162, 165, 167, 227, 279, 309, 315, 349, 673, 842, 923, 958, 1121, 1130, 1256, 1257, 1357], "lock": 184, "log": [30, 58, 419, 492, 585, 611, 635, 748, 842, 1110, 1357, 1378], "log10": [842, 1357, 1378], "log10_a": 1379, "log16_a": 1379, "log1p": [842, 1357, 1378], "log1p_a": 1379, "log2": 1378, "logarithm": [583, 584, 585, 842, 1204, 1205, 1206, 1357, 1379], "logic": [64, 258, 335, 349, 352, 353, 361, 363, 441, 589, 746, 757, 758, 759, 760, 804, 832, 842, 869, 874, 886, 903, 911, 941, 958, 971, 972, 1209, 1338, 1340, 1357, 1362], "london": [451, 455, 473, 1064, 1068, 1090], "london_timezon": [473, 1090], "london_to_amsterdam": [473, 1090], "long": [226, 264, 273, 316, 317, 349, 406, 875, 896, 924, 958, 1015], "longer": [148, 149, 162], "longest": 580, "look": [11, 239, 349, 402, 580, 882, 958, 1011], "lookup": 838, "loop": [150, 589, 842], "lose": [448, 1061], "lossi": [148, 149, 162], "lot": 54, "love": [689, 713, 1275, 1299], "low": [18, 150, 428, 637, 842, 1230, 1357], "low_memori": [148, 149, 158, 160, 162, 166, 167], "lower": [162, 217, 239, 275, 341, 349, 428, 526, 586, 614, 638, 642, 661, 662, 762, 781, 782, 784, 785, 800, 801, 815, 829, 830, 842, 868, 882, 902, 947, 958, 1041, 1054, 1144, 1207, 1231, 1234, 1248, 1345, 1357, 1375, 1378], "lower_bound": [239, 349, 428, 526, 842, 882, 958, 1041, 1144, 1345, 1357], "lowercas": [620, 731, 733, 1317, 1319, 1380], "lowest": [586, 842], "lru_cach": [258, 349, 589, 842, 1209, 1357], "lst": 177, "lt": [170, 505, 755, 842, 1357], "ltrim": 1378, "lyric": [689, 713, 1275, 1299], "lz4": [43, 44, 47, 49, 51, 349, 958], "lzo": [47, 51, 349, 958], "m": [71, 73, 253, 349, 447, 448, 450, 455, 456, 476, 478, 479, 490, 696, 725, 727, 728, 732, 783, 784, 785, 786, 792, 800, 886, 958, 964, 1060, 1061, 1063, 1068, 1069, 1093, 1095, 1096, 1107, 1282, 1311, 1313, 1314, 1318, 1370, 1380, 1381], "m_2": [681, 842, 1268, 1357], "m_3": [681, 842, 1268, 1357], "m_i": [681, 842, 1268, 1357], "machin": 1388, "maco": 170, "made": [41, 150, 349, 479, 1096], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 64, 72, 78, 130, 131, 132, 133, 134, 136, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 202, 217, 218, 225, 227, 239, 253, 254, 255, 258, 281, 289, 296, 306, 308, 311, 318, 319, 349, 352, 353, 423, 438, 439, 441, 446, 447, 448, 458, 460, 469, 474, 476, 487, 499, 520, 555, 580, 588, 589, 600, 603, 637, 650, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 699, 701, 704, 706, 712, 767, 769, 776, 777, 781, 782, 784, 785, 790, 800, 801, 816, 829, 830, 842, 863, 864, 868, 869, 882, 886, 887, 888, 892, 907, 911, 917, 925, 931, 932, 941, 958, 1032, 1035, 1036, 1052, 1053, 1054, 1059, 1060, 1061, 1071, 1073, 1086, 1091, 1093, 1104, 1114, 1121, 1139, 1176, 1209, 1230, 1242, 1243, 1246, 1248, 1249, 1285, 1287, 1290, 1292, 1336, 1339, 1341, 1357, 1362, 1388], "main": [170, 864, 958], "maintain": [48, 49, 50, 51, 295, 349, 399, 581, 673, 684, 750, 765, 842, 868, 916, 958, 1008, 1202, 1257, 1343, 1357], "maintain_ord": [48, 49, 50, 51, 238, 253, 271, 273, 295, 314, 318, 319, 329, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 359, 399, 409, 414, 417, 419, 512, 515, 581, 589, 684, 748, 750, 765, 842, 864, 874, 881, 886, 901, 914, 916, 922, 925, 935, 937, 939, 942, 943, 944, 945, 946, 947, 948, 958, 1008, 1202, 1343, 1357], "maintainorderjoin": [253, 318, 349, 886, 925, 958], "major": [153, 306, 349], "make": [41, 64, 87, 130, 131, 135, 145, 148, 149, 152, 153, 154, 156, 160, 163, 265, 269, 276, 307, 319, 349, 352, 497, 498, 620, 621, 630, 643, 717, 842, 897, 958, 1117, 1118, 1303, 1338, 1357], "man": [714, 1300], "manag": [55, 96, 97, 199, 853, 854, 1372, 1385], "managed_shallow_clon": 199, "mandatori": [41, 349], "mango": [421, 425, 693, 719, 1029, 1034, 1279, 1305], "mani": [150, 151, 167, 227, 253, 349, 699, 701, 713, 886, 958, 1121, 1285, 1299, 1357, 1361], "manner": 150, "map": [52, 54, 87, 132, 133, 148, 149, 150, 151, 154, 155, 160, 161, 162, 165, 178, 210, 213, 231, 251, 258, 278, 282, 283, 284, 286, 302, 349, 360, 474, 487, 588, 589, 613, 615, 616, 618, 620, 621, 644, 645, 713, 753, 803, 842, 860, 905, 908, 958, 963, 964, 1054, 1091, 1104, 1209, 1236, 1237, 1299, 1346, 1357, 1367, 1369, 1370, 1385], "map_": 116, "map_batch": [842, 958], "map_el": [107, 258, 349, 588, 756, 842, 1357], "map_field": [617, 619], "map_row": 349, "mapelementsstrategi": [589, 842], "mapping_strategi": [630, 842], "march": [476, 1093], "mariadb": 151, "mark": [41, 144, 349, 420, 842, 1028, 1357], "mark_area": [1357, 1362], "mark_attr": [349, 352, 1357, 1362], "mark_bar": [349, 352, 1357, 1362], "mark_lin": [349, 352], "mark_point": [349, 352], "markdown": [7, 21, 202], "marker": [41, 349], "mask": [167, 178, 182, 246, 248, 349, 403, 527, 529, 532, 537, 632, 633, 688, 691, 700, 842, 1012, 1125, 1144, 1145, 1148, 1151, 1157, 1226, 1227, 1258, 1274, 1277, 1286, 1348, 1357], "mass": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "massag": [264, 316, 349, 896, 924, 958], "match": [40, 41, 64, 71, 95, 118, 130, 132, 133, 134, 136, 143, 148, 150, 157, 158, 160, 162, 166, 167, 171, 172, 173, 174, 210, 229, 230, 253, 254, 277, 282, 318, 349, 421, 425, 596, 597, 598, 644, 645, 663, 688, 689, 690, 693, 696, 697, 699, 700, 701, 704, 705, 711, 712, 713, 719, 725, 727, 728, 832, 838, 842, 860, 877, 886, 887, 904, 925, 958, 964, 1029, 1034, 1113, 1236, 1237, 1249, 1274, 1275, 1276, 1279, 1282, 1283, 1285, 1286, 1287, 1290, 1291, 1297, 1298, 1299, 1305, 1311, 1313, 1314, 1357, 1380], "matches_overlap": [699, 701, 1287], "matches_supertyp": [229, 349, 877, 958], "materi": [143, 148, 154, 158, 160, 258, 284, 335, 349, 863, 901, 941, 951, 958, 964, 1209, 1357], "materialis": [251, 252, 282, 283, 349], "materialized_view": 199, "math": [1, 11, 60, 273, 349, 440, 842, 1043, 1045, 1266, 1330, 1357, 1378, 1382, 1384], "mathemat": [749, 787, 842, 1378], "mathshortcut": [1, 60], "matplotlib": [170, 604, 901, 914, 958], "matter": [239, 251, 281, 283, 284, 303, 349, 650, 721, 722, 842, 882, 907, 958], "max": [10, 26, 41, 47, 51, 144, 217, 229, 238, 260, 273, 281, 349, 353, 434, 504, 580, 588, 630, 640, 644, 645, 650, 653, 654, 674, 718, 769, 781, 784, 806, 822, 842, 868, 877, 881, 907, 958, 1048, 1054, 1124, 1201, 1232, 1244, 1259, 1304, 1357, 1366, 1375, 1378], "max_a": [281, 349, 650, 842, 907, 958], "max_binary_s": 150, "max_col": [176, 178], "max_colname_length": [237, 349], "max_color": [41, 349], "max_data_s": 182, "max_elem": 1375, "max_horizont": [349, 805], "max_items_per_column": [237, 349], "max_level": 144, "max_siz": [53, 177, 178, 180, 182, 1388], "max_text_s": 150, "max_valu": 1388, "max_width": [580, 1201], "maxim": [336, 372, 842, 942, 981, 1357], "maximum": [11, 27, 38, 47, 48, 51, 53, 72, 133, 136, 148, 149, 150, 153, 157, 158, 159, 162, 166, 168, 176, 177, 178, 180, 182, 237, 239, 259, 260, 349, 379, 424, 545, 590, 622, 632, 640, 702, 704, 707, 715, 726, 805, 806, 842, 882, 893, 958, 988, 1033, 1074, 1166, 1210, 1218, 1226, 1232, 1288, 1290, 1293, 1301, 1312, 1357, 1374], "mb": [225, 349, 407, 1114, 1357], "me": [689, 713, 733, 1275, 1299, 1319], "mean": [47, 51, 62, 129, 148, 149, 154, 160, 162, 165, 202, 217, 229, 238, 239, 254, 262, 273, 281, 319, 328, 349, 469, 474, 487, 501, 504, 509, 650, 654, 655, 656, 658, 660, 662, 665, 667, 669, 681, 687, 696, 703, 781, 782, 784, 785, 786, 808, 829, 830, 832, 842, 868, 877, 881, 882, 887, 892, 907, 934, 958, 1054, 1086, 1091, 1104, 1120, 1124, 1245, 1268, 1273, 1282, 1289, 1357, 1374, 1375], "mean_horizont": [349, 807], "measur": [264, 316, 349, 353, 896, 924, 958], "measure_a": [349, 353], "measure_b": [349, 353], "median": [217, 273, 349, 504, 657, 658, 842, 868, 930, 958, 1054, 1246, 1357, 1378], "mediat": 1385, "medium": [41, 349], "megan": [265, 349, 897, 958], "melt": [316, 349, 924, 958], "member": [239, 349, 882, 958, 1149, 1357], "membership": [381, 548, 990, 1169], "memori": [10, 15, 47, 51, 62, 63, 64, 130, 131, 134, 135, 136, 148, 149, 150, 152, 153, 154, 158, 160, 162, 163, 165, 166, 167, 206, 227, 258, 283, 284, 293, 307, 335, 349, 630, 641, 676, 842, 863, 864, 874, 901, 914, 933, 958, 1121, 1209, 1233, 1262, 1263, 1338, 1357], "memory_map": [154, 160, 165], "memory_resourc": 933, "merg": [40, 253, 254, 265, 349, 886, 887, 897, 958], "merge_sort": [349, 958], "messi": [696, 698, 1282, 1284], "met": 832, "meta": [98, 441, 694, 842, 1280], "metadata": [0, 48, 49, 50, 51, 164, 188, 192, 854, 958], "metastor": 193, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 52, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 128, 131, 140, 141, 142, 146, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 168, 175, 178, 182, 187, 193, 194, 196, 197, 202, 204, 213, 217, 218, 221, 222, 227, 234, 238, 245, 251, 258, 269, 275, 282, 283, 284, 292, 314, 323, 330, 335, 341, 349, 358, 361, 362, 393, 428, 441, 476, 479, 493, 494, 502, 509, 511, 514, 516, 524, 540, 573, 587, 589, 607, 609, 611, 613, 614, 616, 618, 620, 621, 624, 625, 626, 629, 635, 638, 640, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 675, 689, 699, 701, 713, 721, 722, 723, 724, 729, 735, 741, 749, 751, 756, 772, 804, 815, 834, 835, 837, 838, 842, 843, 844, 847, 848, 849, 850, 851, 854, 864, 868, 869, 871, 872, 885, 902, 913, 922, 928, 933, 936, 941, 947, 958, 963, 966, 973, 1002, 1041, 1054, 1093, 1096, 1111, 1112, 1121, 1122, 1132, 1134, 1142, 1161, 1194, 1208, 1209, 1220, 1221, 1231, 1232, 1248, 1261, 1275, 1285, 1287, 1299, 1315, 1321, 1340, 1349, 1351, 1353, 1357, 1358, 1361, 1363, 1364, 1365, 1367, 1371], "metric": 150, "micro": [475, 1092], "microsecond": [71, 73, 239, 251, 254, 281, 283, 284, 303, 319, 349, 469, 472, 474, 479, 482, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 783, 784, 785, 786, 828, 829, 830, 842, 882, 887, 901, 907, 958, 964, 1086, 1089, 1091, 1099, 1104, 1116, 1357, 1381], "microsoft": [34, 41, 349], "mid_color": [41, 349], "midnight": 88, "midpoint": [217, 275, 341, 349, 638, 661, 662, 815, 842, 868, 902, 947, 958, 1054, 1231, 1248, 1357], "might": [148, 149, 162, 184, 253, 273, 307, 316, 349, 589, 751, 842, 886, 916, 924, 958], "millennia": 1381, "millennium": 1381, "milli": [475, 1092], "millisecond": [239, 254, 281, 319, 349, 457, 464, 469, 474, 483, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 784, 785, 786, 800, 829, 830, 842, 882, 887, 907, 958, 964, 1086, 1091, 1100, 1104, 1116, 1357, 1381], "milliseconds_diff": [482, 483, 485], "mimic": 770, "min": [41, 47, 51, 145, 217, 229, 267, 273, 281, 349, 435, 504, 589, 630, 640, 650, 659, 660, 781, 784, 811, 820, 842, 868, 877, 907, 958, 1049, 1054, 1124, 1232, 1247, 1357, 1375, 1378, 1381, 1388], "min_a": [281, 349, 650, 842, 907, 958], "min_col": [176, 178], "min_color": [41, 349], "min_elem": 1375, "min_horizont": [349, 810, 820], "min_sampl": [438, 495, 497, 498, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 818, 819, 842, 1052, 1115, 1117, 1118, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357], "min_siz": [177, 178, 180, 182, 1388], "min_valu": 1388, "mincol": 176, "minim": [339, 373, 380, 546, 676, 684, 842, 945, 982, 989, 1167, 1213, 1262, 1357], "minimum": [47, 51, 176, 177, 178, 180, 182, 232, 266, 267, 349, 495, 497, 498, 608, 623, 633, 640, 810, 811, 842, 898, 958, 1080, 1115, 1117, 1118, 1219, 1227, 1232, 1357, 1374, 1388], "minu": [469, 626, 842, 1086], "minut": [239, 254, 281, 319, 349, 457, 461, 463, 468, 469, 472, 474, 475, 484, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 783, 784, 785, 786, 828, 829, 830, 842, 882, 887, 907, 958, 964, 1086, 1089, 1091, 1101, 1104, 1116, 1357, 1381], "minutes_diff": 484, "misc": 1372, "miscellan": 854, "mismatch": [64, 121, 158, 166, 171, 173], "miss": [64, 148, 149, 162, 228, 234, 349, 401, 495, 497, 498, 503, 510, 533, 534, 580, 842, 876, 958, 1010, 1115, 1117, 1118, 1123, 1129, 1357], "missing_utf8_is_empty_str": [148, 149, 162], "mix": [12, 254, 307, 349, 769, 821, 887, 917, 958, 964, 1054, 1357], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 54, 958], "mlnm": 462, "mm": [41, 349], "mn": 1380, "mno": [17, 21], "mnop": 1380, "mo": 786, "mocha": 964, "mod": [842, 1378], "mode": [39, 40, 41, 42, 48, 49, 50, 51, 171, 173, 273, 296, 349, 670, 697, 814, 817, 833, 842, 863, 874, 901, 914, 958, 1253, 1283, 1357, 1366, 1367, 1385], "model": [311, 349], "modifi": [52, 53, 54, 148, 149, 162, 184, 202, 227, 243, 250, 251, 321, 349, 375, 473, 490, 688, 696, 697, 700, 711, 712, 731, 733, 734, 842, 973, 1090, 1107, 1121, 1274, 1282, 1283, 1286, 1297, 1298, 1317, 1319, 1320, 1357], "modul": [100, 108, 153, 841, 962, 964, 1388], "modulu": [609, 842], "moment": [47, 48, 49, 50, 51, 62, 63, 215, 349, 538, 681, 842, 863, 864, 874, 901, 914, 958, 1159, 1268, 1357], "mon": [349, 352, 1381], "mondai": [239, 349, 446, 458, 487, 489, 767, 882, 958, 1059, 1071, 1104, 1106], "monkei": [709, 710, 1295, 1296], "month": [239, 254, 281, 319, 349, 454, 466, 467, 469, 472, 474, 476, 479, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 780, 781, 782, 783, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 1067, 1083, 1084, 1086, 1089, 1091, 1093, 1096, 1104, 1116, 1357, 1381], "month_nam": [476, 479], "monthbegin": [467, 1084], "monthend": [466, 1083], "moos": 964, "more": [21, 41, 47, 51, 56, 64, 96, 97, 126, 130, 131, 132, 133, 134, 135, 136, 143, 145, 150, 151, 152, 153, 157, 158, 159, 160, 163, 164, 166, 171, 173, 178, 202, 204, 215, 217, 221, 230, 250, 251, 258, 264, 269, 277, 282, 283, 285, 296, 306, 307, 311, 314, 316, 335, 349, 353, 362, 399, 423, 505, 509, 517, 538, 568, 581, 585, 588, 589, 629, 630, 672, 681, 697, 706, 725, 727, 728, 750, 761, 773, 789, 795, 798, 807, 809, 812, 813, 822, 832, 838, 842, 868, 871, 872, 878, 896, 903, 904, 917, 922, 924, 933, 958, 962, 964, 966, 1008, 1032, 1035, 1054, 1135, 1136, 1159, 1189, 1202, 1209, 1255, 1268, 1283, 1292, 1311, 1313, 1314, 1336, 1338, 1343, 1357, 1372, 1373, 1383, 1386, 1387, 1388], "more_bi": [271, 295, 349, 684, 842, 916, 958], "more_column": [226, 315, 349, 499, 788, 842, 875, 923, 958, 964], "more_expr": [630, 765, 768, 769, 770, 771, 842], "more_nam": [736, 838], "most": [41, 130, 148, 149, 151, 162, 171, 172, 173, 174, 307, 349, 412, 413, 601, 610, 631, 645, 718, 842, 1021, 1022, 1214, 1225, 1237, 1304, 1338, 1357, 1369, 1385], "mostli": [301, 349, 505, 842], "move": [273, 284, 349, 446, 495, 496, 497, 498, 653, 655, 659, 666, 832, 842, 1059, 1115, 1116, 1117, 1118, 1244, 1245, 1247, 1251, 1357], "mr": 933, "mssql": [39, 349], "much": [258, 317, 335, 349, 423, 424, 438, 555, 589, 706, 707, 804, 842, 941, 1032, 1033, 1052, 1176, 1209, 1292, 1293, 1357], "mul": 842, "multi": [8, 41, 148, 149, 311, 349, 499, 696, 842, 1282], "multi_fram": [41, 349], "multicolselector": 207, "multiindexselector": [207, 968], "multipl": [41, 54, 62, 63, 64, 113, 129, 148, 149, 153, 154, 158, 159, 160, 162, 165, 166, 167, 176, 178, 182, 219, 225, 227, 230, 238, 239, 243, 252, 255, 271, 273, 277, 284, 287, 295, 318, 323, 328, 349, 419, 555, 588, 594, 601, 610, 611, 630, 644, 646, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 684, 736, 748, 765, 773, 790, 803, 805, 810, 816, 822, 825, 832, 838, 842, 854, 863, 864, 870, 874, 878, 881, 882, 888, 901, 904, 909, 914, 916, 925, 928, 934, 941, 958, 973, 1003, 1114, 1121, 1176, 1196, 1214, 1236, 1238, 1270, 1357, 1370, 1375], "multipli": [588, 652, 653, 655, 657, 659, 661, 664, 666, 668, 740, 842, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1357], "multithread": [295, 349, 684, 765, 842, 916, 958, 1003, 1196, 1270, 1357], "must": [34, 41, 74, 95, 132, 143, 145, 148, 152, 160, 162, 163, 164, 167, 168, 217, 226, 239, 254, 255, 265, 273, 281, 282, 349, 439, 580, 589, 604, 637, 644, 645, 650, 713, 769, 781, 782, 790, 801, 832, 842, 868, 875, 882, 887, 888, 892, 897, 907, 914, 933, 958, 1053, 1054, 1230, 1236, 1237, 1299, 1357], "mutual": [282, 349], "my": [164, 168, 349, 352, 1357, 1362], "my_bucket": [903, 958], "my_column": 941, "my_column_": [313, 349], "my_column_0": [313, 349], "my_column_1": [313, 349], "my_column_2": [313, 349], "my_custom_aggreg": 804, "my_fil": 154, "my_holidai": [446, 458, 767, 1059, 1071], "my_larger_than_ram_fil": [48, 49, 50, 51, 958], "my_long_fil": 162, "my_struct": 824, "mydf": 162, "myrol": 151, "mysql": 151, "n": [1, 13, 14, 18, 26, 27, 38, 46, 48, 57, 58, 59, 60, 71, 73, 139, 143, 148, 149, 153, 158, 162, 178, 211, 227, 233, 239, 241, 251, 252, 257, 258, 283, 284, 285, 292, 297, 300, 303, 305, 320, 332, 334, 343, 349, 365, 393, 398, 407, 409, 414, 417, 418, 419, 423, 424, 438, 442, 446, 448, 450, 456, 478, 490, 496, 502, 505, 513, 519, 542, 550, 556, 558, 568, 569, 573, 576, 578, 580, 582, 631, 634, 643, 664, 665, 668, 669, 672, 675, 681, 686, 702, 706, 707, 711, 712, 717, 718, 720, 721, 726, 728, 743, 747, 748, 749, 753, 754, 756, 774, 783, 784, 785, 786, 792, 794, 814, 817, 818, 819, 820, 823, 827, 831, 833, 842, 861, 880, 882, 883, 891, 913, 918, 920, 926, 938, 940, 949, 958, 964, 1002, 1007, 1016, 1027, 1032, 1033, 1040, 1052, 1055, 1059, 1061, 1063, 1069, 1095, 1107, 1116, 1121, 1122, 1131, 1138, 1163, 1171, 1177, 1179, 1189, 1190, 1194, 1199, 1201, 1225, 1250, 1252, 1255, 1261, 1268, 1272, 1288, 1292, 1293, 1297, 1298, 1303, 1304, 1312, 1314, 1329, 1335, 1342, 1346, 1347, 1357, 1369, 1370, 1377, 1380, 1381, 1383, 1385, 1388], "n0": [398, 580], "n00": [1007, 1201], "n01": [1007, 1201], "n02": [1007, 1201], "n1": [398, 580], "n2": [1, 398], "n3": 1, "n_1": [505, 842], "n_2": [505, 842], "n_3": [505, 842], "n_bar": 1374, "n_bit": 1380, "n_byte": [407, 423, 424, 706, 707, 1380], "n_char": [423, 424, 706, 707, 1380], "n_chunk": [349, 973, 1121, 1233, 1357], "n_elem": 1375, "n_even": 964, "n_field_strategi": [580, 1201], "n_film": 1366, "n_foo_uniqu": 1374, "n_kilobyt": 407, "n_row": [143, 146, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 252, 349, 958], "n_thread": [148, 149], "n_uniqu": [349, 365, 842, 1357], "na": [308, 349, 719, 1339, 1357], "naiv": [450, 451, 728, 1063, 1064, 1314], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 48, 57, 58, 59, 60, 75, 87, 105, 130, 132, 133, 134, 135, 136, 141, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 173, 174, 175, 176, 178, 181, 182, 183, 188, 190, 191, 192, 193, 194, 196, 197, 209, 210, 213, 214, 219, 220, 221, 222, 226, 230, 231, 234, 235, 237, 238, 249, 250, 251, 253, 254, 255, 258, 260, 262, 264, 265, 267, 271, 273, 277, 278, 282, 283, 284, 286, 287, 288, 295, 296, 299, 302, 304, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 334, 349, 353, 360, 398, 402, 403, 405, 408, 419, 428, 439, 476, 479, 499, 505, 526, 533, 534, 535, 536, 580, 589, 594, 598, 600, 602, 606, 630, 637, 647, 684, 697, 698, 711, 712, 713, 736, 738, 740, 748, 753, 757, 758, 759, 760, 761, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 788, 789, 794, 795, 798, 805, 806, 807, 808, 809, 810, 811, 812, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 831, 832, 838, 842, 858, 860, 865, 866, 870, 871, 872, 875, 878, 881, 886, 887, 888, 896, 897, 904, 905, 908, 909, 910, 916, 917, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 934, 940, 958, 963, 964, 970, 1007, 1040, 1053, 1093, 1096, 1113, 1201, 1230, 1235, 1282, 1283, 1284, 1297, 1298, 1322, 1325, 1333, 1334, 1339, 1346, 1357, 1362, 1367, 1368, 1369, 1370, 1371, 1372, 1384, 1385, 1388], "name_gener": [313, 349], "named_agg": [328, 934], "named_bi": [238, 349, 881, 958], "named_expr": [287, 288, 323, 324, 349, 740, 820, 824, 909, 910, 928, 929, 958], "named_fram": [1370, 1385], "nameless": 135, "namespac": [1, 150, 188, 190, 191, 192, 196, 348, 349, 352, 736, 821, 841, 854, 956, 957, 962, 1357, 1362, 1388], "namespaceinfo": [190, 200], "nan": [135, 178, 206, 221, 228, 307, 308, 349, 444, 445, 493, 494, 503, 514, 516, 524, 533, 534, 535, 536, 540, 587, 590, 608, 622, 623, 624, 625, 652, 678, 749, 772, 842, 871, 876, 958, 976, 980, 1057, 1058, 1123, 1152, 1153, 1218, 1219, 1243, 1265, 1338, 1339, 1357, 1388], "nan_as_nul": 206, "nan_max": [842, 1357], "nan_min": [842, 1357], "nan_to_nul": [135, 349, 958, 1357], "nana": 1380, "nanmax": [622, 623, 842, 1218, 1219, 1357], "nanosecond": [88, 239, 254, 281, 319, 349, 469, 474, 475, 485, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1092, 1102, 1104, 1116, 1357, 1381], "nansum": [652, 842, 1243, 1357], "nativ": [11, 39, 148, 150, 153, 154, 156, 160, 164, 198, 251, 258, 283, 284, 303, 307, 335, 349, 589, 804, 821, 842, 848, 917, 941, 958, 962, 1209, 1338, 1357, 1361, 1385, 1388], "natur": [585, 842, 1206, 1357, 1373, 1379], "ndarrai": [134, 204, 230, 277, 307, 349, 512, 673, 842, 878, 904, 958, 966, 1130, 1256, 1257, 1338, 1357], "ndjson": [50, 158, 958], "ne": [625, 842, 1221, 1357], "ne_miss": [230, 277, 349, 842, 878, 904, 958, 1112, 1357], "nearest": [58, 217, 254, 275, 341, 349, 427, 508, 524, 638, 661, 662, 815, 842, 868, 887, 902, 947, 958, 1038, 1054, 1128, 1142, 1231, 1248, 1357, 1379], "nearest_pow2": 58, "necessari": [38, 39, 48, 55, 97, 153, 164, 307, 349, 958, 1338, 1357], "need": [64, 99, 108, 137, 148, 149, 151, 160, 162, 165, 167, 202, 239, 281, 284, 293, 349, 352, 580, 650, 676, 711, 712, 713, 729, 786, 814, 817, 833, 842, 882, 907, 958, 1262, 1297, 1298, 1299, 1315, 1357, 1362, 1388], "neg": [14, 70, 71, 72, 73, 148, 149, 154, 156, 160, 169, 241, 257, 281, 292, 294, 300, 326, 349, 393, 573, 574, 634, 635, 650, 675, 682, 702, 715, 726, 842, 907, 913, 915, 931, 932, 958, 964, 1002, 1138, 1163, 1194, 1195, 1228, 1261, 1269, 1288, 1301, 1312, 1329, 1357], "negat": [627, 842, 1223, 1357], "neither": [137, 153, 159, 285, 349, 398, 580, 1007, 1201], "nest": [55, 137, 144, 179, 180, 225, 349, 854, 1114, 1357, 1385, 1388], "nesting_level": 179, "net": [697, 1283], "netherland": [254, 349, 887, 958], "netsuite_format": 195, "never": [38, 48, 150, 253, 254, 282, 349, 886, 887, 958], "new": [39, 40, 41, 42, 53, 54, 162, 202, 207, 233, 243, 244, 258, 269, 270, 273, 278, 313, 315, 317, 318, 323, 324, 349, 360, 450, 501, 511, 513, 524, 614, 615, 630, 644, 645, 649, 708, 711, 712, 717, 718, 736, 738, 838, 842, 854, 880, 905, 923, 925, 928, 929, 941, 958, 968, 970, 1063, 1120, 1131, 1222, 1235, 1236, 1237, 1241, 1297, 1298, 1303, 1304, 1322, 1325, 1334, 1357, 1385, 1387], "new_column": [148, 149, 153, 162], "new_dai": 472, "new_dat": 469, "new_df": [318, 349, 925, 958], "new_fil": [36, 38, 43, 44, 47, 349], "new_from_index": 1357, "new_id": [313, 349], "new_lf": [925, 958], "new_tabl": 1387, "new_valu": [776, 777, 790, 816], "new_york": 784, "newli": 56, "newlin": [46, 148, 158, 162, 166, 349], "next": [19, 58, 239, 254, 281, 319, 349, 401, 446, 469, 474, 487, 640, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1010, 1059, 1086, 1091, 1104, 1232, 1357], "next_batch": 149, "next_pow2": 58, "nfc": [708, 1294, 1380], "nfd": [708, 1294, 1380], "nfkc": [708, 1294, 1380], "nfkd": [708, 1294, 1380], "nfruit": 726, "nl": [446, 458, 767, 1059, 1071], "nnel_id": 137, "no1": 964, "no_default": [234, 349, 644, 645, 713, 842, 1236, 1237, 1299, 1357], "no_optim": [48, 49, 50, 51, 62, 63, 129, 863, 864, 892, 901, 958], "nodataerror": [148, 149, 153, 159, 162], "nodd": [696, 1282], "node": [859, 863, 884, 892, 896, 901, 905, 958], "nodefault": [234, 349, 644, 645, 713, 842, 1236, 1237, 1299, 1357], "non": [4, 5, 38, 40, 41, 48, 56, 71, 72, 135, 145, 169, 209, 216, 252, 264, 281, 287, 288, 292, 312, 313, 316, 318, 323, 324, 349, 401, 418, 419, 423, 428, 432, 433, 446, 473, 510, 526, 580, 588, 589, 595, 630, 631, 640, 644, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 690, 697, 706, 711, 712, 713, 733, 735, 740, 747, 748, 758, 760, 768, 769, 770, 771, 773, 775, 779, 786, 806, 808, 811, 818, 819, 820, 824, 826, 842, 858, 867, 896, 907, 909, 910, 913, 921, 924, 925, 928, 929, 958, 964, 1010, 1027, 1032, 1041, 1046, 1047, 1054, 1059, 1090, 1129, 1144, 1201, 1209, 1225, 1236, 1237, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1261, 1276, 1283, 1292, 1297, 1298, 1319, 1321, 1338, 1342, 1357, 1377, 1385], "non_exist": [473, 1090], "non_numer": [38, 48, 349, 958], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 65, 68, 71, 72, 73, 74, 75, 83, 87, 97, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 192, 193, 194, 196, 197, 198, 202, 204, 205, 211, 216, 217, 221, 222, 228, 229, 230, 232, 234, 237, 239, 240, 245, 249, 253, 254, 256, 258, 261, 264, 269, 270, 273, 277, 281, 282, 285, 289, 292, 294, 295, 301, 302, 304, 306, 307, 308, 311, 313, 314, 315, 316, 317, 318, 319, 330, 334, 349, 361, 363, 364, 376, 377, 378, 385, 386, 398, 401, 421, 423, 424, 425, 428, 432, 433, 434, 437, 439, 444, 445, 453, 469, 472, 473, 479, 494, 495, 496, 497, 498, 499, 502, 503, 504, 510, 517, 518, 520, 522, 524, 525, 526, 533, 534, 535, 536, 541, 543, 544, 551, 557, 559, 561, 568, 569, 570, 571, 572, 574, 580, 588, 589, 600, 603, 604, 605, 607, 612, 625, 626, 627, 628, 630, 631, 637, 640, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 675, 676, 677, 678, 682, 683, 687, 688, 690, 692, 693, 694, 697, 700, 702, 703, 704, 705, 706, 707, 709, 710, 715, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 730, 732, 735, 736, 737, 738, 739, 746, 753, 758, 759, 760, 762, 768, 769, 770, 771, 772, 773, 775, 779, 781, 782, 783, 784, 785, 786, 788, 789, 790, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 808, 811, 817, 818, 819, 824, 826, 828, 829, 830, 832, 842, 861, 862, 864, 867, 868, 871, 872, 874, 876, 877, 878, 882, 885, 886, 887, 890, 892, 896, 899, 903, 904, 907, 911, 913, 914, 915, 916, 922, 923, 924, 925, 930, 933, 936, 940, 941, 950, 951, 958, 963, 964, 966, 967, 971, 972, 974, 981, 982, 986, 987, 994, 995, 1007, 1010, 1018, 1023, 1026, 1029, 1032, 1033, 1034, 1040, 1041, 1046, 1047, 1053, 1054, 1056, 1057, 1058, 1066, 1074, 1075, 1076, 1080, 1089, 1090, 1096, 1110, 1112, 1115, 1116, 1117, 1118, 1122, 1123, 1124, 1126, 1129, 1135, 1137, 1139, 1141, 1142, 1143, 1144, 1149, 1154, 1155, 1158, 1159, 1160, 1162, 1164, 1165, 1168, 1172, 1178, 1180, 1182, 1189, 1190, 1191, 1192, 1193, 1195, 1201, 1209, 1210, 1211, 1212, 1213, 1221, 1224, 1230, 1231, 1232, 1236, 1237, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1261, 1264, 1265, 1268, 1269, 1272, 1273, 1274, 1276, 1278, 1279, 1280, 1283, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1311, 1312, 1313, 1314, 1316, 1318, 1321, 1324, 1332, 1334, 1335, 1336, 1338, 1339, 1340, 1346, 1347, 1357, 1366, 1368, 1369, 1370, 1372, 1375, 1377, 1380, 1381, 1385], "nonexist": [473, 1090], "nor": [153, 159, 285, 349], "normal": [40, 144, 239, 349, 492, 538, 651, 681, 753, 842, 882, 958, 1110, 1159, 1242, 1268, 1346, 1357, 1378], "normalised_scor": 150, "norowsreturnederror": [282, 349], "north": 74, "not_": [323, 349, 832, 842, 928, 958, 964, 1357], "not_c": [323, 349, 928, 958], "notabl": 150, "notat": [12, 41, 349], "note": [4, 11, 21, 40, 41, 47, 55, 56, 63, 64, 70, 71, 73, 88, 96, 97, 130, 131, 132, 134, 136, 137, 144, 148, 150, 151, 152, 153, 157, 158, 159, 162, 163, 164, 166, 168, 171, 173, 176, 178, 182, 184, 202, 206, 213, 215, 217, 218, 221, 225, 228, 230, 239, 240, 249, 250, 251, 253, 254, 258, 265, 269, 272, 273, 277, 278, 281, 282, 283, 284, 289, 292, 296, 303, 306, 308, 311, 313, 314, 316, 318, 319, 323, 325, 326, 349, 393, 406, 421, 423, 424, 425, 428, 436, 437, 441, 444, 445, 451, 466, 467, 469, 474, 479, 487, 496, 503, 509, 511, 518, 526, 533, 534, 552, 555, 573, 580, 589, 603, 604, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 644, 645, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 675, 677, 681, 687, 688, 689, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 711, 712, 713, 715, 720, 721, 722, 725, 726, 733, 735, 736, 742, 749, 758, 760, 767, 776, 781, 782, 784, 785, 786, 790, 800, 802, 814, 816, 817, 821, 829, 830, 832, 833, 838, 842, 853, 864, 868, 869, 871, 876, 878, 882, 887, 897, 904, 905, 907, 911, 913, 914, 916, 917, 922, 924, 925, 928, 931, 932, 958, 962, 964, 1002, 1015, 1032, 1033, 1041, 1050, 1051, 1054, 1057, 1058, 1064, 1083, 1084, 1086, 1091, 1096, 1104, 1114, 1116, 1123, 1137, 1144, 1173, 1176, 1194, 1209, 1236, 1237, 1241, 1249, 1256, 1258, 1261, 1263, 1268, 1273, 1274, 1275, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1292, 1293, 1297, 1298, 1299, 1301, 1306, 1307, 1308, 1311, 1312, 1319, 1321, 1328, 1339, 1341, 1357, 1366, 1367, 1371, 1372, 1380, 1383, 1385], "noth": [21, 696, 705, 1282, 1291], "notic": [150, 230, 349, 878, 958, 1357], "notimplementederror": [10, 206], "now": [56, 153, 281, 307, 349, 597, 907, 958, 1338, 1357], "np": [95, 134, 204, 230, 277, 307, 349, 512, 588, 673, 842, 878, 904, 958, 966, 1130, 1147, 1150, 1152, 1153, 1256, 1257, 1357], "npt": [204, 966], "nr": [332, 343, 938, 949], "nth": [233, 349, 513, 718, 838, 842, 880, 958, 1131, 1304, 1357], "nthe": [696, 1282], "nthose": [696, 1282], "nu": 693, "null": [17, 38, 40, 47, 48, 51, 56, 64, 71, 132, 133, 136, 144, 148, 149, 158, 160, 162, 166, 167, 168, 175, 178, 182, 206, 209, 210, 211, 216, 217, 221, 222, 224, 229, 230, 232, 245, 253, 261, 262, 263, 270, 273, 275, 277, 292, 295, 297, 298, 299, 302, 307, 308, 312, 315, 318, 320, 323, 330, 349, 361, 363, 364, 374, 377, 378, 385, 386, 393, 394, 401, 403, 406, 418, 419, 420, 421, 423, 424, 425, 428, 432, 433, 434, 437, 442, 444, 445, 469, 472, 473, 480, 481, 482, 483, 484, 485, 486, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 510, 517, 522, 524, 525, 530, 533, 534, 535, 536, 541, 543, 544, 550, 551, 554, 555, 557, 559, 560, 561, 569, 570, 571, 572, 573, 575, 580, 588, 589, 612, 625, 626, 627, 628, 630, 631, 640, 641, 645, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 675, 676, 678, 683, 684, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 706, 707, 709, 710, 715, 717, 718, 719, 725, 726, 728, 730, 735, 736, 737, 738, 739, 746, 747, 748, 757, 758, 759, 760, 765, 768, 769, 770, 771, 773, 775, 779, 783, 788, 799, 802, 806, 808, 811, 818, 819, 824, 826, 832, 842, 858, 861, 867, 868, 871, 872, 877, 878, 885, 886, 899, 904, 913, 916, 921, 923, 925, 928, 930, 936, 958, 964, 971, 972, 983, 986, 987, 994, 995, 1002, 1003, 1010, 1012, 1015, 1027, 1028, 1029, 1032, 1033, 1034, 1040, 1041, 1046, 1047, 1055, 1057, 1058, 1089, 1090, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1112, 1113, 1115, 1116, 1117, 1118, 1122, 1124, 1125, 1129, 1135, 1136, 1141, 1142, 1143, 1149, 1154, 1155, 1156, 1162, 1164, 1165, 1168, 1171, 1172, 1175, 1176, 1178, 1180, 1181, 1182, 1191, 1193, 1194, 1196, 1201, 1209, 1221, 1224, 1225, 1237, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1261, 1265, 1270, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1301, 1303, 1304, 1305, 1311, 1312, 1314, 1316, 1321, 1324, 1335, 1338, 1339, 1340, 1342, 1357, 1369, 1373, 1375, 1377, 1380, 1381, 1383, 1385, 1386, 1388], "null_behavior": [442, 550, 842, 1055, 1171, 1357], "null_count": [47, 51, 217, 222, 349, 438, 842, 868, 958, 1052, 1054, 1357], "null_equ": [224, 349, 1113, 1357], "null_on_oob": [385, 555, 557, 994, 1176, 1178], "null_prob": [175, 178, 182], "null_valu": [38, 48, 148, 149, 162, 349, 958], "nullabl": [40, 349], "nullbehavior": [442, 550, 842, 1055, 1171, 1357], "nullif": 1378, "nulls_equ": [253, 349, 530, 842, 886, 958, 1149, 1357], "nulls_last": [295, 349, 374, 394, 575, 630, 683, 684, 765, 842, 916, 958, 983, 1003, 1156, 1196, 1270, 1357], "num": [14, 41, 310, 349, 526, 842, 1144, 1357], "num_row": 206, "num_sampl": [800, 801], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 48, 49, 50, 51, 55, 56, 70, 71, 72, 88, 97, 118, 130, 132, 133, 134, 136, 139, 144, 148, 149, 150, 151, 153, 157, 158, 159, 160, 162, 165, 166, 167, 169, 176, 178, 181, 183, 184, 185, 192, 209, 211, 216, 225, 226, 228, 229, 237, 241, 242, 251, 252, 257, 268, 269, 281, 285, 292, 297, 300, 312, 317, 320, 322, 330, 332, 334, 343, 349, 375, 391, 393, 398, 401, 410, 411, 412, 413, 415, 416, 418, 419, 424, 432, 438, 439, 442, 446, 449, 457, 460, 462, 464, 465, 475, 488, 489, 491, 495, 496, 497, 498, 502, 503, 504, 510, 519, 533, 534, 541, 542, 550, 558, 561, 566, 568, 573, 576, 578, 580, 582, 630, 634, 637, 640, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 686, 702, 704, 706, 707, 711, 715, 717, 718, 726, 729, 743, 747, 748, 754, 767, 772, 773, 774, 786, 794, 799, 800, 801, 818, 819, 823, 827, 831, 842, 858, 861, 867, 875, 876, 877, 883, 891, 901, 913, 918, 920, 921, 926, 927, 936, 938, 940, 949, 958, 963, 1000, 1002, 1007, 1010, 1019, 1020, 1021, 1022, 1024, 1025, 1027, 1033, 1040, 1046, 1052, 1053, 1055, 1059, 1062, 1070, 1073, 1078, 1081, 1082, 1092, 1105, 1106, 1108, 1114, 1115, 1116, 1117, 1118, 1122, 1123, 1124, 1129, 1138, 1162, 1163, 1171, 1179, 1182, 1187, 1189, 1194, 1199, 1201, 1215, 1216, 1230, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1261, 1264, 1272, 1288, 1290, 1292, 1293, 1297, 1301, 1303, 1304, 1312, 1315, 1329, 1342, 1347, 1357, 1373, 1376, 1379, 1388], "number_of_two": [382, 549], "numbers_decim": 729, "numer": [11, 17, 38, 41, 48, 152, 163, 210, 219, 254, 307, 308, 316, 317, 349, 358, 406, 420, 428, 509, 526, 585, 609, 611, 635, 643, 676, 678, 698, 735, 741, 749, 800, 842, 854, 860, 870, 887, 924, 958, 964, 1015, 1028, 1041, 1054, 1144, 1262, 1265, 1284, 1321, 1338, 1357, 1379, 1388], "numeric_dtyp": 1388, "numericliter": [428, 800, 801, 842, 1041, 1357], "numpi": [95, 103, 134, 170, 204, 215, 251, 283, 284, 303, 307, 308, 349, 588, 622, 623, 652, 842, 958, 966, 1147, 1150, 1152, 1153, 1218, 1219, 1243, 1338, 1339, 1357], "nworld": 720, "o": [154, 165, 407, 418, 419, 438, 695, 747, 748, 842, 1016, 1027, 1052, 1281, 1306, 1342, 1357, 1370], "oauth": 164, "obj": 964, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 64, 87, 106, 130, 131, 132, 137, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 176, 178, 179, 205, 206, 213, 218, 225, 238, 239, 254, 256, 271, 281, 284, 289, 296, 306, 307, 308, 349, 441, 603, 781, 782, 784, 785, 802, 821, 829, 830, 842, 854, 863, 869, 874, 882, 887, 890, 901, 907, 914, 917, 955, 958, 964, 967, 1114, 1332, 1357, 1367, 1369, 1372, 1385, 1387], "observ": [253, 349, 439, 495, 496, 497, 498, 637, 842, 886, 958, 1053, 1115, 1116, 1117, 1118, 1230, 1357], "obtain": 580, "obvious": 738, "occur": [41, 62, 63, 104, 113, 119, 129, 255, 349, 382, 549, 610, 640, 842, 863, 864, 874, 888, 901, 914, 958, 991, 1170, 1214, 1232, 1338, 1357], "occurr": [520, 522, 529, 532, 753, 842, 1139, 1141, 1148, 1151, 1346, 1357], "oct": 1380, "octet_length": 1378, "octob": [479, 1096, 1380], "od": [159, 854], "odbc": [39, 150, 349], "odd": 696, "odi": [699, 701, 1287], "off": [48, 49, 50, 51, 62, 63, 129, 148, 149, 162, 253, 254, 349, 446, 458, 767, 863, 864, 874, 886, 887, 892, 901, 914, 958, 1059, 1071], "offer": [272, 349, 634, 842, 900, 958, 1381, 1385], "offic": [41, 349], "offset": [73, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 233, 239, 281, 294, 325, 326, 349, 446, 447, 455, 466, 467, 469, 474, 487, 513, 556, 574, 650, 682, 700, 701, 715, 728, 842, 880, 882, 907, 915, 931, 932, 958, 1059, 1060, 1068, 1083, 1084, 1086, 1091, 1104, 1131, 1177, 1195, 1269, 1286, 1287, 1301, 1314, 1357, 1384], "offset_bi": 786, "often": [151, 202, 239, 281, 349, 382, 549, 643, 650, 842, 882, 907, 958, 991, 1170, 1357, 1372, 1385], "ok": 580, "old": [40, 278, 349, 644, 645, 842, 905, 958, 1236, 1237, 1357], "old_tabl": 1387, "older": [47, 51, 349, 958], "oldw": 721, "omit": [28, 133, 137, 153, 159, 176, 202, 269, 284, 306, 311, 349, 781, 784, 796, 797, 829, 830, 964, 1386, 1387], "onc": [62, 129, 148, 149, 184, 258, 283, 285, 328, 349, 568, 588, 589, 672, 723, 724, 842, 859, 934, 958, 1189, 1209, 1255, 1309, 1310, 1357, 1370], "one": [21, 38, 39, 41, 48, 56, 64, 110, 130, 132, 133, 134, 135, 136, 148, 149, 153, 157, 158, 159, 162, 166, 181, 183, 202, 210, 218, 221, 229, 237, 238, 239, 251, 253, 255, 256, 264, 273, 281, 282, 283, 289, 292, 307, 310, 316, 329, 349, 359, 393, 439, 441, 504, 505, 509, 512, 515, 517, 573, 580, 585, 603, 613, 614, 616, 618, 620, 621, 630, 649, 650, 675, 683, 696, 697, 698, 713, 736, 768, 772, 774, 781, 784, 804, 822, 832, 838, 842, 860, 869, 871, 872, 877, 878, 881, 882, 886, 888, 896, 903, 907, 911, 913, 924, 930, 935, 958, 973, 1002, 1007, 1053, 1124, 1135, 1136, 1194, 1201, 1206, 1230, 1241, 1261, 1282, 1283, 1284, 1299, 1322, 1338, 1357, 1372, 1373, 1375, 1379, 1380, 1387], "oneormoredatatyp": [41, 176, 349], "ones": [654, 656, 658, 660, 662, 665, 667, 669, 842, 964], "onf": [715, 1301], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 48, 55, 56, 61, 62, 64, 97, 129, 131, 143, 145, 148, 149, 150, 153, 154, 156, 158, 160, 162, 165, 166, 167, 168, 171, 172, 173, 174, 178, 182, 192, 202, 221, 222, 225, 227, 230, 239, 240, 251, 254, 255, 258, 273, 281, 283, 284, 303, 305, 306, 307, 318, 319, 335, 349, 359, 361, 363, 375, 427, 428, 441, 446, 458, 469, 477, 479, 499, 508, 518, 588, 589, 596, 597, 613, 614, 615, 616, 617, 618, 619, 620, 621, 630, 642, 689, 699, 701, 713, 751, 767, 804, 842, 866, 869, 871, 872, 873, 882, 887, 888, 907, 908, 914, 925, 927, 941, 958, 964, 971, 972, 973, 1038, 1041, 1059, 1071, 1086, 1096, 1114, 1121, 1128, 1137, 1209, 1234, 1275, 1285, 1287, 1299, 1332, 1335, 1338, 1357, 1366, 1369, 1385, 1386, 1388], "onlin": [227, 349, 1121, 1357], "ont": [699, 701, 1285, 1287], "onto": 178, "oof": [714, 1300, 1375, 1380], "op": [21, 148, 149, 182, 278, 349, 596, 643, 842, 890, 905, 958, 1357], "opac": [349, 352, 1357, 1362], "opaqu": 941, "open": [41, 53, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 218, 349, 441, 842, 869, 958], "openoffic": 159, "openpyxl": [153, 170], "oper": [4, 41, 55, 64, 97, 106, 109, 116, 123, 130, 132, 133, 134, 135, 136, 145, 150, 212, 227, 230, 232, 238, 244, 256, 258, 265, 269, 271, 272, 273, 276, 277, 279, 281, 284, 285, 290, 292, 301, 307, 308, 313, 316, 317, 327, 328, 349, 358, 359, 362, 393, 433, 434, 435, 436, 437, 438, 493, 494, 509, 511, 514, 516, 540, 568, 569, 570, 571, 572, 573, 580, 587, 606, 609, 611, 612, 613, 614, 616, 618, 620, 621, 624, 625, 626, 629, 630, 635, 642, 672, 675, 741, 749, 756, 757, 759, 770, 771, 775, 787, 821, 842, 854, 862, 866, 868, 873, 878, 881, 886, 896, 897, 904, 908, 912, 913, 917, 924, 927, 934, 958, 1002, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1111, 1112, 1121, 1132, 1134, 1161, 1189, 1190, 1191, 1192, 1193, 1194, 1208, 1220, 1221, 1234, 1255, 1261, 1297, 1332, 1337, 1338, 1339, 1357, 1376, 1384, 1385], "operand": [749, 842], "opp": 964, "oppos": 767, "opposit": [292, 349, 393, 573, 675, 842, 913, 958, 1002, 1194, 1261, 1357], "opt": [311, 349], "optim": [48, 49, 50, 51, 62, 63, 129, 148, 154, 158, 160, 162, 164, 165, 166, 167, 251, 256, 272, 276, 283, 314, 349, 859, 863, 864, 874, 892, 901, 914, 922, 931, 932, 941, 958, 1037, 1256, 1357], "optimis": [150, 258, 284, 335, 349, 958, 962, 1209, 1258, 1357, 1388], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 54, 56, 62, 63, 72, 74, 148, 150, 151, 152, 153, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 175, 176, 177, 178, 181, 182, 183, 192, 193, 218, 234, 239, 249, 254, 264, 289, 296, 302, 313, 316, 318, 349, 406, 441, 446, 538, 596, 597, 603, 630, 651, 652, 653, 655, 657, 659, 661, 664, 666, 668, 681, 689, 699, 701, 713, 715, 753, 824, 832, 842, 854, 863, 864, 869, 874, 882, 886, 887, 896, 901, 911, 914, 917, 924, 925, 933, 958, 964, 1015, 1059, 1159, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1268, 1275, 1285, 1287, 1299, 1301, 1334, 1346, 1357, 1375, 1380, 1387], "optional_memb": [530, 842, 1149, 1357], "or_": 842, "oracl": 151, "orang": [214, 330, 331, 333, 334, 336, 337, 339, 341, 342, 349, 419, 748, 842, 936, 937, 939, 940, 942, 943, 945, 947, 948, 1380], "orc": 195, "order": [11, 41, 48, 49, 50, 51, 54, 56, 62, 68, 133, 148, 150, 162, 169, 171, 172, 173, 174, 209, 213, 214, 221, 222, 223, 230, 238, 239, 253, 255, 265, 271, 272, 273, 277, 281, 283, 285, 286, 290, 295, 306, 307, 312, 314, 318, 319, 349, 374, 394, 399, 418, 419, 444, 445, 505, 551, 568, 575, 581, 630, 635, 640, 650, 672, 673, 674, 683, 684, 714, 721, 722, 723, 724, 738, 747, 748, 750, 751, 753, 765, 821, 832, 842, 853, 858, 866, 871, 872, 873, 878, 881, 882, 886, 888, 896, 897, 904, 907, 908, 912, 916, 917, 921, 922, 925, 958, 962, 963, 964, 983, 1003, 1008, 1027, 1036, 1057, 1058, 1125, 1156, 1172, 1189, 1196, 1202, 1228, 1232, 1239, 1255, 1257, 1259, 1270, 1300, 1325, 1342, 1343, 1344, 1346, 1357, 1366, 1369, 1375, 1384, 1385, 1388], "order_bi": [630, 842], "ordin": [470, 640, 842, 1087, 1232, 1357, 1386], "ordinal_dai": [454, 489], "org": [21, 43, 44, 131, 150, 151, 154, 156, 204, 205, 206, 215, 349, 604, 708, 914, 958, 966, 967, 1294], "orient": [57, 59, 104, 134, 136, 269, 349, 958, 1366], "origin": [56, 148, 149, 162, 221, 222, 230, 277, 314, 349, 444, 445, 473, 474, 487, 505, 551, 589, 613, 630, 642, 643, 644, 645, 646, 648, 690, 696, 705, 763, 764, 842, 871, 872, 878, 904, 922, 958, 1057, 1058, 1090, 1091, 1104, 1125, 1172, 1236, 1237, 1238, 1240, 1276, 1282, 1291, 1357], "orjson": 144, "orld": 1307, "orson": 144, "other": [1, 21, 37, 41, 47, 63, 64, 130, 147, 148, 149, 150, 153, 162, 167, 171, 172, 173, 174, 222, 224, 227, 230, 253, 254, 255, 264, 265, 273, 277, 282, 284, 287, 288, 311, 316, 318, 321, 323, 324, 347, 349, 352, 358, 362, 364, 374, 375, 428, 443, 479, 493, 494, 505, 509, 514, 516, 526, 530, 540, 547, 569, 570, 571, 572, 587, 593, 599, 609, 611, 624, 625, 629, 644, 645, 677, 684, 713, 740, 741, 746, 749, 756, 758, 760, 765, 768, 769, 770, 771, 779, 786, 806, 808, 811, 820, 824, 826, 842, 854, 864, 878, 886, 887, 888, 896, 897, 903, 904, 909, 910, 914, 924, 925, 928, 929, 930, 958, 964, 973, 1041, 1056, 1096, 1111, 1112, 1113, 1121, 1132, 1134, 1149, 1161, 1168, 1190, 1191, 1192, 1193, 1208, 1220, 1221, 1236, 1237, 1340, 1348, 1356, 1357, 1362, 1372, 1385], "other_df": [253, 349], "other_lf": [886, 958], "otherwis": [39, 150, 153, 160, 165, 177, 180, 184, 234, 258, 265, 284, 287, 306, 311, 335, 349, 398, 403, 424, 428, 439, 495, 496, 497, 498, 580, 589, 600, 630, 634, 635, 637, 642, 678, 688, 691, 695, 700, 702, 707, 711, 712, 715, 726, 753, 757, 786, 789, 798, 804, 832, 842, 897, 909, 941, 958, 963, 1007, 1012, 1033, 1041, 1053, 1115, 1116, 1117, 1118, 1201, 1209, 1228, 1230, 1234, 1256, 1258, 1265, 1274, 1277, 1281, 1286, 1288, 1293, 1297, 1298, 1301, 1312, 1346, 1357, 1377], "our": 207, "out": [8, 15, 39, 48, 49, 50, 51, 52, 53, 54, 111, 137, 167, 170, 178, 182, 230, 281, 284, 349, 385, 403, 555, 557, 688, 691, 700, 832, 878, 907, 958, 994, 1012, 1176, 1178, 1274, 1277, 1286, 1383], "outcom": [630, 842], "outer": [56, 318, 349, 925, 958], "outermost": 55, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 209, 217, 251, 258, 262, 265, 271, 273, 283, 287, 289, 299, 312, 319, 323, 349, 361, 363, 386, 418, 419, 424, 439, 479, 559, 580, 588, 589, 600, 603, 614, 637, 644, 687, 703, 707, 747, 748, 753, 757, 758, 759, 760, 770, 771, 772, 790, 800, 801, 803, 804, 808, 826, 832, 842, 854, 858, 868, 874, 892, 896, 897, 909, 911, 921, 928, 941, 958, 971, 972, 995, 1027, 1033, 1053, 1096, 1180, 1209, 1230, 1273, 1289, 1293, 1342, 1346, 1357], "output_path": [604, 914, 958], "outsid": [164, 428, 842, 1041, 1357], "over": [53, 64, 139, 148, 149, 150, 153, 159, 162, 167, 178, 179, 209, 227, 250, 251, 252, 258, 265, 282, 283, 284, 296, 312, 313, 327, 335, 349, 353, 418, 419, 438, 441, 496, 504, 588, 589, 600, 602, 603, 604, 605, 606, 614, 615, 640, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 747, 748, 776, 777, 790, 803, 804, 816, 821, 842, 858, 863, 874, 897, 901, 914, 917, 921, 933, 941, 955, 958, 964, 1027, 1052, 1116, 1121, 1209, 1244, 1245, 1247, 1251, 1342, 1357, 1385], "overflow": [420, 436, 437, 730, 742, 842, 860, 958, 1028, 1050, 1051, 1316, 1328, 1357], "overhead": [54, 55, 97, 162, 165, 166, 167], "overlap": [690, 697, 699, 701, 1276, 1283, 1285, 1287], "overrid": [1, 41, 130, 132, 133, 134, 135, 136, 148, 150, 151, 153, 157, 158, 159, 164, 166, 175, 176, 182, 184, 349, 958], "overridden": [41, 130, 132, 134, 136, 157, 158, 166, 184, 349, 958], "overview": [349, 842, 854, 958, 1357, 1384, 1388], "overwrit": [15, 39, 40, 42, 54, 130, 132, 133, 134, 136, 144, 148, 149, 157, 158, 162, 166, 206, 318, 349, 360, 740, 842, 925, 958], "overwrite_schema": [40, 349], "ow": 720, "own": [832, 1338, 1357, 1388], "p": [58, 272, 349, 634, 824, 842, 900, 958, 964, 1286, 1288, 1370], "p13dt14h0": 479, "p1dt42": 479, "pa": [40, 130, 168, 349, 821], "pa_tabl": 821, "pacif": [447, 1060], "pack": [269, 349], "packag": [33, 34, 35, 145, 150, 349, 353, 446, 458, 767, 1059, 1071], "pad": [709, 710, 735, 1295, 1296, 1321], "pad_end": [710, 1296], "pad_start": [709, 735, 1295, 1321], "page": [47, 51, 154, 160, 165, 167, 349, 842, 854, 958, 1357, 1384], "pair": [130, 132, 133, 134, 136, 141, 157, 158, 166, 278, 349, 905, 958, 1388], "pairwis": [215, 349], "panda": [39, 131, 135, 144, 170, 230, 239, 277, 308, 314, 316, 349, 466, 467, 746, 821, 842, 878, 882, 904, 922, 924, 958, 1083, 1084, 1339, 1340, 1357, 1367, 1369, 1385], "pandas_df": 1385, "pane": [41, 349], "panic": 112, "pap": 1288, "papa": 702, "papai": [702, 1288], "papaya": [702, 715, 726, 1288, 1301, 1312], "parallel": [62, 64, 139, 151, 160, 167, 239, 254, 256, 272, 288, 324, 349, 438, 552, 753, 832, 842, 882, 886, 887, 910, 929, 941, 958, 1052, 1173, 1346, 1357], "parallelis": [258, 335, 349, 1209, 1357], "parallelstrategi": [160, 167], "param": [41, 130, 132, 133, 134, 136, 148, 149, 157, 158, 162, 166, 177, 178, 182, 282, 349, 958], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 83, 87, 95, 98, 104, 113, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 206, 207, 209, 210, 211, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 249, 251, 252, 253, 254, 255, 257, 258, 262, 264, 265, 268, 269, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 332, 334, 335, 341, 343, 349, 358, 360, 361, 362, 363, 364, 374, 381, 382, 385, 386, 393, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 418, 419, 420, 421, 425, 428, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 446, 448, 450, 451, 456, 458, 469, 472, 473, 474, 475, 476, 478, 479, 487, 490, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 524, 525, 526, 530, 538, 540, 542, 547, 548, 549, 550, 552, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 587, 588, 589, 596, 597, 603, 604, 605, 609, 611, 614, 615, 616, 617, 618, 619, 624, 625, 629, 630, 631, 634, 635, 637, 638, 640, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 735, 736, 738, 740, 741, 743, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 858, 860, 861, 863, 864, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 886, 887, 888, 891, 892, 896, 897, 900, 901, 902, 903, 904, 905, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 938, 940, 941, 947, 949, 958, 963, 964, 968, 970, 971, 972, 973, 983, 990, 991, 994, 995, 1002, 1003, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1027, 1028, 1029, 1034, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1061, 1063, 1064, 1069, 1071, 1086, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1104, 1107, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1122, 1123, 1124, 1125, 1129, 1130, 1131, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1149, 1156, 1159, 1163, 1168, 1169, 1170, 1171, 1173, 1176, 1177, 1178, 1179, 1180, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 1209, 1221, 1225, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1264, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1321, 1322, 1325, 1329, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1342, 1343, 1346, 1347, 1348, 1357, 1366, 1367, 1368, 1369, 1370, 1372, 1377, 1380, 1385], "parameteris": 150, "parametr": 854, "paramount": [892, 958], "parent": [41, 75, 232, 349], "parenthes": 19, "parquet": [47, 51, 52, 53, 54, 160, 161, 167, 195, 349, 854, 958], "parquetcompress": [47, 349], "pars": [38, 48, 147, 148, 149, 151, 153, 158, 159, 160, 162, 165, 166, 167, 209, 238, 287, 288, 292, 295, 312, 323, 324, 328, 349, 419, 428, 526, 630, 644, 645, 684, 704, 713, 729, 730, 740, 748, 758, 760, 765, 768, 769, 770, 771, 779, 792, 806, 808, 811, 820, 822, 824, 826, 832, 842, 858, 881, 909, 910, 913, 916, 921, 928, 929, 934, 958, 1041, 1144, 1236, 1237, 1261, 1290, 1315, 1316, 1357, 1366], "parseerror": [730, 1316], "parser": [148, 153], "part": [54, 130, 153, 202, 207, 306, 311, 349, 630, 697, 717, 718, 842, 930, 958, 968, 1283, 1303, 1304, 1380, 1381], "part_idx": 142, "parti": [588, 842], "partial": [133, 148, 162, 349, 958], "particip": [41, 349], "particular": [40, 148, 153, 154, 156, 209, 225, 312, 349, 418, 419, 747, 748, 842, 858, 921, 958, 1027, 1114, 1342, 1357], "partit": [47, 52, 53, 54, 151, 160, 163, 165, 167, 168, 252, 271, 349, 630, 842, 854], "partition_bi": [47, 149, 252, 349, 630, 842], "partition_chunk_size_byt": [47, 349], "partition_col": [47, 151, 349], "partition_df": 149, "partition_index": 194, "partition_num": 151, "partition_on": 151, "partition_rang": 151, "partitionbykei": [53, 54, 141, 142], "partitioned_object": [47, 349], "partitioningschem": [48, 49, 50, 51, 958], "partitionmax": 53, "partitionmaxs": [52, 54, 140], "partitionpart": [52, 53, 141, 142], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 56, 104, 129, 132, 144, 145, 147, 150, 151, 153, 160, 162, 165, 168, 171, 173, 176, 178, 180, 182, 209, 215, 219, 238, 239, 241, 254, 257, 271, 272, 273, 278, 281, 287, 292, 295, 300, 308, 311, 312, 319, 323, 328, 349, 393, 419, 446, 456, 458, 469, 473, 479, 502, 523, 573, 588, 589, 604, 630, 634, 644, 645, 650, 675, 684, 713, 720, 721, 722, 748, 757, 765, 767, 792, 824, 832, 838, 842, 858, 870, 881, 882, 884, 887, 892, 900, 905, 907, 909, 913, 914, 916, 921, 928, 933, 934, 941, 958, 963, 1002, 1059, 1069, 1071, 1090, 1096, 1122, 1138, 1163, 1194, 1209, 1236, 1237, 1261, 1299, 1306, 1307, 1308, 1329, 1339, 1357, 1370, 1385], "pass_nam": [589, 842], "pass_name_to_appli": [145, 842], "password": [148, 151, 154, 156], "past": [37, 349, 892, 958], "pat": [700, 1286], "patch": 74, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 140, 142, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 218, 289, 349, 441, 603, 604, 607, 674, 842, 869, 911, 914, 958, 962, 1259, 1291, 1357, 1388], "pathlib": [36, 38, 43, 44, 47, 162, 349], "pattern": [100, 148, 149, 153, 154, 158, 160, 162, 165, 166, 167, 251, 349, 421, 425, 598, 688, 689, 690, 693, 696, 697, 698, 699, 700, 701, 711, 712, 713, 719, 941, 964, 1029, 1034, 1256, 1258, 1274, 1275, 1276, 1279, 1282, 1283, 1284, 1285, 1286, 1287, 1297, 1298, 1299, 1305, 1357, 1380], "paya": 726, "pc": [903, 958], "pct": [178, 640, 842], "pct_chang": [842, 1357], "pct_valid": [640, 842], "pd": [131, 135, 746, 821, 842, 1339, 1340, 1357, 1367, 1385], "pd_df": 135, "pd_frame": 821, "pd_seri": 135, "pdsh": [139, 149], "pea": 702, "peak": [283, 349, 632, 633, 842, 1226, 1227, 1357], "peak_max": [842, 1357], "peak_min": [842, 1357], "pear": [702, 715, 726, 1288, 1301, 1312], "pearson": [215, 349, 538, 651, 681, 772, 842, 1159, 1242, 1268, 1357], "penalti": [725, 727, 728, 1311, 1313, 1314], "per": [15, 38, 41, 48, 145, 153, 176, 178, 209, 237, 269, 270, 273, 288, 295, 312, 324, 338, 340, 341, 349, 385, 419, 552, 555, 557, 588, 589, 613, 614, 616, 618, 620, 621, 684, 748, 753, 765, 842, 858, 910, 916, 921, 929, 944, 946, 947, 958, 994, 1173, 1176, 1178, 1346, 1357], "percent": [631, 842, 1225, 1357], "percentag": [175, 178, 182, 631, 842, 1225, 1357], "percentil": [217, 349, 640, 842, 868, 958, 1054, 1357], "perform": [39, 47, 49, 51, 56, 102, 107, 109, 114, 116, 123, 131, 148, 149, 150, 154, 158, 160, 162, 164, 165, 166, 167, 206, 230, 238, 239, 253, 254, 255, 258, 276, 277, 281, 283, 284, 307, 335, 349, 409, 414, 417, 423, 424, 509, 580, 588, 589, 630, 650, 689, 699, 701, 706, 707, 713, 725, 727, 728, 842, 878, 882, 886, 887, 888, 904, 907, 916, 931, 932, 958, 1018, 1023, 1026, 1032, 1033, 1209, 1275, 1285, 1287, 1292, 1293, 1299, 1311, 1313, 1314, 1338, 1357], "perhap": [313, 349], "period": [148, 149, 162, 239, 281, 349, 474, 487, 495, 497, 498, 631, 650, 781, 782, 784, 785, 829, 830, 842, 882, 907, 958, 1091, 1104, 1115, 1117, 1118, 1225, 1357], "persist": 1372, "phase": [39, 317, 349], "philadelphia": [711, 712], "phone": [733, 1319], "physic": [55, 68, 97, 148, 149, 254, 273, 349, 746, 842, 859, 886, 887, 914, 958, 1035, 1340, 1357], "pi": [11, 440, 842, 1043, 1045, 1266, 1330, 1357, 1378, 1382], "pick": [179, 832], "pickl": [441, 842, 869, 958], "pip": [446, 458, 767, 1059, 1071], "pipe": [349, 842, 958], "pipelin": [153, 311, 349], "pitfal": 114, "pivot": [317, 349, 964], "pivot_long": [316, 349, 924, 958], "pivot_wid": [273, 349], "pivotagg": [273, 349], "pixel": [41, 349], "pk": [492, 842, 1110, 1357], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 74, 83, 87, 95, 96, 97, 101, 104, 105, 106, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 162, 163, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 184, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 964, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357, 1362, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1386, 1388], "pl_frame": 821, "place": [11, 12, 38, 48, 202, 220, 227, 243, 244, 273, 279, 284, 295, 321, 349, 353, 374, 386, 394, 559, 575, 683, 684, 765, 842, 916, 958, 973, 983, 995, 1003, 1121, 1180, 1196, 1233, 1270, 1357], "placehold": 791, "plai": [13, 771], "plain": [874, 903, 958], "plan": [62, 129, 254, 256, 349, 441, 842, 859, 863, 869, 874, 886, 887, 903, 911, 914, 958, 1387], "plan_stag": [914, 958], "plan_typ": [903, 958], "plane": [763, 764], "planstag": [914, 958], "plantypeprefer": [903, 958], "platform": 170, "ple": 1380, "pleas": [135, 150, 151, 230, 239, 264, 277, 349, 353, 496, 773, 786, 842, 878, 882, 896, 904, 958, 1116, 1357], "plenti": 964, "plot": [349, 901, 914, 958, 1357], "plu": [439, 585, 842, 1053, 1206, 1230, 1357, 1379], "plugin": [0, 842, 854], "plugin_path": 145, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 76, 77, 78, 140, 141, 142, 143, 144, 152, 158, 160, 162, 163, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 221, 228, 239, 255, 256, 296, 306, 311, 318, 349, 352, 353, 427, 438, 439, 444, 446, 458, 474, 475, 503, 508, 509, 520, 533, 534, 568, 589, 637, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 670, 672, 767, 769, 800, 801, 842, 863, 864, 871, 876, 882, 888, 892, 905, 917, 925, 958, 1036, 1038, 1052, 1053, 1057, 1059, 1071, 1091, 1092, 1123, 1128, 1139, 1189, 1230, 1242, 1243, 1246, 1248, 1249, 1253, 1255, 1336, 1341, 1357, 1362, 1385], "pointer": [225, 349, 1114, 1357], "poison": [622, 623, 842, 1218, 1219, 1357], "pola": 349, "polar": [1, 200, 349, 352, 353, 841, 842, 848, 854, 958, 962, 963, 964, 1357, 1361, 1362, 1384, 1385, 1387], "polars_df": 1385, "polars_engine_affin": [48, 49, 50, 51, 62, 63, 863, 864, 874, 901, 914, 958], "polars_file_cache_ttl": [158, 162, 165, 166], "polars_hypothesis_profil": [181, 183], "polars_max_thread": 184, "polars_seri": 1385, "polars_verbos": [863, 874, 901, 914, 958], "polarsdatafram": 206, "polarsdataset": [311, 349], "polarsdatatyp": [65, 75, 83, 148, 149, 162, 175, 176, 177, 178, 179, 182, 210, 258, 306, 311, 349, 406, 420, 499, 588, 589, 644, 645, 704, 788, 790, 802, 803, 804, 814, 817, 833, 838, 842, 860, 958, 964, 1015, 1028, 1209, 1236, 1237, 1290, 1357], "polarsintegertyp": [762, 796, 797], "polarstemporaltyp": [725, 1311], "polarstyp": 64, "pool": [15, 63, 184, 185, 864, 958], "poor": 150, "pop2": [254, 349, 887, 958], "popul": [254, 349, 887, 958], "port": [39, 148, 150, 151, 154, 156, 349], "pos_a": 1380, "posit": [41, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 194, 207, 219, 226, 238, 271, 287, 288, 292, 295, 315, 323, 324, 328, 349, 393, 495, 497, 498, 499, 573, 630, 635, 637, 675, 684, 698, 711, 712, 730, 740, 763, 764, 765, 768, 769, 770, 771, 788, 820, 824, 838, 842, 870, 875, 881, 909, 910, 913, 916, 923, 928, 929, 934, 958, 964, 1002, 1115, 1117, 1118, 1194, 1228, 1230, 1261, 1284, 1316, 1357, 1386], "position": 1357, "possibl": [41, 47, 51, 104, 106, 132, 133, 136, 148, 153, 175, 178, 182, 238, 251, 258, 283, 314, 335, 349, 586, 589, 600, 652, 718, 752, 842, 863, 874, 881, 901, 914, 916, 922, 958, 1209, 1243, 1304, 1357], "post": [56, 74, 903, 958], "postgresql": [39, 150, 151, 349, 630, 842, 1383], "potenti": [114, 116, 145, 162, 165, 166, 251, 282, 284, 349, 613, 711, 712, 866, 868, 873, 908, 927, 958, 1297, 1298], "pow": [842, 1357, 1378], "pow_n": 58, "power": [822, 1228, 1357, 1379], "powersofn": 58, "pre": [54, 580, 589, 637, 814, 817, 833, 842, 1230, 1357], "preced": [178, 964], "precis": [11, 12, 38, 41, 48, 72, 150, 251, 283, 284, 303, 306, 311, 349, 448, 729, 800, 958, 964, 1061, 1315], "pred1": 832, "pred2": 832, "predefin": [273, 349], "predic": [40, 48, 49, 50, 51, 62, 63, 129, 143, 162, 165, 166, 167, 168, 210, 230, 249, 254, 255, 277, 282, 349, 420, 505, 755, 790, 832, 842, 863, 864, 874, 878, 887, 888, 892, 901, 904, 905, 914, 931, 932, 958, 1125, 1256, 1258, 1357], "predicate_pushdown": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 892, 901, 914, 958], "predict": [276, 319, 349], "prefer": [148, 149, 153, 154, 158, 160, 162, 183, 209, 227, 251, 258, 282, 283, 312, 335, 349, 418, 419, 499, 589, 747, 748, 832, 842, 858, 921, 958, 962, 1027, 1121, 1209, 1342, 1357, 1367, 1388], "prefilt": 167, "prefix": [40, 148, 149, 162, 202, 349, 360, 408, 425, 479, 598, 614, 617, 618, 620, 621, 719, 722, 723, 735, 842, 964, 1017, 1034, 1305, 1309, 1321], "prefix_": 617, "prefix_a": 617, "prefix_b": 617, "prefix_field": [615, 619], "presenc": [789, 798, 964], "present": [133, 178, 234, 349, 530, 604, 721, 722, 832, 842, 914, 958], "preserv": [221, 222, 230, 238, 253, 255, 258, 277, 307, 308, 318, 349, 444, 445, 446, 466, 467, 505, 551, 630, 644, 678, 695, 842, 871, 872, 878, 886, 888, 904, 925, 958, 1057, 1058, 1059, 1125, 1172, 1236, 1265, 1281, 1339, 1357], "pressur": [51, 148, 149, 158, 160, 162, 166, 167, 676, 842, 958, 1262, 1357], "presum": [588, 842], "prev_pow2": 58, "prevent": [307, 349, 360, 436, 437, 613, 742, 842, 958, 1050, 1051, 1328, 1357], "preview": [237, 349], "previou": [54, 58, 202, 349, 352, 446, 613, 614, 616, 618, 620, 621, 631, 738, 842, 1059, 1225, 1357, 1362], "previous": [2, 3], "price": [349, 352, 1388], "primari": [153, 962, 1385, 1388], "primarili": 1, "primit": [40, 349, 530, 842], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 149, 170, 171, 173, 223, 237, 238, 252, 256, 305, 327, 349, 523, 605, 781, 784, 842, 863, 884, 958, 964, 1149, 1335, 1357, 1388], "prior": [135, 349, 352, 1357, 1362], "prioriti": 179, "probabl": [492, 637, 842, 1110, 1230, 1357], "process": [15, 38, 48, 49, 50, 51, 62, 63, 148, 149, 150, 162, 184, 283, 349, 863, 864, 874, 901, 914, 958], "process_index": [306, 349], "produc": [2, 3, 95, 143, 178, 182, 210, 253, 349, 382, 420, 549, 600, 800, 803, 842, 886, 892, 958, 991, 1170], "product": [56, 215, 253, 349, 436, 443, 842, 886, 958, 1050, 1056, 1357], "profil": [33, 181, 183, 863, 958], "profile_nam": 33, "programmat": [217, 349, 868, 958], "progress": [72, 78], "project": [48, 49, 50, 51, 62, 63, 129, 143, 162, 164, 165, 166, 167, 683, 684, 842, 863, 864, 874, 892, 901, 905, 914, 958], "projection_pushdown": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 892, 901, 914, 958], "prompt": 137, "propag": [386, 494, 530, 559, 622, 623, 625, 687, 703, 770, 771, 842, 995, 1112, 1149, 1180, 1218, 1219, 1221, 1273, 1289, 1357], "propagate_nan": 772, "proper": [255, 349, 888, 958], "properti": [40, 41, 193, 196, 197, 206, 213, 214, 223, 231, 242, 286, 291, 322, 326, 349, 352, 353, 865, 866, 873, 908, 927, 932, 958, 963, 964, 1109, 1127, 1217, 1260, 1357, 1362, 1388], "proport": [753, 842, 1346, 1357], "protocol": [40, 131, 150, 151, 206, 349], "prototyp": 838, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 148, 149, 151, 152, 153, 158, 160, 162, 163, 164, 165, 166, 167, 178, 182, 192, 230, 234, 249, 254, 277, 296, 306, 349, 352, 403, 404, 479, 499, 520, 580, 588, 589, 691, 692, 696, 704, 705, 721, 722, 723, 724, 792, 824, 842, 854, 863, 874, 878, 887, 901, 904, 914, 917, 933, 955, 958, 1012, 1013, 1096, 1139, 1158, 1209, 1277, 1278, 1282, 1290, 1291, 1336, 1357, 1370, 1377, 1380, 1385, 1388], "provis": 855, "prune": [160, 165, 167, 892, 958], "pt0": 479, "public": [151, 349, 842, 854, 958, 1357, 1384], "pulp": 1366, "pure": [41, 349], "purpos": [612, 842, 958], "push": [148, 154, 158, 160, 162, 165, 166, 167, 168, 210, 349, 420, 842], "pushdown": [48, 49, 50, 51, 62, 63, 129, 143, 863, 864, 874, 892, 901, 905, 914, 931, 932, 958, 1256, 1258, 1357], "put": [38, 48, 74, 349, 353, 958], "pwd": 150, "py": 164, "pyarrow": [40, 47, 130, 135, 148, 151, 152, 154, 156, 160, 163, 168, 170, 301, 307, 308, 349, 821, 854, 1332, 1338, 1339, 1357, 1367, 1369, 1385], "pyarrow_opt": [47, 152, 160, 163, 349], "pyarrow_t": 1385, "pycapsul": [130, 131, 205, 967], "pycapsuleinterfac": [131, 205, 967], "pydant": 170, "pyiceberg": [42, 164, 170, 349], "pyodbc": [39, 349], "pyodbc_uri": [39, 349], "pyspark": 184, "pytest": [171, 173], "python": [0, 33, 34, 35, 43, 44, 74, 85, 100, 131, 148, 149, 154, 156, 170, 171, 173, 206, 251, 258, 283, 284, 303, 335, 349, 441, 446, 450, 458, 509, 588, 589, 698, 767, 781, 782, 784, 785, 829, 830, 842, 848, 869, 941, 958, 962, 963, 1059, 1063, 1071, 1074, 1075, 1076, 1080, 1209, 1284, 1337, 1357, 1361, 1384], "pythondatatyp": [65, 83, 210, 349, 838, 860, 958, 964], "pythonliter": [974, 1018, 1023, 1026, 1126, 1160, 1210, 1211, 1212, 1213, 1256, 1357], "pytorch": [311, 349, 1341, 1357], "q": [284, 349, 824, 1357, 1362, 1370], "q1": [41, 349], "q2": [41, 349], "q3": [41, 349], "q4": [41, 349], "qcut": [439, 842, 1053, 1357], "qhoo": 1388, "qmark": 150, "qqr": 964, "quad": [496, 842, 1116, 1357], "qualifi": [39, 349], "quantifi": [697, 1283], "quantil": [349, 637, 661, 662, 842, 958, 1230, 1248, 1357, 1374], "quantile_cont": 1378, "quantile_disc": 1378, "quarter": [239, 254, 281, 319, 349, 469, 474, 487, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104, 1381], "queri": [10, 48, 49, 50, 51, 62, 63, 95, 129, 150, 151, 154, 162, 165, 166, 167, 227, 256, 272, 296, 349, 580, 588, 589, 705, 821, 842, 854, 863, 864, 874, 901, 903, 914, 917, 931, 932, 933, 941, 950, 958, 1121, 1209, 1291, 1357, 1366, 1367, 1369, 1373, 1384, 1386, 1387], "quick": [838, 1054, 1357, 1388], "quit": [254, 349, 887, 958], "quot": [38, 39, 48, 148, 149, 151, 162, 349, 733, 958, 1319], "quota_project_id": 35, "quote_char": [38, 48, 148, 149, 162, 349, 958], "quote_plu": 151, "quote_styl": [38, 48, 349, 958], "quotes_titl": 733, "quotient": 1379, "r": [148, 149, 162, 349, 595, 634, 690, 695, 696, 697, 698, 711, 712, 842, 964, 1276, 1281, 1282, 1283, 1284, 1297, 1298, 1312, 1370, 1380], "r1": 64, "r2": 64, "r3": 64, "rab": [688, 714, 1274, 1300, 1375], "rad": 1382, "radian": [440, 763, 842, 1378], "radix": [730, 1316], "rai": [763, 764], "raini": [711, 712, 1297, 1298], "rais": [1, 10, 16, 17, 21, 40, 64, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 148, 149, 153, 159, 160, 162, 167, 171, 173, 206, 210, 234, 273, 282, 307, 349, 385, 403, 420, 446, 472, 473, 555, 557, 600, 635, 637, 645, 688, 691, 700, 725, 727, 728, 730, 732, 783, 802, 842, 933, 994, 1012, 1059, 1089, 1090, 1176, 1178, 1228, 1230, 1237, 1274, 1277, 1286, 1311, 1313, 1314, 1316, 1318, 1338, 1357], "raise_if_empti": [148, 149, 153, 159, 162], "raise_if_undetermin": 600, "raise_on_fail": 933, "raker": 144, "ram": [48, 49, 50, 51, 958], "ran": [145, 842], "randn": 95, "random": [41, 43, 95, 154, 169, 176, 240, 285, 349, 518, 568, 640, 672, 677, 753, 842, 854, 1137, 1189, 1232, 1255, 1264, 1346, 1357], "randomli": 177, "rang": [18, 41, 150, 151, 217, 225, 239, 252, 349, 365, 440, 446, 454, 458, 465, 470, 471, 472, 474, 487, 488, 524, 762, 767, 770, 780, 781, 782, 783, 784, 785, 796, 797, 800, 801, 828, 829, 830, 842, 868, 882, 958, 964, 1054, 1059, 1067, 1071, 1082, 1087, 1088, 1089, 1091, 1104, 1105, 1114, 1225, 1357, 1380], "rank": [374, 552, 765, 772, 787, 842, 983, 1173, 1357], "rankmethod": [640, 842, 1232, 1357], "rare": [447, 1060], "rather": [254, 349, 511, 588, 605, 637, 649, 735, 842, 887, 958, 1230, 1241, 1321, 1357], "raw": 151, "raw_output": [604, 914, 958], "raw_valu": 141, "re": [234, 239, 250, 314, 316, 349, 466, 467, 476, 479, 882, 922, 924, 958, 1083, 1084, 1093, 1096, 1385], "reach": [53, 709, 710, 735, 1295, 1296, 1321], "read": [37, 139, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 192, 218, 227, 349, 352, 441, 511, 842, 869, 903, 958, 1121, 1357, 1362], "read_arrow_batches_from_odbc": 150, "read_clipboard": [37, 349], "read_csv": [147, 153, 162], "read_csv_batch": 139, "read_databas": [95, 151], "read_database_uri": 150, "read_excel": 159, "read_ndjson": 157, "read_od": 153, "read_opt": 153, "read_parquet": 167, "read_tabl": 160, "readabl": 838, "reader": [47, 51, 139, 143, 148, 149, 154, 156, 158, 160, 164, 349, 958], "reader_overrid": 164, "readi": 951, "readthedoc": [41, 349], "real": [697, 1283], "realli": [438, 689, 713, 842, 1052, 1275, 1299, 1357], "realloc": [158, 162, 165, 166, 227, 349, 1121, 1357], "rearrang": [258, 349], "reason": [184, 217, 349, 580, 588, 842, 868, 958], "receiv": [56, 150, 162, 258, 272, 335, 349, 589, 634, 842, 900, 958, 1388], "recent": [171, 172, 173, 174, 307, 349, 631, 645, 842, 1225, 1237, 1338, 1357, 1369, 1385], "rechunk": [64, 130, 131, 135, 148, 149, 152, 154, 156, 158, 160, 162, 163, 165, 166, 167, 227, 349, 842, 1039, 1121, 1133, 1215, 1357], "recognis": [10, 16, 17, 21, 964], "recommend": [41, 184, 217, 251, 256, 272, 349, 580, 859, 868, 958, 964], "record": [38, 44, 48, 144, 156, 168, 349, 958], "record_batch": [252, 349], "recordbatch": [130, 252, 349, 821, 1367, 1369, 1385], "recurs": [48, 49, 50, 51, 495, 497, 498, 842, 958, 1115, 1117, 1118, 1357], "red": [55, 96, 97, 335, 753, 842, 941, 1346, 1357], "redempt": 1366, "redshift": 151, "redshift_format": 195, "reduc": [51, 148, 149, 158, 160, 162, 165, 166, 167, 283, 336, 337, 339, 342, 349, 676, 777, 790, 842, 942, 943, 945, 948, 958, 1211, 1229, 1262, 1328, 1357], "reduct": [232, 349, 589, 842], "ref": [696, 698, 1282, 1284], "refer": [0, 33, 41, 100, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 215, 218, 349, 353, 441, 476, 479, 640, 696, 711, 712, 725, 727, 728, 732, 842, 869, 958, 1093, 1096, 1232, 1297, 1298, 1311, 1313, 1314, 1318, 1357], "referenc": [41, 349, 588, 711, 712, 738, 842, 1297, 1298, 1367, 1385], "reg": 144, "regard": [148, 772], "regardless": [135, 209, 238, 254, 312, 349, 419, 451, 705, 748, 832, 842, 858, 887, 921, 958, 1064, 1291], "regex": [98, 499, 595, 596, 598, 688, 690, 696, 697, 698, 700, 711, 712, 736, 788, 842, 964, 1274, 1276, 1282, 1283, 1284, 1286, 1297, 1298], "regexp_lik": 1378, "region": [41, 164, 349], "region_nam": 33, "regist": [1, 52, 53, 54, 57, 58, 59, 60, 143, 145, 181, 183, 296, 349, 842, 917, 958, 962, 1366, 1367, 1369, 1370, 1371, 1372, 1385, 1387], "register_dataframe_namespac": [1, 58, 59, 60], "register_expr_namespac": [1, 57, 59, 60], "register_glob": [1368, 1370, 1372, 1385], "register_io_sourc": 962, "register_lazyframe_namespac": [1, 57, 58, 60], "register_mani": [1368, 1369, 1372], "register_plugin": 842, "register_plugin_funct": 842, "register_series_namespac": [1, 57, 58, 59], "registr": [296, 349, 821, 854, 917, 958, 1372, 1385], "regrid": [524, 842], "regular": [138, 251, 282, 283, 319, 326, 349, 499, 688, 689, 690, 694, 696, 697, 698, 699, 700, 701, 711, 712, 713, 767, 788, 832, 838, 842, 932, 958, 964, 1274, 1275, 1276, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1297, 1298, 1299, 1383], "reinterpret": [842, 1357], "rel": [41, 52, 53, 54, 145, 151, 152, 163, 164, 171, 172, 173, 174, 349, 469, 495, 497, 498, 753, 842, 1086, 1115, 1117, 1118, 1346, 1357], "relat": [150, 202, 711, 712, 964, 1297, 1298, 1373], "releas": [63, 253, 349, 589, 842, 864, 886, 958, 1388], "release_year": 1366, "relev": 64, "reli": [253, 349, 886, 958], "reliabl": [96, 97], "remain": [52, 148, 149, 162, 221, 222, 225, 230, 245, 273, 277, 349, 444, 445, 505, 524, 525, 551, 644, 717, 718, 842, 871, 872, 878, 885, 892, 904, 958, 1057, 1058, 1114, 1125, 1142, 1143, 1172, 1236, 1303, 1304, 1357, 1372], "remaind": [406, 718, 1015, 1304, 1379], "remap": 99, "remot": [95, 148, 149, 154, 156, 958], "remov": [4, 148, 149, 162, 206, 219, 230, 304, 349, 499, 614, 720, 721, 722, 723, 724, 788, 842, 870, 878, 958, 1306, 1307, 1308, 1309, 1310, 1333, 1357, 1387], "removes_pronoun": 713, "removesuffix": 614, "renam": [1, 133, 148, 149, 185, 238, 287, 288, 323, 324, 328, 330, 349, 360, 511, 606, 607, 613, 614, 615, 616, 618, 620, 621, 738, 740, 820, 824, 842, 881, 909, 910, 928, 929, 934, 936, 958, 970, 1286, 1325, 1334, 1357, 1385], "rename_field": [717, 718, 1303, 1304], "render": [604, 914, 958], "render_as_str": 150, "reoconstruct": [284, 349], "repeat": [54, 154, 165, 641, 643, 814, 833, 842, 1357], "repeat_bi": [842, 1357], "replac": [39, 40, 42, 148, 149, 162, 228, 229, 279, 313, 316, 323, 324, 349, 352, 450, 473, 503, 588, 589, 645, 712, 713, 728, 842, 876, 924, 928, 929, 958, 1063, 1090, 1123, 1237, 1256, 1258, 1298, 1299, 1314, 1357, 1362, 1378], "replace_al": [645, 711, 842, 1236, 1237, 1297, 1357], "replace_column": 349, "replace_strict": [644, 842, 1236, 1357], "replace_time_zon": [447, 453, 455, 1065, 1066, 1094], "replace_with": [713, 1299], "replic": [746, 842, 1340, 1357], "report": [150, 225, 349, 708, 1114, 1294, 1357], "repr": [137, 421, 425, 479, 1029, 1034, 1096], "repres": [38, 41, 42, 48, 70, 71, 73, 84, 88, 93, 130, 132, 134, 135, 136, 150, 273, 296, 297, 306, 307, 320, 327, 349, 424, 509, 533, 534, 576, 582, 588, 686, 702, 707, 711, 712, 715, 726, 754, 757, 774, 786, 788, 802, 803, 804, 813, 818, 819, 823, 831, 838, 842, 917, 918, 926, 958, 964, 1033, 1256, 1272, 1288, 1293, 1297, 1298, 1301, 1312, 1338, 1347, 1357, 1385], "represent": [11, 45, 46, 70, 71, 73, 88, 137, 289, 305, 349, 421, 423, 424, 425, 449, 454, 457, 460, 461, 462, 463, 464, 465, 468, 470, 471, 475, 488, 489, 491, 603, 746, 842, 874, 890, 911, 958, 1029, 1032, 1033, 1034, 1035, 1062, 1067, 1070, 1072, 1073, 1077, 1078, 1079, 1081, 1082, 1085, 1087, 1088, 1092, 1105, 1106, 1108, 1335, 1340, 1357, 1376], "request": 35, "requested_schema": [205, 967], "requir": [1, 33, 34, 35, 40, 41, 56, 64, 135, 150, 151, 171, 172, 173, 174, 187, 215, 221, 282, 306, 307, 308, 311, 349, 399, 421, 425, 495, 497, 498, 581, 589, 630, 654, 656, 658, 660, 662, 665, 667, 669, 676, 725, 727, 728, 750, 766, 768, 772, 774, 817, 842, 866, 871, 872, 873, 916, 927, 958, 1008, 1113, 1115, 1117, 1118, 1202, 1262, 1297, 1311, 1313, 1314, 1338, 1339, 1343, 1357], "require_al": 964, "require_http": 187, "rerais": [63, 864, 958], "rerun": [227, 349, 1121, 1357], "resampl": [239, 349, 882, 958], "reset": [4, 202], "reset_index": [135, 239, 349, 882, 958], "reshap": [273, 307, 349, 553, 769, 842, 1174, 1357], "resolv": [145, 230, 349, 450, 580, 865, 866, 873, 908, 927, 958], "resourc": [933, 962], "respect": [41, 148, 162, 349, 689, 699, 701, 713, 964, 1275, 1285, 1287, 1299, 1341, 1357], "respons": [151, 265, 349, 897, 958], "rest": [733, 1319, 1380], "restor": [202, 349, 352, 1357, 1362], "restore_default": 202, "restrict": [31, 718, 1304], "result": [14, 38, 45, 46, 47, 48, 49, 50, 51, 56, 64, 134, 135, 136, 150, 151, 153, 162, 165, 167, 168, 182, 227, 230, 239, 240, 253, 254, 255, 269, 273, 277, 281, 284, 289, 290, 292, 306, 307, 308, 319, 326, 328, 334, 349, 446, 474, 476, 479, 487, 495, 496, 497, 498, 502, 509, 518, 526, 538, 579, 580, 588, 589, 603, 630, 635, 637, 644, 645, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 675, 695, 712, 716, 717, 728, 749, 753, 776, 777, 781, 783, 784, 785, 786, 801, 802, 803, 814, 817, 818, 819, 821, 832, 833, 842, 859, 863, 868, 878, 882, 886, 887, 888, 892, 901, 904, 907, 911, 912, 913, 932, 934, 940, 951, 952, 958, 964, 973, 1091, 1093, 1096, 1104, 1115, 1117, 1118, 1121, 1122, 1137, 1144, 1159, 1200, 1209, 1228, 1230, 1236, 1237, 1238, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1259, 1261, 1281, 1302, 1303, 1314, 1338, 1339, 1346, 1357, 1367, 1373, 1380, 1385, 1386, 1388], "resultset": 150, "retain": [230, 277, 349, 878, 904, 958], "retri": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 165, 166, 167, 192, 349, 958], "retriev": [187, 188, 192, 234, 306, 349, 379, 380, 545, 546, 736, 813, 988, 989, 1166, 1167, 1322, 1336, 1357, 1373], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 95, 107, 110, 118, 126, 129, 130, 132, 133, 134, 135, 136, 138, 139, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 184, 185, 192, 204, 207, 209, 211, 214, 215, 216, 220, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 252, 253, 256, 257, 258, 260, 262, 267, 268, 269, 271, 272, 273, 278, 281, 282, 283, 284, 285, 289, 296, 299, 300, 306, 307, 308, 311, 312, 313, 314, 319, 322, 323, 324, 330, 332, 334, 335, 338, 343, 349, 361, 363, 366, 367, 368, 369, 370, 371, 374, 375, 379, 380, 381, 383, 385, 386, 397, 402, 403, 404, 405, 406, 407, 408, 418, 419, 423, 424, 429, 430, 431, 432, 433, 439, 440, 446, 447, 449, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 496, 501, 509, 512, 513, 515, 519, 520, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 541, 542, 545, 546, 548, 553, 555, 557, 558, 559, 561, 568, 578, 579, 586, 588, 589, 601, 603, 604, 605, 610, 634, 637, 639, 643, 644, 645, 646, 648, 649, 672, 673, 678, 679, 680, 687, 688, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 714, 715, 716, 717, 718, 726, 730, 735, 743, 744, 745, 747, 748, 749, 751, 752, 753, 756, 757, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 780, 781, 782, 783, 784, 785, 786, 789, 790, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 814, 817, 820, 821, 824, 827, 828, 829, 830, 832, 833, 842, 858, 861, 863, 864, 866, 867, 868, 873, 874, 880, 882, 883, 886, 890, 891, 892, 900, 901, 905, 907, 911, 914, 920, 921, 922, 927, 928, 929, 936, 938, 940, 944, 949, 951, 958, 963, 964, 966, 968, 971, 972, 973, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 994, 995, 1006, 1008, 1011, 1012, 1013, 1015, 1016, 1027, 1031, 1032, 1033, 1040, 1046, 1047, 1053, 1054, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1114, 1116, 1120, 1121, 1126, 1131, 1138, 1139, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1174, 1176, 1178, 1179, 1180, 1182, 1189, 1199, 1200, 1207, 1209, 1214, 1223, 1230, 1236, 1237, 1238, 1239, 1240, 1241, 1255, 1257, 1265, 1273, 1274, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1295, 1296, 1300, 1301, 1302, 1303, 1304, 1312, 1316, 1321, 1329, 1332, 1339, 1342, 1344, 1345, 1346, 1348, 1357, 1366, 1367, 1371, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1383, 1385, 1386, 1387, 1388], "return_as_str": [237, 349, 605], "return_dtyp": [41, 258, 349, 588, 589, 644, 645, 756, 790, 803, 804, 842, 1209, 1236, 1237, 1357], "return_typ": [306, 311, 349], "returns_scalar": [145, 588, 589, 790, 804, 842], "reus": [62, 63, 129, 202, 863, 864, 874, 901, 914, 958], "reusabl": 202, "rev": [255, 349, 888, 958], "revers": [209, 225, 312, 349, 419, 433, 434, 435, 436, 437, 614, 616, 618, 748, 769, 775, 842, 858, 921, 958, 1047, 1048, 1049, 1050, 1051, 1357, 1375, 1378], "reverse_": 616, "reverse_a": 616, "reverse_b": 616, "revert": [7, 9, 11], "rhap": [699, 701, 1287], "rhapsodi": [699, 701, 1287], "right": [9, 11, 16, 17, 19, 28, 41, 72, 148, 149, 171, 172, 173, 174, 239, 253, 254, 281, 318, 349, 439, 495, 496, 497, 498, 526, 569, 570, 571, 572, 637, 650, 654, 656, 658, 660, 662, 665, 667, 669, 673, 681, 768, 781, 782, 784, 785, 800, 801, 829, 830, 832, 842, 882, 886, 887, 907, 925, 958, 1053, 1115, 1116, 1117, 1118, 1144, 1190, 1191, 1192, 1193, 1230, 1257, 1268, 1357, 1373, 1378], "right_left": [253, 318, 349, 886, 925, 958], "right_on": [253, 254, 318, 349, 886, 887, 925, 958], "rightmost": [673, 842, 1257, 1357, 1380], "rld": [720, 722, 1308], "rle": [649, 842, 1241, 1357], "rle_id": [648, 842, 1357], "rle_id_a": [649, 842], "rle_id_ab": [649, 842], "rmm": 933, "rn": [148, 149, 162], "role": [33, 151], "roll": [239, 349, 446, 466, 467, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 770, 818, 819, 842, 882, 958, 1059, 1083, 1084, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357], "rollback": [467, 1084], "rolled_forward": 446, "rollforward": [466, 1083], "rolling_kurtosi": [842, 1357], "rolling_map": [842, 1357], "rolling_max": [842, 1357], "rolling_max_bi": 842, "rolling_mean": [842, 1357], "rolling_mean_bi": 842, "rolling_median": [842, 1357], "rolling_median_bi": 842, "rolling_min": [842, 1357], "rolling_min_bi": 842, "rolling_quantil": [842, 1357], "rolling_quantile_bi": 842, "rolling_row_max": [654, 842], "rolling_row_mean": [656, 842], "rolling_row_median": [658, 842], "rolling_row_min": [660, 842], "rolling_row_quantil": [662, 842], "rolling_row_std": [665, 842], "rolling_row_sum": [667, 842], "rolling_row_var": [669, 842], "rolling_skew": [842, 1357], "rolling_std": [842, 1357], "rolling_std_bi": 842, "rolling_sum": [652, 842, 1243, 1357], "rolling_sum_bi": 842, "rolling_var": [842, 1357], "rolling_var_bi": 842, "rollinggroupbi": [281, 349], "rollinginterpolationmethod": [217, 275, 341, 349, 638, 661, 662, 815, 842, 868, 902, 947, 958, 1054, 1231, 1248, 1357], "ronaldo": [696, 1282], "root": [152, 163, 426, 602, 613, 614, 616, 618, 620, 621, 685, 841, 842, 1037, 1271, 1357, 1379], "rotat": [349, 352, 1357, 1362], "round": [21, 41, 58, 137, 150, 349, 427, 431, 508, 671, 744, 842, 1038, 1128, 1254, 1357, 1378], "round_sig_fig": [842, 1357], "round_str": 1091, "round_td": 1091, "rounded_corn": 21, "roundmod": [670, 842, 1253, 1357], "row": [15, 21, 26, 38, 39, 41, 47, 48, 51, 53, 56, 57, 59, 64, 104, 110, 118, 126, 133, 134, 135, 136, 137, 143, 144, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 171, 172, 178, 207, 209, 210, 211, 221, 222, 227, 230, 232, 233, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 264, 265, 269, 273, 277, 281, 284, 285, 294, 300, 303, 305, 306, 311, 312, 314, 316, 317, 318, 325, 326, 330, 332, 334, 335, 343, 349, 353, 374, 375, 383, 398, 419, 420, 501, 509, 513, 519, 542, 553, 580, 630, 631, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 682, 684, 695, 704, 743, 748, 762, 765, 771, 773, 790, 794, 796, 797, 799, 801, 816, 818, 819, 827, 842, 858, 861, 871, 872, 878, 879, 880, 882, 883, 886, 887, 888, 889, 891, 892, 896, 897, 904, 915, 920, 921, 922, 924, 925, 931, 932, 936, 938, 940, 941, 949, 958, 968, 983, 992, 1120, 1121, 1131, 1138, 1163, 1174, 1225, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1269, 1281, 1290, 1329, 1357, 1366, 1373, 1375, 1386, 1387, 1388], "row_group": [160, 167], "row_group_s": [47, 51, 349, 958], "row_height": [41, 349], "row_index": [41, 349], "row_index_nam": [148, 149, 154, 156, 158, 160, 162, 165, 166, 167], "row_index_offset": [148, 149, 154, 156, 158, 160, 162, 165, 166, 167], "row_nr": [325, 349, 931, 958], "row_tot": [41, 349], "rowname_col": [349, 353], "rows_by_kei": [251, 283, 302, 349], "rowserror": [282, 349], "rowtotalsdefinit": [41, 349], "rtol": [171, 172, 173, 174], "rtrim": 1378, "ru": 1380, "rule": [148, 160, 162, 167, 232, 349, 689, 713, 728, 1275, 1299, 1314], "run": [48, 49, 50, 51, 62, 63, 71, 95, 129, 150, 178, 181, 182, 183, 238, 253, 256, 258, 288, 314, 324, 335, 349, 424, 438, 552, 588, 589, 648, 649, 707, 820, 842, 863, 864, 874, 881, 886, 892, 896, 901, 903, 910, 914, 922, 929, 933, 958, 962, 964, 1033, 1052, 1173, 1209, 1240, 1241, 1293, 1357, 1385, 1388], "runtim": 962, "runtimeerror": [307, 349, 1338, 1357], "rust": [38, 47, 48, 100, 112, 145, 153, 154, 156, 160, 258, 335, 349, 698, 958, 962, 1209, 1284, 1357], "s1": [55, 96, 97, 173, 174, 232, 349, 768, 772, 774, 1007, 1112, 1113, 1133, 1158, 1168, 1201, 1221, 1233, 1348, 1357], "s2": [1, 55, 96, 97, 173, 174, 232, 349, 768, 772, 774, 1007, 1039, 1056, 1112, 1113, 1133, 1149, 1158, 1168, 1201, 1215, 1221, 1233, 1348, 1357], "s3": [1, 40, 152, 163, 164, 167, 168, 349, 903, 958, 1007, 1201, 1357], "s_": 479, "s_bar": 1375, "s_dt": [479, 1380, 1381], "s_dt1": 1380, "s_dt2": 1380, "s_dtm": 479, "s_foo": 1375, "s_from_str_repr": [1335, 1357], "s_head_5": 702, "s_head_n": 702, "s_tail_5": 726, "s_tail_n": 726, "s_td": 479, "s_tm": [479, 1380, 1381], "safe": [642, 842, 1234, 1357], "sale": [630, 842], "salesforce_format": 195, "sam": 13, "same": [21, 40, 41, 54, 55, 56, 62, 63, 64, 96, 97, 113, 154, 162, 171, 172, 173, 174, 176, 202, 230, 238, 254, 258, 273, 277, 283, 284, 295, 314, 323, 324, 328, 335, 349, 357, 364, 397, 423, 444, 445, 479, 505, 509, 511, 512, 515, 579, 593, 599, 630, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 677, 684, 695, 706, 738, 832, 838, 842, 863, 864, 878, 881, 887, 890, 892, 904, 914, 916, 922, 928, 929, 934, 958, 964, 969, 1006, 1032, 1057, 1058, 1063, 1096, 1200, 1209, 1236, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1281, 1292, 1348, 1357, 1371, 1373, 1381], "samoa": [447, 1060], "sampl": [148, 149, 335, 349, 677, 681, 800, 801, 842, 941, 1268, 1357, 1374], "sample_s": [148, 149], "sampled_from": 1388, "sandwich": [235, 349], "sat": [349, 352], "satisfi": [526, 842, 1144, 1357], "saturdai": [239, 349, 882, 958], "save": [2, 3, 6, 239, 254, 281, 319, 349, 447, 455, 469, 474, 487, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 786, 829, 830, 838, 842, 854, 882, 887, 907, 958, 1068, 1086, 1091, 1104], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [145, 207, 249, 258, 282, 292, 349, 424, 588, 673, 675, 702, 707, 715, 726, 790, 802, 804, 842, 913, 958, 968, 1033, 1158, 1257, 1261, 1288, 1293, 1301, 1312, 1357], "scale": [29, 72, 225, 349, 407, 589, 634, 729, 842, 964, 1114, 1315, 1357], "scale_negative_even": [634, 842], "scan": [133, 136, 148, 149, 150, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 192, 349, 704, 958, 1290], "scan_csv": [48, 49, 50, 51, 148, 149, 958], "scan_ipc": 154, "scan_ndjson": 158, "scan_parquet": [52, 53, 54, 160, 168, 903, 958], "scan_pyarrow_dataset": [160, 167], "scan_tabl": 200, "scatter": [349, 352, 1357, 1362], "scenario": 1357, "schedul": [63, 864, 958], "schema": [0, 1, 15, 29, 36, 39, 40, 57, 58, 59, 64, 95, 104, 121, 122, 130, 132, 133, 134, 136, 143, 144, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 188, 190, 191, 192, 196, 198, 211, 212, 213, 219, 223, 225, 252, 256, 258, 265, 269, 278, 307, 311, 349, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 453, 579, 580, 589, 600, 615, 617, 619, 704, 756, 824, 842, 854, 861, 862, 865, 866, 870, 873, 892, 897, 905, 927, 941, 958, 964, 1042, 1290, 1357, 1366], "schema_mod": [40, 349], "schema_overrid": [130, 132, 133, 134, 135, 136, 148, 149, 150, 151, 153, 157, 158, 159, 162, 166, 252, 307, 349, 958, 964], "schemadefinit": [130, 132, 133, 134, 136, 157, 158, 166, 349, 958], "schemadict": [87, 95, 130, 132, 133, 134, 135, 136, 143, 148, 150, 151, 153, 159, 160, 162, 165, 167, 349, 824, 892, 941, 958], "schemainitdatatyp": 963, "scheme": [52, 53, 54], "schindler": 1366, "scientif": [12, 38, 48, 349, 958], "scikit": [311, 349], "scipi": [538, 681, 842, 1159, 1268, 1357], "scope": [34, 35, 202, 853, 964, 1369, 1372, 1385], "score": [41, 273, 349], "script": [349, 352, 1357, 1362], "scroll": [41, 349], "sdiff": 571, "sdk": 187, "search": [254, 349, 580, 689, 699, 701, 713, 887, 916, 958, 1141, 1275, 1285, 1287, 1299, 1357], "search_sort": [842, 1357], "searchsortedsid": [673, 842, 1257, 1357], "searchstrategi": [175, 177, 178, 179, 180, 182], "season": [711, 712], "sec": [1381, 1388], "second": [38, 48, 158, 162, 165, 166, 171, 172, 173, 174, 239, 254, 281, 319, 349, 457, 461, 463, 464, 468, 469, 472, 474, 479, 486, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 711, 712, 725, 728, 783, 784, 785, 786, 828, 829, 830, 842, 882, 887, 907, 958, 964, 1086, 1089, 1091, 1103, 1104, 1116, 1297, 1298, 1311, 1314, 1357, 1380, 1381, 1386, 1388], "second_part": [717, 718, 1303, 1304], "seconds_diff": 486, "secret": [164, 167], "section": [273, 349, 688, 696, 697, 700, 711, 712, 781, 782, 784, 785, 829, 830, 962, 1274, 1282, 1283, 1286, 1297, 1298], "secur": [441, 842, 869, 958], "see": [38, 40, 41, 43, 44, 47, 48, 49, 50, 51, 71, 143, 145, 150, 151, 152, 153, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 178, 182, 192, 204, 215, 230, 239, 253, 272, 273, 277, 318, 349, 353, 412, 413, 415, 416, 428, 479, 504, 538, 588, 681, 688, 696, 697, 700, 702, 711, 712, 726, 781, 782, 784, 785, 816, 829, 830, 838, 842, 878, 882, 904, 925, 933, 958, 962, 964, 966, 1021, 1022, 1024, 1025, 1035, 1041, 1096, 1159, 1268, 1274, 1282, 1283, 1286, 1288, 1297, 1298, 1312, 1357, 1388], "seed": [95, 169, 240, 285, 349, 518, 568, 640, 672, 677, 842, 1137, 1189, 1232, 1255, 1264, 1357], "seed_1": [240, 349, 518, 842, 1137, 1357], "seed_2": [240, 349, 518, 842, 1137, 1357], "seed_3": [240, 349, 518, 842, 1137, 1357], "seen": [479, 1096], "seen_group": 149, "select": [1, 8, 39, 48, 49, 50, 51, 56, 57, 58, 59, 62, 63, 95, 101, 146, 148, 149, 150, 151, 152, 154, 156, 160, 162, 164, 168, 177, 207, 208, 249, 250, 254, 258, 269, 272, 282, 288, 294, 296, 309, 315, 319, 326, 349, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 383, 388, 389, 390, 395, 396, 397, 398, 399, 400, 402, 405, 408, 409, 414, 417, 418, 419, 422, 426, 427, 429, 430, 431, 432, 438, 440, 442, 443, 444, 445, 448, 450, 451, 460, 466, 467, 469, 473, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 492, 495, 497, 498, 499, 500, 501, 502, 506, 508, 513, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 531, 537, 538, 539, 541, 542, 552, 553, 580, 583, 584, 585, 586, 588, 589, 590, 591, 592, 596, 608, 610, 612, 613, 615, 617, 619, 622, 623, 627, 628, 629, 630, 632, 633, 636, 638, 639, 640, 641, 642, 643, 646, 647, 648, 651, 652, 663, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 701, 703, 708, 725, 736, 738, 739, 742, 743, 744, 745, 747, 748, 750, 751, 752, 753, 754, 757, 759, 761, 764, 765, 766, 769, 770, 772, 773, 774, 775, 778, 785, 786, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 805, 807, 809, 810, 812, 813, 816, 817, 821, 822, 823, 824, 825, 827, 831, 838, 842, 857, 863, 864, 866, 874, 887, 900, 901, 910, 914, 915, 917, 923, 930, 932, 933, 958, 964, 968, 1090, 1130, 1173, 1256, 1258, 1269, 1287, 1291, 1311, 1357, 1366, 1367, 1368, 1369, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387], "select_from": [177, 180, 182], "select_seq": [349, 958], "selector": [0, 41, 210, 219, 221, 222, 226, 264, 271, 273, 295, 304, 306, 311, 314, 316, 317, 349, 353, 479, 499, 596, 842, 854, 860, 870, 871, 872, 875, 896, 916, 922, 924, 958], "selectortyp": [41, 349, 964], "self": [1, 57, 58, 59, 60, 62, 63, 129, 296, 327, 349, 821, 842, 863, 864, 874, 901, 914, 917, 930, 958, 973, 1019, 1020, 1021, 1022, 1024, 1025, 1028, 1042, 1047, 1121, 1125, 1140, 1207, 1209, 1222, 1226, 1227, 1233, 1236, 1237, 1256, 1258, 1259, 1270, 1345, 1348, 1357, 1368, 1369, 1370, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385], "semi": [144, 253, 349, 886, 958, 1373], "semigraph": 21, "sens": [148, 154, 156, 265, 319, 349, 630, 842, 897, 958], "sensit": [688, 697, 700, 711, 712, 1274, 1283, 1286, 1297, 1298], "sep": 144, "separ": [9, 11, 25, 28, 37, 38, 48, 139, 144, 147, 148, 149, 153, 162, 271, 273, 304, 313, 315, 349, 383, 386, 479, 553, 559, 589, 695, 771, 776, 777, 842, 914, 923, 958, 992, 995, 1096, 1174, 1180, 1281, 1327, 1333, 1357, 1380], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 54, 56, 87, 130, 132, 133, 134, 136, 144, 148, 149, 150, 153, 157, 158, 159, 162, 166, 176, 177, 178, 179, 180, 209, 217, 226, 227, 253, 254, 264, 269, 271, 272, 273, 284, 295, 304, 306, 311, 312, 316, 317, 318, 319, 349, 398, 419, 439, 512, 530, 580, 588, 634, 637, 644, 645, 684, 713, 723, 724, 738, 748, 765, 776, 777, 790, 792, 800, 801, 803, 804, 813, 816, 822, 842, 858, 868, 875, 886, 887, 896, 900, 916, 921, 924, 925, 958, 964, 1007, 1053, 1054, 1121, 1201, 1230, 1236, 1237, 1299, 1325, 1357], "sequenti": [62, 63, 129, 288, 324, 349, 863, 864, 874, 901, 910, 914, 929, 958], "ser": [1065, 1066, 1094], "seri": [0, 1, 12, 26, 41, 55, 57, 58, 59, 60, 64, 65, 74, 87, 96, 97, 106, 130, 132, 135, 137, 145, 173, 174, 178, 207, 220, 230, 232, 234, 236, 239, 240, 243, 244, 245, 246, 248, 250, 260, 262, 267, 277, 279, 281, 285, 299, 302, 305, 307, 309, 310, 329, 349, 364, 375, 398, 402, 421, 422, 423, 424, 425, 427, 473, 502, 505, 508, 512, 513, 523, 524, 525, 528, 530, 531, 533, 534, 535, 536, 547, 553, 555, 580, 586, 588, 589, 640, 641, 642, 643, 644, 645, 650, 652, 663, 674, 676, 702, 713, 725, 726, 727, 728, 732, 736, 747, 752, 762, 766, 768, 769, 772, 774, 776, 777, 781, 782, 784, 785, 790, 792, 796, 797, 800, 801, 802, 803, 804, 814, 816, 817, 820, 821, 824, 829, 830, 833, 842, 854, 878, 882, 885, 904, 907, 935, 958, 1349, 1351, 1353, 1356, 1358, 1361, 1362, 1363, 1364, 1365, 1367, 1369, 1380, 1385, 1388], "serial": [45, 46, 218, 349, 441, 607, 842, 869, 958], "serializ": [145, 842], "serializationformat": [218, 289, 349, 441, 603, 842, 869, 911, 958], "seriesplot": [1357, 1362], "server": [39, 150, 151, 349], "servic": 33, "service_account": [152, 163], "service_account_json_absolute_path": [152, 163], "session": 150, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 62, 63, 68, 71, 72, 74, 131, 132, 133, 136, 145, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 192, 202, 206, 214, 221, 222, 231, 234, 238, 240, 251, 253, 254, 262, 264, 283, 285, 287, 289, 294, 299, 304, 306, 307, 311, 313, 314, 316, 317, 318, 323, 349, 352, 361, 363, 385, 386, 398, 410, 412, 413, 415, 416, 428, 439, 472, 473, 490, 518, 530, 555, 557, 559, 568, 569, 570, 571, 572, 574, 580, 588, 589, 596, 597, 603, 634, 637, 644, 645, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 672, 677, 681, 682, 687, 703, 704, 711, 712, 715, 720, 721, 722, 723, 724, 725, 727, 728, 732, 753, 757, 759, 762, 766, 768, 771, 772, 774, 781, 782, 783, 784, 785, 786, 790, 796, 797, 800, 801, 802, 808, 814, 817, 818, 819, 820, 824, 826, 829, 830, 832, 833, 842, 854, 863, 864, 871, 872, 874, 881, 886, 887, 892, 896, 901, 909, 911, 914, 915, 922, 924, 925, 928, 941, 958, 971, 972, 994, 995, 1007, 1012, 1019, 1021, 1022, 1024, 1025, 1041, 1053, 1089, 1090, 1107, 1127, 1137, 1149, 1156, 1176, 1178, 1180, 1189, 1190, 1191, 1192, 1193, 1195, 1201, 1209, 1230, 1236, 1237, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1257, 1264, 1268, 1269, 1273, 1289, 1290, 1297, 1298, 1301, 1306, 1307, 1308, 1311, 1313, 1314, 1318, 1338, 1346, 1357, 1376, 1384, 1388], "set_": 202, "set_auto_structifi": [287, 323, 349, 909, 928, 958], "set_decimal_separ": 28, "set_environ": 181, "set_except": [63, 864, 958], "set_fmt_float": 31, "set_fmt_str_length": [689, 699, 701, 713, 1275, 1287, 1299], "set_index": [239, 349, 882, 958], "set_legend": [41, 349], "set_sort": [281, 319, 349, 650, 842, 907, 958, 1357], "set_stat": 31, "set_streaming_chunk_s": [863, 958], "set_styl": [41, 349], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 56], "set_tbl_row": 202, "set_tbl_width_char": 713, "set_thousands_separ": 9, "set_titl": [41, 349], "set_verbos": 202, "setosa": [349, 352], "setup": 1388, "seventeen": [522, 842], "sever": [130, 132, 133, 134, 136, 157, 158, 166, 349, 903, 958, 1388], "sfu": 151, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 60, 64, 65, 83, 87, 95, 96, 97, 104, 123, 130, 131, 132, 133, 134, 135, 136, 137, 144, 148, 157, 158, 162, 168, 175, 178, 182, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 232, 233, 234, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 285, 287, 289, 292, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 608, 609, 610, 611, 612, 613, 614, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 857, 858, 860, 861, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 964, 968, 969, 970, 973, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1128, 1130, 1131, 1133, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1214, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1261, 1262, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1324, 1327, 1329, 1330, 1331, 1333, 1334, 1335, 1340, 1342, 1343, 1344, 1345, 1346, 1348, 1357, 1366, 1367, 1368, 1369, 1371, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1385, 1386], "share": [171, 172, 173, 174, 225, 349, 1114, 1357], "shawshank": 1366, "sheet": [41, 153, 159, 349], "sheet1": [41, 349], "sheet_id": [153, 159], "sheet_nam": [153, 159], "sheet_zoom": [41, 349], "sheetnam": [153, 159], "shift": [239, 349, 401, 442, 510, 550, 631, 770, 842, 882, 958, 1010, 1055, 1129, 1171, 1225, 1357], "short": [171, 173, 406, 1015], "shorten": [171, 173], "shorter": [148, 149, 162, 580, 796, 797], "shorthand": [349, 352, 832, 1357, 1362], "should": [11, 39, 41, 47, 48, 49, 50, 51, 64, 95, 130, 132, 134, 136, 143, 144, 153, 157, 158, 162, 164, 166, 168, 175, 176, 178, 182, 219, 251, 253, 254, 258, 282, 283, 284, 295, 303, 304, 315, 335, 349, 359, 438, 441, 490, 496, 499, 533, 534, 552, 589, 603, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 681, 684, 711, 712, 753, 765, 786, 788, 802, 804, 818, 819, 838, 842, 863, 869, 870, 874, 886, 887, 892, 901, 911, 914, 916, 923, 958, 964, 1052, 1107, 1116, 1173, 1209, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1257, 1268, 1297, 1298, 1346, 1357, 1367], "show": [31, 41, 217, 222, 237, 256, 270, 349, 520, 604, 842, 868, 901, 914, 958, 1139, 1357, 1371, 1384], "show_graph": [256, 349, 958], "show_plot": [901, 958], "shrink": [293, 349, 676, 842, 1262, 1263, 1357], "shrink_dtyp": [842, 1357], "shrink_to_fit": [349, 1357], "shuffl": [169, 285, 311, 335, 349, 568, 672, 842, 941, 1189, 1255, 1357], "side": [41, 145, 239, 281, 349, 526, 569, 570, 571, 572, 650, 654, 656, 658, 660, 662, 665, 667, 669, 673, 781, 782, 784, 785, 800, 801, 829, 830, 842, 882, 907, 958, 1144, 1190, 1191, 1192, 1193, 1257, 1357], "sign": [70, 71, 73, 78, 79, 80, 81, 82, 88, 469, 642, 711, 712, 735, 842, 964, 1086, 1234, 1297, 1298, 1321, 1357, 1378], "sign_x": 1379, "signed_integ": 964, "signific": [167, 251, 258, 349, 412, 413, 415, 416, 589, 671, 842, 1021, 1022, 1024, 1025, 1209, 1254, 1357], "significantli": [153, 258, 335, 349, 1209, 1357, 1388], "silenc": 104, "silent": [730, 1316], "similar": [37, 47, 147, 184, 232, 254, 292, 314, 316, 349, 393, 476, 479, 573, 630, 675, 740, 799, 832, 842, 878, 887, 913, 922, 924, 958, 1002, 1093, 1096, 1194, 1261, 1357], "similarli": [41, 133, 239, 254, 281, 319, 349, 469, 474, 487, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 1086, 1091, 1104], "simpl": [41, 269, 349], "simpler": [964, 1297], "simpli": [162, 776, 790], "simplifi": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 901, 914, 958], "simplify_express": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 901, 914, 958], "sin": [842, 1357, 1378], "sinc": [40, 65, 70, 71, 88, 148, 149, 150, 152, 158, 162, 163, 165, 166, 175, 176, 177, 178, 182, 185, 208, 264, 307, 325, 330, 349, 453, 456, 490, 511, 588, 607, 644, 687, 695, 755, 764, 772, 792, 842, 857, 874, 896, 916, 930, 931, 936, 958, 1066, 1069, 1075, 1076, 1107, 1136, 1236, 1273, 1281, 1338, 1357], "sind": 1378, "sine": [368, 369, 588, 679, 680, 842, 977, 978, 1266, 1267, 1357, 1382], "singl": [41, 47, 56, 63, 64, 75, 147, 148, 149, 150, 151, 152, 153, 160, 162, 163, 165, 176, 210, 219, 220, 221, 222, 227, 234, 240, 249, 258, 271, 282, 284, 295, 306, 307, 349, 382, 424, 428, 446, 469, 512, 515, 518, 549, 555, 588, 589, 641, 644, 646, 648, 684, 687, 702, 703, 707, 715, 726, 755, 765, 769, 770, 771, 797, 801, 803, 804, 822, 830, 832, 838, 842, 860, 870, 871, 872, 916, 958, 964, 991, 1033, 1041, 1059, 1086, 1121, 1137, 1170, 1176, 1233, 1236, 1238, 1240, 1273, 1288, 1289, 1293, 1301, 1312, 1332, 1338, 1357, 1368], "singlecolselector": 207, "singleindexselector": [207, 968], "sinh": [842, 1357], "sink": 855, "sink_": [52, 54], "sink_csv": [52, 53, 54, 958], "sink_ipc": 958, "sink_ndjson": 958, "sink_parquet": [52, 958], "site_id": [349, 353], "six": [673, 842], "size": [15, 47, 51, 53, 143, 148, 149, 150, 175, 176, 177, 178, 182, 184, 225, 317, 349, 580, 646, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 762, 796, 797, 818, 819, 842, 863, 958, 1114, 1238, 1242, 1249, 1357, 1388], "sizeunit": [225, 349, 407, 1016, 1114, 1357], "skew": [663, 842, 1249, 1357], "skewtest": [681, 842, 1268, 1357], "skip": [148, 149, 153, 160, 162, 167, 254, 317, 349, 887, 958, 1209, 1357, 1373], "skip_empty_lin": 153, "skip_lin": [148, 162], "skip_nul": [589, 842, 1209, 1357], "skip_row": [148, 149, 162], "skip_rows_after_head": [148, 149, 162], "sklearn": [311, 349], "slice": [48, 49, 50, 51, 57, 62, 63, 129, 145, 225, 241, 252, 300, 349, 558, 578, 589, 600, 602, 652, 653, 655, 657, 659, 661, 664, 666, 668, 702, 726, 842, 863, 864, 874, 892, 901, 914, 958, 1114, 1138, 1179, 1199, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1288, 1312, 1329, 1357, 1380], "slice_pushdown": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 892, 901, 914, 958], "slide": [438, 842, 1052, 1357], "slightli": [48, 49, 50, 51, 100, 509, 842, 958, 1381], "slot": [438, 442, 550, 842, 1052, 1055, 1171, 1357], "slow": [116, 133, 136, 148, 149, 150, 153, 157, 158, 159, 162, 166, 167, 349, 438, 589, 652, 704, 842, 941, 958, 1052, 1243, 1290, 1357], "slower": [134, 136, 153, 238, 258, 271, 319, 335, 349, 589, 804, 842, 881, 941, 958, 1209, 1357], "small": [12, 151, 474, 958, 1388], "smaller": [47, 51, 53, 225, 349, 958, 1114, 1357], "smallest": [209, 312, 349, 418, 419, 748, 842, 858, 921, 958, 1027, 1357, 1374, 1377], "smooth": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "snappi": [36, 47, 51, 349, 958], "snapshot": 164, "snapshot_id": 164, "snowflak": [150, 151], "snowflake_format": 195, "snowi": [711, 712], "so": [1, 41, 151, 153, 162, 184, 202, 237, 239, 255, 273, 281, 349, 375, 385, 441, 509, 526, 557, 580, 589, 650, 711, 712, 713, 720, 721, 722, 736, 842, 869, 882, 888, 907, 958, 964, 994, 1178, 1297, 1298, 1299, 1306, 1307, 1308], "softwar": [37, 147, 349], "solut": [39, 349], "solv": [95, 143], "some": [15, 31, 41, 47, 51, 55, 64, 97, 133, 148, 149, 150, 162, 206, 222, 273, 284, 307, 349, 353, 711, 712, 838, 903, 958, 1149, 1297, 1298, 1357, 1388], "some_account": [697, 1283], "some_t": 1387, "someth": [588, 842], "sometim": [786, 841], "somewher": [697, 1283], "sort": [54, 56, 57, 209, 239, 254, 265, 272, 273, 281, 290, 312, 319, 332, 343, 349, 374, 418, 419, 496, 505, 589, 630, 650, 674, 684, 747, 748, 753, 755, 765, 781, 784, 804, 842, 858, 874, 882, 887, 897, 900, 901, 907, 912, 914, 921, 938, 949, 958, 964, 983, 1027, 1116, 1156, 1259, 1342, 1343, 1346, 1357, 1373, 1386, 1388], "sort_bi": 842, "sort_column": [273, 349], "sorted": [254, 349, 887, 958], "sorted_asc": [1127, 1357], "sorted_desc": [1127, 1357], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 842, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 958, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357, 1362, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1385], "source_ac": 137, "source_actor_id": 137, "source_alia": [40, 349], "source_cha": 137, "source_channel_id": 137, "south": 74, "space": [21, 239, 349, 479, 800, 801, 882, 958, 964, 1096], "spam": [261, 349, 697, 1283], "span": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "spanner": [349, 353], "spark": [47, 349], "sparklin": [41, 349], "speak": [681, 842, 1268, 1357], "spearman": 772, "speci": [349, 352], "special": [39, 54, 148, 149, 151, 162, 311, 326, 349, 652, 697, 711, 712, 842, 932, 958, 1209, 1243, 1283, 1297, 1298, 1357], "specif": [1, 31, 40, 41, 43, 44, 49, 100, 130, 132, 134, 136, 144, 148, 151, 152, 153, 157, 158, 159, 163, 164, 166, 210, 251, 253, 301, 306, 349, 476, 479, 725, 727, 728, 732, 753, 842, 860, 886, 958, 963, 964, 1093, 1096, 1311, 1313, 1314, 1318, 1332, 1336, 1346, 1357, 1373, 1385, 1387, 1388], "specifi": [10, 38, 39, 40, 41, 47, 48, 56, 101, 104, 107, 122, 125, 148, 153, 159, 160, 162, 167, 179, 188, 190, 191, 192, 209, 210, 225, 226, 229, 234, 238, 239, 253, 254, 271, 273, 281, 282, 284, 287, 288, 292, 295, 306, 312, 315, 323, 324, 328, 349, 419, 428, 472, 479, 495, 497, 498, 499, 504, 630, 643, 645, 653, 655, 657, 659, 661, 664, 666, 668, 675, 684, 740, 748, 765, 768, 769, 770, 771, 781, 782, 784, 785, 786, 788, 820, 824, 829, 830, 838, 842, 858, 860, 875, 877, 881, 882, 886, 887, 907, 909, 910, 913, 916, 921, 923, 928, 929, 934, 958, 964, 1041, 1089, 1096, 1114, 1115, 1117, 1118, 1124, 1237, 1261, 1336, 1357, 1373, 1380, 1387], "speed": [51, 290, 349, 589, 842, 912, 958, 962, 1388], "speedup": [56, 167, 251, 258, 349, 589, 842, 1209, 1357], "split": [1, 41, 47, 52, 53, 54, 57, 252, 349, 695, 717, 718, 1281, 1303, 1304, 1380], "split_by_column_dtyp": 59, "split_inclus": 716, "split_part": 1378, "splitfram": [1, 57], "spreadsheet": [37, 147, 153, 159, 273, 349], "spring": [711, 712], "sql": [0, 39, 119, 120, 128, 150, 151, 253, 292, 349, 393, 573, 675, 799, 822, 842, 854, 913, 958, 1002, 1194, 1261, 1357, 1366, 1367, 1369, 1371, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1386, 1387], "sql_expr": 1385, "sqlalchemi": [39, 150, 170, 349], "sqlcontext": [296, 349, 821, 917, 958, 1384], "sqldw_format": 195, "sqlite": [39, 150, 349], "sqrt": [589, 681, 740, 842, 1209, 1268, 1357, 1378], "sqrt_x": 1379, "squar": [1, 60, 335, 538, 646, 685, 842, 941, 1159, 1238, 1271, 1357, 1379], "st": [33, 1388], "stabil": [240, 349, 518, 842, 1137, 1357], "stabl": [160, 204, 215, 217, 218, 240, 285, 289, 296, 349, 441, 518, 585, 603, 746, 842, 868, 869, 896, 911, 916, 917, 958, 966, 1137, 1340, 1357], "stack": [64, 243, 321, 349, 352, 1367], "stage": [914, 958], "stai": [588, 677, 842], "standalon": [176, 964], "standard": [7, 11, 41, 150, 297, 306, 311, 349, 460, 497, 664, 665, 681, 686, 705, 708, 823, 838, 842, 918, 958, 1073, 1112, 1117, 1221, 1268, 1272, 1291, 1294, 1357, 1374, 1388], "standardis": [41, 349], "start": [41, 48, 49, 50, 51, 54, 146, 148, 149, 151, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 184, 233, 238, 239, 256, 294, 319, 325, 326, 349, 402, 405, 408, 421, 425, 446, 454, 458, 465, 470, 474, 487, 488, 499, 513, 556, 574, 649, 654, 656, 658, 660, 662, 665, 667, 669, 682, 688, 693, 697, 701, 710, 715, 719, 720, 722, 723, 726, 735, 762, 767, 776, 780, 781, 782, 783, 784, 785, 788, 790, 796, 797, 800, 801, 829, 830, 832, 838, 842, 880, 881, 882, 901, 915, 931, 932, 958, 964, 1017, 1029, 1034, 1059, 1061, 1064, 1067, 1069, 1070, 1077, 1079, 1081, 1082, 1085, 1087, 1091, 1095, 1104, 1105, 1131, 1177, 1195, 1241, 1269, 1279, 1283, 1287, 1296, 1301, 1305, 1306, 1308, 1312, 1321, 1357, 1373, 1380, 1388], "start_bi": [239, 349, 882, 958], "startbi": [239, 349, 882, 958], "starts_a": 1380, "starts_with": [57, 273, 349, 353, 402, 405, 421, 596, 688, 693, 821, 917, 958, 964, 1029, 1279, 1378], "starts_with_expr": 408, "starts_with_lit": 408, "startup": [306, 349], "stat": [538, 681, 842, 1159, 1268, 1357], "state": [4, 5, 112, 776, 854, 1385], "statement": [630, 832, 842, 1371, 1386], "static": [93, 941], "statist": [47, 51, 148, 149, 160, 165, 167, 217, 349, 497, 498, 538, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 681, 842, 868, 958, 1054, 1117, 1118, 1159, 1242, 1249, 1268, 1357], "std": [217, 349, 664, 665, 842, 868, 958, 1054, 1250, 1357], "std_dev": [41, 349], "stddev": 1378, "stddev_samp": 1374, "stdev": [41, 349, 1374], "stdev_samp": 1374, "stdout": [202, 237, 349, 605], "step": [317, 349, 509, 762, 796, 797, 842], "steve": [265, 349, 897, 958], "still": [150, 151], "stock": [349, 352], "stop": [143, 146, 148, 149, 154, 156, 158, 160, 162, 165, 166, 167, 654, 656, 658, 660, 662, 665, 667, 669, 842, 1061, 1064, 1069, 1070, 1077, 1079, 1081, 1085, 1091, 1095], "storag": [38, 40, 43, 47, 48, 49, 50, 51, 148, 152, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 192, 349, 958], "storage_loc": [193, 196, 197], "storage_opt": [38, 40, 43, 47, 48, 49, 50, 51, 148, 152, 154, 156, 158, 160, 162, 163, 164, 165, 166, 167, 192, 349, 958], "store": [40, 164, 227, 251, 283, 349, 422, 648, 842, 1030, 1121, 1240, 1357], "store_id": [630, 842], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 71, 74, 75, 98, 129, 130, 131, 132, 133, 134, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 175, 176, 178, 181, 182, 183, 187, 188, 190, 191, 192, 193, 194, 196, 197, 202, 209, 210, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 230, 231, 232, 234, 235, 237, 238, 239, 241, 243, 246, 248, 249, 251, 253, 254, 255, 257, 259, 261, 263, 264, 265, 266, 269, 271, 273, 275, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349, 358, 359, 360, 381, 386, 398, 402, 403, 404, 405, 408, 409, 414, 417, 419, 421, 422, 425, 433, 439, 441, 443, 451, 469, 473, 474, 476, 479, 487, 496, 499, 505, 507, 511, 512, 515, 523, 526, 547, 548, 557, 558, 559, 574, 578, 580, 589, 600, 602, 603, 604, 605, 607, 614, 615, 616, 617, 618, 619, 620, 621, 627, 630, 634, 637, 643, 644, 645, 647, 649, 650, 654, 656, 658, 660, 662, 665, 667, 669, 676, 683, 684, 736, 737, 738, 739, 748, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 838, 842, 849, 858, 860, 863, 864, 866, 868, 869, 870, 871, 872, 874, 875, 878, 881, 882, 884, 886, 887, 888, 896, 897, 900, 901, 904, 905, 906, 907, 911, 912, 914, 915, 916, 917, 921, 922, 923, 924, 925, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 958, 963, 964, 970, 990, 995, 1007, 1013, 1028, 1029, 1030, 1034, 1053, 1054, 1064, 1086, 1090, 1091, 1093, 1096, 1104, 1116, 1124, 1127, 1168, 1169, 1180, 1201, 1217, 1218, 1219, 1230, 1235, 1236, 1237, 1258, 1322, 1324, 1325, 1333, 1334, 1335, 1336, 1346, 1357, 1363, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1377, 1380, 1381, 1385, 1386, 1388], "str_date": 1380, "str_timestamp": 1380, "str_valu": [52, 141], "strategi": [38, 48, 56, 64, 148, 167, 175, 176, 177, 178, 179, 180, 182, 229, 239, 253, 254, 268, 318, 319, 349, 401, 434, 437, 504, 510, 580, 589, 842, 855, 877, 882, 886, 887, 903, 925, 958, 1010, 1124, 1129, 1201, 1357], "stream": [10, 15, 43, 44, 48, 49, 50, 51, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 238, 253, 314, 349, 588, 842, 863, 874, 881, 886, 892, 896, 901, 914, 916, 922, 958], "streamabl": [892, 896, 924, 958], "streaming_t": 199, "strftime": [100, 479, 1096, 1378, 1380], "strict": [132, 133, 136, 144, 210, 219, 278, 349, 403, 420, 479, 688, 691, 700, 725, 727, 728, 730, 732, 842, 860, 870, 905, 958, 964, 1012, 1028, 1096, 1274, 1277, 1286, 1311, 1313, 1314, 1316, 1318, 1357], "strictli": [38, 48, 55, 97, 254, 349, 887, 958], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 48, 55, 68, 71, 74, 87, 94, 96, 97, 98, 100, 106, 124, 133, 137, 144, 148, 149, 150, 151, 162, 171, 172, 173, 174, 175, 182, 186, 209, 210, 213, 218, 223, 225, 232, 234, 237, 238, 239, 254, 271, 273, 281, 284, 286, 287, 288, 289, 295, 305, 306, 312, 313, 317, 319, 323, 324, 328, 349, 358, 381, 386, 405, 419, 421, 423, 424, 425, 428, 441, 469, 474, 476, 479, 487, 496, 499, 507, 511, 526, 559, 603, 605, 630, 634, 644, 645, 650, 654, 656, 658, 660, 662, 665, 667, 669, 684, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 740, 748, 756, 758, 760, 765, 768, 769, 770, 771, 779, 781, 782, 784, 785, 791, 806, 808, 811, 820, 824, 826, 829, 830, 832, 838, 842, 854, 858, 860, 865, 869, 873, 874, 881, 882, 887, 907, 908, 909, 910, 911, 916, 921, 928, 929, 934, 958, 963, 964, 995, 1012, 1013, 1014, 1029, 1031, 1032, 1033, 1034, 1086, 1091, 1093, 1096, 1104, 1116, 1144, 1180, 1236, 1237, 1273, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1324, 1335, 1336, 1357, 1366, 1367, 1375, 1378, 1381, 1384, 1388], "string_to_arrai": 1378, "stringcach": [96, 97, 253, 349, 854, 1031, 1035], "stringio": [157, 158, 511, 842], "strings_hex": 692, "strip": [29, 720, 721, 722, 723, 724, 1306, 1307, 1308, 1380], "strip_chars_end": [722, 724], "strip_chars_start": [721, 723], "strip_prefix": [722, 724], "strip_suffix": [721, 723], "strongli": [41, 184, 258, 282, 335, 349, 589, 842, 1209, 1357], "strpo": 1378, "strptime": [281, 349, 473, 650, 842, 907, 958, 1090, 1378], "struct": [8, 75, 125, 137, 269, 287, 310, 315, 323, 349, 398, 439, 520, 580, 588, 589, 615, 617, 619, 637, 648, 649, 698, 704, 717, 718, 746, 753, 776, 777, 779, 803, 832, 842, 909, 923, 928, 941, 958, 1007, 1053, 1201, 1209, 1230, 1240, 1284, 1290, 1303, 1304, 1338, 1340, 1357], "struct_col": [736, 738, 739], "struct_seri": 941, "structarrai": [225, 349, 1114, 1357], "structfieldnotfounderror": 738, "structur": [41, 43, 44, 49, 106, 109, 123, 144, 227, 272, 284, 301, 307, 349, 634, 842, 900, 958, 1121, 1332, 1357, 1385], "student": [273, 349], "style": [7, 21, 41, 52, 150, 273, 349], "sub": [335, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 395, 396, 400, 559, 566, 842, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1004, 1005, 1009, 1180, 1187], "subarrai": [377, 378, 986, 987], "subclass": [1, 349], "subexpress": [62, 63, 129, 863, 864, 874, 901, 914, 958], "subinterv": 1374, "subject": [47, 164, 273, 349], "sublist": [385, 545, 546, 548, 550, 554, 555, 556, 557, 558, 559, 560, 569, 574, 578, 580, 994, 1149, 1166, 1167, 1169, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1190, 1195, 1199, 1201, 1357], "subplan": [62, 63, 129, 863, 864, 874, 901, 914, 958], "subsequ": [41, 160, 167, 276, 308, 349, 580, 821, 832, 874, 958, 1339, 1357, 1372], "subset": [221, 222, 269, 314, 349, 871, 872, 922, 958], "substr": [402, 405, 408, 421, 425, 688, 693, 700, 711, 712, 715, 716, 717, 718, 719, 964, 1011, 1014, 1017, 1029, 1034, 1274, 1279, 1286, 1297, 1298, 1301, 1302, 1303, 1304, 1305, 1378], "subtl": [41, 349], "subtli": [509, 842], "subtract": [538, 741, 842, 1159, 1357], "succe": [148, 149, 162], "success": [690, 697, 1276, 1283], "successfulli": [863, 874, 901, 914, 958], "suffer": 54, "suffix": [253, 254, 255, 287, 323, 328, 349, 360, 405, 419, 421, 533, 534, 535, 536, 594, 614, 616, 619, 620, 621, 647, 693, 721, 724, 748, 842, 886, 887, 888, 909, 928, 930, 934, 958, 964, 1014, 1029, 1279, 1310], "suffix_field": [615, 617], "sugar": [318, 349, 644, 645, 713, 757, 759, 761, 773, 775, 778, 788, 793, 794, 795, 805, 807, 809, 810, 812, 814, 815, 820, 823, 825, 827, 831, 833, 842, 925, 958, 1236, 1237, 1271, 1299, 1357], "suggest": [349, 352, 1357, 1362], "suitabl": [56, 64, 150, 176, 258, 349, 589, 673, 842, 1209, 1257, 1357], "sum": [41, 95, 145, 225, 232, 238, 239, 249, 273, 281, 299, 328, 349, 436, 437, 441, 492, 505, 580, 589, 600, 602, 603, 604, 605, 606, 644, 645, 650, 666, 667, 755, 757, 769, 776, 778, 779, 790, 804, 816, 826, 842, 863, 864, 869, 874, 881, 882, 899, 901, 903, 907, 911, 914, 934, 958, 964, 1050, 1051, 1110, 1114, 1251, 1357, 1366, 1373, 1375, 1378, 1385], "sum_": [681, 842, 1268, 1357], "sum_a": [281, 349, 650, 842, 907, 958], "sum_horizont": [56, 349, 825], "summari": [217, 349, 868, 958, 1054, 1357, 1373], "summer": [711, 712], "sun": [349, 352, 725, 1311], "sundai": [239, 349, 446, 458, 476, 479, 489, 767, 882, 958, 1059, 1071, 1093, 1096, 1106], "sunni": [711, 712, 1297, 1298], "supercast": [232, 349], "supertyp": [64, 145, 229, 307, 311, 349, 364, 770, 842, 877, 958, 1357], "suppli": [39, 41, 130, 132, 133, 134, 136, 150, 157, 158, 166, 230, 277, 282, 306, 349, 505, 634, 842, 878, 904, 958, 1336, 1357], "support": [1, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 62, 63, 64, 130, 131, 132, 133, 134, 135, 136, 137, 150, 151, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 175, 179, 182, 192, 202, 251, 252, 253, 254, 283, 284, 294, 295, 303, 308, 311, 349, 479, 496, 574, 630, 644, 645, 682, 684, 689, 699, 701, 702, 711, 712, 713, 715, 726, 838, 842, 848, 863, 864, 874, 886, 887, 901, 914, 915, 916, 958, 964, 1096, 1116, 1195, 1236, 1237, 1269, 1275, 1285, 1287, 1288, 1297, 1298, 1299, 1301, 1312, 1339, 1341, 1357, 1361, 1375, 1380, 1381, 1383, 1384, 1385], "supportsinterchang": 131, "suppos": [207, 273, 349, 589, 842, 1209, 1357], "sure": [64, 130, 131, 135, 145, 148, 149, 152, 154, 156, 160, 163, 276, 349, 842], "surreal_query_to_fram": 150, "surrealdb": 150, "surrealql": 150, "suscept": 958, "swap": [832, 905, 958], "swim": 771, "switch": [62, 63, 447, 863, 864, 874, 901, 914, 958, 1060], "sy": 202, "sydnei": 783, "symbol": [37, 38, 48, 349, 842, 958], "symmetr": [571, 964, 1192], "symmetri": [866, 873, 908, 927, 958], "sync": [48, 49, 50, 51, 958], "sync_on_clos": [48, 49, 50, 51, 958], "synchron": [150, 952], "synconclosemethod": [48, 49, 50, 51, 958], "syntact": [318, 349, 644, 645, 713, 757, 759, 761, 773, 775, 778, 788, 793, 794, 795, 805, 807, 809, 810, 812, 814, 815, 820, 823, 825, 827, 831, 833, 842, 925, 958, 1236, 1237, 1271, 1299, 1357], "syntax": [41, 120, 230, 258, 269, 277, 349, 604, 688, 696, 697, 700, 711, 712, 796, 797, 838, 878, 904, 914, 958, 1274, 1282, 1283, 1286, 1297, 1298, 1357, 1381, 1383], "system": [37, 148, 149, 349, 451, 863, 874, 901, 914, 958, 1064], "t": [37, 38, 40, 48, 64, 95, 143, 147, 148, 153, 159, 162, 239, 254, 258, 272, 314, 317, 349, 438, 447, 455, 473, 479, 492, 495, 497, 498, 552, 589, 630, 634, 696, 700, 711, 712, 722, 725, 728, 733, 832, 842, 882, 887, 900, 922, 958, 964, 1052, 1090, 1096, 1110, 1115, 1117, 1118, 1173, 1209, 1282, 1286, 1297, 1298, 1307, 1308, 1311, 1314, 1319, 1357, 1369, 1370, 1380], "t_": [315, 349, 496, 842, 923, 958, 1116, 1357], "t_0": [281, 349, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 842, 907, 958, 1116, 1357], "t_1": [281, 349, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 842, 907, 958, 1116, 1357], "t_a": [315, 349, 923, 958], "t_b": [315, 349, 923, 958], "t_c": [315, 349, 923, 958], "t_d": [315, 349, 923, 958], "t_i": [496, 842, 1116, 1357], "t_id": [255, 349, 888, 958], "t_n": [281, 349, 650, 654, 656, 658, 660, 662, 665, 667, 669, 842, 907, 958], "t_struct": [315, 349, 923, 958], "tab_spann": [349, 353], "tab_stub": [349, 353], "tab_styl": [349, 353], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 130, 137, 144, 152, 153, 159, 163, 164, 188, 191, 192, 194, 197, 198, 253, 255, 273, 296, 301, 308, 317, 318, 349, 353, 821, 854, 886, 888, 917, 925, 958, 1367, 1368, 1369, 1370, 1372, 1373, 1384, 1385], "table_id": 197, "table_nam": [39, 41, 153, 188, 192, 296, 349, 917, 958], "table_path": [40, 152, 163, 164, 349], "table_styl": [41, 349], "table_typ": 197, "tableinfo": [188, 191, 200], "tablemerg": [40, 349], "tablenotfounderror": [40, 349], "tables_scale_100": [139, 149], "tabletyp": [197, 200], "tail": [237, 241, 349, 364, 681, 842, 958, 1138, 1268, 1357], "take": [41, 95, 144, 153, 159, 178, 179, 202, 232, 233, 239, 262, 265, 272, 273, 278, 349, 374, 446, 458, 469, 505, 512, 513, 555, 556, 588, 615, 617, 619, 684, 765, 767, 787, 789, 798, 842, 880, 882, 897, 903, 905, 958, 983, 1059, 1071, 1086, 1130, 1131, 1176, 1177, 1348, 1357, 1375], "taken": [574, 715, 1195, 1301], "talkin": [733, 1319], "tan": [842, 1357, 1378], "tand": 1378, "tangent": [370, 371, 744, 745, 842, 979, 980, 1330, 1331, 1357, 1382], "tanh": [273, 349, 842, 1357], "target": [1, 39, 40, 41, 42, 61, 153, 311, 349, 696, 711, 712, 725, 727, 728, 832, 964, 1282, 1297, 1298, 1311, 1313, 1314, 1380], "target_alia": [40, 349], "target_t": [39, 349], "task": [63, 864, 958], "tau": [495, 496, 842, 1115, 1116, 1357], "tb": [171, 173, 225, 349, 407, 1114, 1357], "tbl": [95, 139, 149, 1387], "tbl0": 1372, "tbl1": [1370, 1372], "tbl2": [1370, 1372], "tbl3": 1370, "tbl4": 1370, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 202], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 217, 349, 868, 958], "tbl_width_char": 786, "td": 479, "td1": 964, "td2": 964, "td3": 964, "tdf": [272, 349], "technic": 838, "tell": [689, 713, 1275, 1299], "tempor": [100, 210, 239, 251, 281, 283, 284, 303, 349, 428, 479, 526, 650, 654, 656, 658, 660, 662, 665, 667, 669, 800, 842, 854, 860, 882, 907, 958, 964, 1041, 1096, 1144, 1357, 1378, 1384], "temporalliter": [428, 800, 801, 842, 1041, 1075, 1076, 1357], "temporari": [39, 349], "temporarili": [184, 202, 239, 281, 349, 650, 842, 882, 907, 958], "tenant": 34, "tenant_id": 34, "tend": [171, 173], "tensor": [311, 349, 1341, 1357], "tensordataset": [311, 349], "term": [495, 497, 498, 702, 715, 726, 842, 1115, 1117, 1118, 1288, 1301, 1312, 1357], "termin": [38, 48, 349, 958], "terminologi": 196, "test": [0, 39, 150, 151, 153, 159, 164, 224, 273, 349, 854, 1113, 1357, 1380], "test1": 1372, "test2": 1372, "test3": 1372, "test_1": [273, 349], "test_1_math": [273, 349], "test_1_phys": [273, 349], "test_2": [273, 349], "test_2_math": [273, 349], "test_2_phys": [273, 349], "test_data": 150, "test_df_height": 178, "test_func": 803, "test_lf": [930, 958], "test_miscellan": 1388, "test_numer": 1388, "test_price_calcul": 1388, "test_series_len": 182, "test_tabl": 151, "test_unique_xyz": 176, "testdb": 151, "testing1234": 1372, "text": [147, 150, 195, 423, 424, 694, 702, 706, 707, 708, 711, 712, 714, 715, 726, 822, 903, 958, 1032, 1033, 1288, 1292, 1293, 1300, 1301, 1312, 1372, 1388], "text1": 712, "text2": 712, "textclaus": 150, "texttt": [681, 842, 1268, 1357], "th": [233, 349, 513, 556, 569, 681, 702, 726, 842, 880, 958, 1131, 1177, 1190, 1268, 1288, 1312, 1357, 1380], "than": [41, 48, 49, 50, 51, 54, 103, 126, 134, 136, 148, 149, 150, 153, 159, 162, 168, 211, 238, 251, 253, 254, 258, 271, 282, 283, 285, 317, 335, 349, 423, 509, 511, 514, 516, 526, 540, 568, 587, 588, 589, 605, 637, 649, 672, 681, 702, 706, 709, 710, 718, 726, 735, 772, 804, 832, 842, 881, 886, 887, 941, 958, 1032, 1144, 1189, 1209, 1230, 1241, 1255, 1268, 1288, 1292, 1295, 1296, 1304, 1312, 1321, 1338, 1357, 1388], "the_aws_access_key_id": [40, 152, 163, 164, 349], "the_aws_region": [40, 349], "the_aws_secret_access_kei": [40, 152, 163, 164, 349], "thei": [38, 41, 48, 55, 63, 64, 96, 97, 133, 145, 162, 202, 254, 256, 284, 349, 630, 713, 721, 722, 842, 863, 874, 887, 901, 914, 958, 962, 964, 1299], "them": [63, 130, 132, 133, 134, 136, 150, 151, 153, 157, 158, 159, 160, 162, 165, 166, 167, 202, 226, 227, 239, 254, 265, 273, 281, 311, 319, 349, 386, 496, 526, 559, 622, 623, 630, 650, 770, 781, 782, 784, 785, 829, 830, 842, 864, 875, 882, 887, 897, 907, 958, 964, 995, 1116, 1121, 1180, 1218, 1219, 1357, 1375, 1385], "then1": 832, "then2": 832, "therebi": [162, 165, 166], "therefor": [54, 148, 154, 158, 160, 225, 349, 589, 842, 1114, 1357], "theta": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 70, 71, 72, 73, 78, 88, 95, 97, 104, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 196, 198, 202, 204, 206, 207, 208, 209, 212, 213, 215, 217, 218, 221, 222, 225, 227, 231, 232, 237, 238, 239, 240, 244, 246, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 261, 263, 264, 265, 266, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 294, 296, 297, 298, 301, 303, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 330, 335, 348, 349, 352, 353, 361, 364, 365, 374, 386, 392, 393, 394, 399, 401, 418, 419, 422, 428, 438, 439, 441, 446, 447, 448, 458, 460, 466, 467, 469, 473, 476, 479, 490, 494, 501, 510, 511, 518, 520, 523, 524, 526, 530, 552, 553, 559, 568, 569, 570, 571, 572, 573, 575, 580, 581, 585, 586, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 630, 637, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 675, 676, 677, 682, 683, 684, 687, 689, 696, 699, 701, 703, 704, 708, 709, 710, 713, 720, 721, 722, 723, 724, 729, 733, 735, 737, 740, 747, 748, 750, 751, 752, 753, 757, 761, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 789, 790, 792, 794, 795, 798, 799, 800, 801, 804, 807, 809, 812, 814, 820, 823, 827, 831, 832, 833, 838, 842, 854, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 878, 881, 882, 884, 886, 887, 888, 890, 892, 896, 897, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 921, 922, 924, 925, 927, 928, 929, 930, 931, 932, 933, 936, 941, 955, 956, 957, 958, 962, 963, 964, 966, 973, 974, 983, 995, 1001, 1002, 1003, 1008, 1010, 1027, 1030, 1035, 1036, 1041, 1042, 1052, 1053, 1059, 1060, 1061, 1063, 1071, 1073, 1083, 1084, 1086, 1090, 1093, 1096, 1107, 1109, 1112, 1114, 1120, 1121, 1129, 1131, 1133, 1137, 1139, 1149, 1158, 1173, 1174, 1180, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1202, 1207, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1221, 1224, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1269, 1270, 1272, 1273, 1275, 1282, 1285, 1287, 1289, 1290, 1294, 1295, 1296, 1299, 1306, 1307, 1308, 1315, 1319, 1321, 1322, 1324, 1327, 1328, 1332, 1334, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1345, 1346, 1347, 1357, 1362, 1366, 1367, 1368, 1372, 1380, 1383, 1384, 1385, 1386, 1388], "thing": [162, 169], "think": [466, 467, 1083, 1084], "third": [588, 842], "thoma": [265, 349, 897, 958], "those": [5, 31, 41, 148, 153, 230, 277, 284, 308, 318, 349, 509, 640, 696, 804, 842, 904, 925, 958, 964, 1232, 1282, 1339, 1357], "though": [39, 150, 239, 349, 838, 882, 958], "thought": 832, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 48, 63, 139, 148, 149, 151, 184, 185, 295, 349, 552, 589, 684, 765, 842, 864, 916, 958, 1003, 1173, 1196, 1270, 1357], "thread_loc": [589, 842], "thread_pool_s": 185, "three": [41, 207, 281, 310, 349, 439, 637, 650, 673, 702, 711, 726, 842, 907, 958, 1007, 1053, 1201, 1230, 1288, 1298, 1312, 1357], "threshold": [287, 349, 909, 958], "through": [150, 838, 964, 1357, 1372], "throughout": 202, "throw": [40, 132, 133, 136, 219, 278, 349, 704, 705, 860, 870, 905, 958, 1290, 1291, 1357], "thu": [41, 227, 349, 352, 772, 962, 1121, 1357], "thursdai": [239, 349, 446, 458, 767, 882, 958, 1059, 1071], "ti": [640, 842, 1232, 1357], "time": [13, 38, 40, 43, 47, 48, 49, 50, 51, 54, 61, 62, 63, 71, 73, 113, 152, 158, 160, 162, 163, 165, 166, 167, 178, 179, 182, 192, 217, 227, 239, 254, 255, 281, 319, 349, 381, 418, 419, 447, 448, 450, 451, 452, 455, 456, 466, 467, 469, 472, 473, 474, 476, 478, 479, 487, 490, 496, 547, 548, 580, 649, 650, 654, 656, 658, 660, 662, 665, 667, 669, 677, 725, 728, 732, 746, 747, 748, 770, 771, 781, 782, 783, 784, 785, 786, 792, 800, 829, 830, 842, 863, 864, 868, 882, 887, 888, 901, 907, 958, 964, 990, 1027, 1060, 1061, 1063, 1064, 1068, 1069, 1086, 1089, 1090, 1091, 1093, 1095, 1096, 1104, 1107, 1116, 1121, 1168, 1169, 1241, 1264, 1311, 1314, 1318, 1340, 1342, 1357, 1366, 1372, 1381, 1388], "time_column": [319, 349], "time_format": [38, 48, 349, 958], "time_unit": [71, 73, 448, 450, 456, 478, 490, 728, 783, 784, 785, 786, 792, 963, 964, 1061, 1063, 1069, 1095, 1107, 1314], "time_unit_m": [448, 1061], "time_unit_n": [448, 1061], "time_unit_u": 490, "time_zon": [71, 451, 453, 473, 728, 783, 784, 785, 963, 964, 1060, 1064, 1068, 1090, 1314], "timedelta": [239, 254, 281, 319, 349, 469, 474, 479, 487, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 781, 782, 784, 785, 829, 830, 842, 882, 887, 907, 958, 963, 964, 1074, 1080, 1086, 1091, 1104, 1116, 1218, 1219, 1272, 1347, 1357], "timeout": [63, 864, 958], "timestamp": [137, 152, 163, 239, 349, 473, 474, 487, 792, 882, 958, 1090, 1091, 1104, 1378], "timestamp_m": 478, "timestamp_n": 1095, "timestamp_u": [478, 1095], "timestep": 792, "timeunit": [38, 48, 71, 73, 349, 448, 450, 478, 490, 728, 783, 784, 785, 786, 958, 964, 1061, 1063, 1095, 1107, 1314], "timezon": [71, 152, 163, 453, 964, 1381], "tip": [589, 842], "titl": [41, 349, 352, 1357, 1362, 1366], "titlecas": [733, 1319], "tm": [450, 479, 964, 1381], "to_arrow": [252, 349, 1338, 1357, 1385], "to_batch": [252, 349], "to_dict": [210, 284, 349, 860, 958, 964], "to_dummi": [306, 311, 349, 1357], "to_fram": [422, 456, 474, 478, 487, 725, 963, 1053, 1230, 1256, 1258, 1303, 1304, 1311, 1357, 1362], "to_init_repr": [137, 349, 1357], "to_jax": [311, 349, 1357], "to_list": [137, 281, 349, 1274, 1286, 1357], "to_lowercas": 621, "to_numpi": [306, 311, 349, 588, 842, 1357], "to_panda": [349, 1357], "to_phys": [842, 1035, 1357], "to_python": 963, "to_seri": [57, 234, 349, 725, 766, 817, 1311, 1380], "to_sql": [39, 349], "to_str": [476, 1093], "to_struct": [349, 697], "to_torch": [306, 349, 1357], "to_uppercas": [360, 620, 698, 842], "togeth": 1380, "token": [38, 43, 47, 48, 49, 50, 51, 158, 160, 162, 164, 165, 166, 167, 187, 192, 349, 958], "tokyo": [137, 964], "tokyo_tz": 964, "toler": [171, 172, 173, 174, 254, 349, 887, 958], "tone": [41, 349], "tonight": [689, 713, 1275, 1299], "too": [15, 273, 349, 406, 630, 842, 958, 1015], "tooltip": [349, 352, 1357, 1362], "toomanyrowsreturnederror": [282, 349], "top": [41, 296, 312, 349, 352, 748, 842, 917, 921, 958, 1357, 1362, 1385], "top_col": [41, 349], "top_k": [209, 349, 418, 419, 748, 842, 858, 958, 1027, 1357], "top_k_bi": [418, 419, 747, 842], "top_row": [41, 349], "tor_id": 137, "torch": [170, 311, 349, 1341, 1357], "torchexporttyp": [311, 349], "total": [41, 225, 330, 349, 480, 481, 482, 483, 484, 485, 486, 541, 561, 842, 936, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1114, 1162, 1182, 1357], "total_gross": 1366, "toward": [330, 541, 561, 842, 936, 1162, 1182, 1357], "tp": [1, 59], "tpu": [306, 349, 1336, 1357], "tr15": [708, 1294], "trace": 74, "traceback": [171, 172, 173, 174, 307, 349, 645, 842, 1237, 1338, 1357], "tracebacktyp": 1385, "track": [152, 163, 164, 258, 349, 580, 1385], "trail": [29, 237, 349, 720, 721, 1306, 1307], "train": [311, 349], "train_lf": [930, 958], "transfer": 151, "transferencod": [403, 404, 691, 692, 1012, 1013, 1277, 1278], "transform": [258, 296, 349, 588, 733, 821, 842, 917, 958, 1319], "transform_dens": [1357, 1362], "transit": [230, 277, 349, 878, 904, 958], "translat": 150, "transpar": [863, 874, 901, 914, 958], "transpos": [273, 349], "travel": [152, 163], "travers": [653, 655, 657, 659, 661, 664, 666, 668, 842, 1244, 1245, 1247, 1250, 1251, 1252, 1357], "treat": [148, 149, 162, 204, 496, 530, 688, 690, 700, 711, 712, 832, 842, 966, 1116, 1149, 1274, 1276, 1286, 1297, 1298, 1357], "tree": [605, 874, 958], "tree_format": [874, 958], "trend": [41, 349], "tri": [258, 349], "triangl": [335, 941], "trigger": [40, 145, 256, 308, 349, 842, 1339, 1357], "trigonometri": [1378, 1384], "trim": [137, 1380], "trim_decimal_zero": 29, "trip": 150, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 54, 62, 63, 64, 95, 129, 130, 131, 132, 133, 135, 136, 137, 139, 144, 145, 148, 149, 150, 152, 153, 154, 156, 159, 160, 162, 163, 165, 167, 168, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 187, 202, 206, 210, 211, 212, 217, 219, 224, 229, 230, 232, 234, 236, 237, 238, 239, 244, 246, 247, 248, 251, 253, 254, 255, 256, 261, 262, 268, 269, 271, 273, 274, 277, 278, 282, 283, 284, 285, 287, 295, 296, 299, 302, 304, 306, 307, 308, 311, 313, 314, 315, 317, 318, 319, 323, 329, 331, 333, 336, 337, 338, 339, 340, 341, 342, 349, 352, 359, 360, 361, 362, 363, 364, 375, 377, 378, 381, 385, 386, 394, 398, 402, 403, 405, 408, 409, 414, 417, 419, 420, 421, 425, 433, 434, 435, 436, 437, 439, 446, 448, 451, 454, 456, 458, 459, 466, 467, 469, 470, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 497, 498, 505, 512, 514, 515, 516, 517, 520, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 548, 555, 557, 559, 575, 580, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 624, 625, 627, 629, 632, 633, 637, 642, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 676, 677, 681, 683, 684, 687, 688, 689, 690, 691, 693, 699, 700, 701, 703, 704, 705, 711, 712, 716, 717, 719, 725, 727, 728, 730, 732, 736, 738, 739, 748, 750, 753, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 772, 774, 781, 784, 790, 796, 800, 801, 808, 814, 817, 820, 821, 824, 826, 829, 832, 833, 842, 860, 861, 862, 863, 864, 868, 870, 874, 877, 878, 881, 882, 886, 887, 888, 890, 892, 896, 901, 904, 905, 909, 914, 916, 917, 922, 923, 924, 925, 928, 933, 935, 937, 939, 942, 943, 944, 945, 946, 947, 948, 957, 958, 963, 964, 971, 972, 984, 986, 987, 990, 994, 995, 1003, 1011, 1012, 1014, 1017, 1028, 1029, 1031, 1034, 1036, 1039, 1040, 1053, 1059, 1060, 1061, 1064, 1067, 1068, 1069, 1070, 1071, 1072, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1110, 1112, 1113, 1115, 1117, 1118, 1125, 1135, 1139, 1141, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1164, 1165, 1169, 1176, 1178, 1180, 1196, 1209, 1215, 1221, 1223, 1226, 1227, 1230, 1233, 1234, 1242, 1249, 1268, 1270, 1273, 1274, 1275, 1276, 1277, 1279, 1285, 1286, 1287, 1289, 1290, 1291, 1297, 1298, 1302, 1303, 1305, 1311, 1313, 1314, 1316, 1318, 1333, 1338, 1339, 1346, 1348, 1357, 1362, 1366, 1367, 1369, 1371, 1375, 1377, 1380, 1385, 1388], "truediv": [509, 842], "truncat": [21, 137, 148, 149, 162, 237, 239, 251, 283, 284, 303, 349, 882, 901, 958, 1384], "truncate_nod": [901, 958], "truncate_ragged_lin": [148, 149, 162], "truncate_str": 487, "truncate_td": 487, "trust": [441, 842, 869, 958], "try": [38, 43, 47, 48, 49, 50, 51, 62, 63, 123, 129, 148, 149, 154, 158, 160, 162, 165, 166, 167, 192, 349, 832, 863, 864, 874, 901, 914, 958], "try_cast": 1378, "try_parse_d": [139, 148, 149, 162], "try_parse_hive_d": [160, 165, 167], "ts_local": [473, 1090], "tseri": [466, 467, 1083, 1084], "tstamp": 964, "tstamp_tokyo": 964, "tstamp_utc": 964, "tue": [349, 352], "tuesdai": [239, 349, 882, 958], "tupl": [41, 65, 151, 153, 159, 207, 251, 258, 271, 282, 283, 284, 291, 311, 327, 349, 604, 646, 842, 901, 914, 958, 963, 964, 1238, 1260, 1357], "turn": [8, 48, 49, 50, 51, 62, 63, 129, 148, 149, 162, 253, 254, 349, 863, 864, 874, 886, 887, 892, 901, 958], "twice": [41, 349], "two": [41, 55, 96, 97, 132, 134, 136, 151, 207, 230, 232, 254, 255, 264, 265, 277, 283, 310, 316, 329, 335, 349, 353, 359, 443, 450, 509, 512, 515, 580, 637, 683, 763, 764, 770, 772, 774, 781, 784, 818, 819, 821, 842, 878, 887, 888, 896, 897, 904, 924, 935, 941, 958, 964, 1007, 1056, 1063, 1201, 1230, 1357, 1372, 1373, 1374, 1377, 1386], "two_a": 1385, "tworld": [722, 1306, 1308], "txt": [1, 13, 162, 688, 700, 1286, 1380], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 48, 49, 50, 51, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 129, 130, 132, 133, 134, 135, 136, 138, 148, 149, 150, 152, 153, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 204, 207, 213, 223, 226, 232, 237, 239, 240, 252, 253, 258, 281, 286, 289, 301, 306, 307, 310, 311, 314, 326, 349, 361, 363, 366, 367, 368, 369, 370, 371, 374, 379, 380, 381, 383, 386, 397, 398, 402, 403, 404, 405, 406, 407, 408, 420, 422, 423, 424, 428, 429, 430, 431, 432, 439, 440, 446, 447, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 496, 499, 501, 512, 515, 518, 526, 527, 528, 529, 530, 531, 532, 541, 545, 546, 548, 553, 559, 561, 579, 580, 588, 589, 603, 637, 639, 643, 644, 645, 646, 648, 649, 650, 654, 656, 658, 660, 662, 665, 667, 669, 678, 679, 680, 687, 690, 691, 692, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 715, 716, 717, 718, 725, 726, 730, 744, 745, 746, 753, 762, 770, 773, 780, 781, 782, 783, 784, 785, 786, 788, 796, 797, 799, 800, 801, 802, 803, 804, 814, 817, 828, 829, 830, 833, 838, 842, 854, 863, 864, 873, 874, 875, 882, 886, 901, 907, 908, 914, 922, 932, 958, 963, 966, 971, 972, 984, 986, 987, 988, 989, 990, 992, 994, 995, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1016, 1028, 1030, 1032, 1033, 1041, 1053, 1054, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1113, 1116, 1120, 1137, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1164, 1165, 1166, 1167, 1169, 1174, 1180, 1182, 1200, 1201, 1223, 1230, 1236, 1237, 1238, 1240, 1241, 1263, 1265, 1273, 1274, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1291, 1292, 1293, 1301, 1302, 1303, 1304, 1311, 1312, 1316, 1337, 1338, 1340, 1348, 1357, 1366, 1373, 1378, 1380, 1384, 1385], "type_coercion": [48, 49, 50, 51, 62, 63, 129, 863, 864, 874, 901, 914, 958], "type_json": 194, "type_nam": 194, "type_text": 194, "typeerror": [40, 349], "typenam": [41, 349], "typic": [133, 150, 167, 258, 349, 455, 678, 842, 964, 1068, 1209, 1265, 1357], "tz": [728, 1314], "tzinfo": [71, 152, 163, 964], "u": [41, 71, 73, 167, 180, 254, 349, 448, 450, 456, 478, 490, 725, 728, 758, 760, 783, 784, 785, 786, 792, 887, 958, 963, 964, 1061, 1063, 1069, 1095, 1107, 1311, 1314, 1370, 1381], "u1": [307, 349], "u16": [162, 1383, 1388], "u32": [13, 150, 208, 210, 216, 270, 325, 326, 330, 334, 340, 342, 349, 359, 365, 372, 373, 374, 375, 376, 379, 380, 382, 391, 407, 423, 424, 432, 433, 520, 522, 541, 545, 546, 549, 561, 566, 612, 628, 640, 648, 649, 654, 656, 658, 660, 662, 665, 667, 669, 673, 690, 700, 701, 706, 707, 708, 746, 751, 753, 757, 761, 765, 766, 773, 775, 796, 799, 812, 842, 857, 860, 867, 899, 931, 932, 936, 940, 946, 948, 958, 964, 983, 984, 985, 988, 989, 991, 1000, 1028, 1032, 1033, 1035, 1047, 1139, 1166, 1167, 1170, 1182, 1187, 1232, 1240, 1241, 1257, 1276, 1286, 1287, 1292, 1293, 1340, 1344, 1346, 1357, 1366, 1374, 1375, 1376, 1380, 1385], "u64": [240, 326, 349, 518, 642, 842, 901, 932, 958, 964, 1137, 1234, 1357], "u8": [210, 304, 305, 317, 349, 645, 756, 842, 860, 958, 964, 1237, 1333, 1357, 1388], "udf": [184, 258, 272, 335, 349, 441, 589, 634, 804, 842, 869, 900, 941, 958, 1209, 1357], "ufunc": 103, "uid": 150, "uint": 1388, "uint16": [162, 436, 437, 742, 842, 964, 1050, 1051, 1328, 1338, 1341, 1357], "uint2": 1383, "uint32": [138, 170, 210, 225, 281, 326, 349, 374, 379, 380, 407, 423, 424, 432, 496, 512, 515, 541, 545, 546, 561, 643, 648, 649, 650, 654, 656, 658, 660, 662, 665, 667, 669, 690, 701, 706, 707, 746, 773, 796, 799, 842, 860, 907, 932, 958, 964, 984, 988, 989, 1016, 1028, 1032, 1033, 1114, 1116, 1166, 1167, 1182, 1240, 1241, 1276, 1287, 1292, 1293, 1340, 1341, 1357], "uint4": 1385, "uint64": [138, 240, 281, 326, 349, 379, 380, 496, 518, 545, 546, 642, 650, 654, 656, 658, 660, 662, 665, 667, 669, 842, 907, 932, 958, 964, 988, 989, 1116, 1137, 1166, 1167, 1234, 1341, 1357], "uint8": [150, 210, 305, 306, 307, 317, 349, 436, 437, 645, 742, 756, 842, 860, 958, 963, 964, 1050, 1051, 1237, 1328, 1341, 1357, 1388], "uint8_pair": 1388, "uit": [715, 1301], "uk": [697, 1283], "unabl": [105, 153], "unalias": 595, "unari": [626, 842], "unbias": [497, 498, 842, 1117, 1118, 1357], "unchang": [225, 349, 644, 746, 842, 892, 941, 958, 1114, 1236, 1340, 1357], "uncompress": [36, 43, 44, 47, 49, 51, 154, 165, 349, 958], "undefin": [749, 842], "under": [38, 43, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 96, 97, 158, 160, 162, 165, 166, 167, 190, 191, 192, 273, 296, 349, 834, 835, 837, 838, 843, 844, 847, 849, 850, 851, 917, 958, 1349, 1351, 1353, 1358, 1363, 1364, 1365], "underestim": [225, 349, 1114, 1357], "underli": [1, 55, 70, 71, 73, 88, 97, 102, 112, 130, 132, 133, 134, 136, 150, 151, 153, 157, 158, 159, 160, 166, 175, 178, 182, 226, 227, 251, 252, 283, 301, 307, 349, 403, 448, 449, 450, 454, 457, 459, 460, 461, 462, 463, 464, 465, 468, 470, 471, 473, 475, 479, 488, 489, 490, 491, 642, 670, 688, 691, 700, 842, 875, 958, 964, 1012, 1035, 1061, 1062, 1063, 1067, 1070, 1072, 1073, 1077, 1078, 1079, 1081, 1082, 1085, 1087, 1088, 1090, 1092, 1096, 1105, 1106, 1107, 1108, 1121, 1234, 1253, 1263, 1274, 1277, 1286, 1332, 1338, 1357, 1385], "understood": 804, "undo": [606, 613, 614, 616, 618, 620, 621], "unexpect": [112, 121, 150, 230, 277, 349, 588, 589, 842, 878, 904, 958, 1209, 1357], "unhelpfulli": [171, 173], "unicod": [21, 424, 702, 707, 708, 715, 726, 964, 1033, 1288, 1293, 1294, 1301, 1312, 1380], "unicodeform": [708, 1294], "unifi": [41, 306, 311, 349, 964], "uniform": [41, 349, 520, 637, 842, 1139, 1230, 1357], "unimod": [681, 842, 1268, 1357], "union": [62, 63, 64, 129, 572, 863, 864, 874, 901, 914, 958, 964, 1193, 1384, 1385], "uniqu": [47, 51, 56, 74, 145, 153, 175, 176, 177, 180, 182, 208, 248, 253, 269, 273, 284, 340, 349, 365, 376, 391, 439, 537, 566, 612, 637, 725, 727, 728, 732, 751, 753, 761, 812, 842, 857, 886, 946, 958, 974, 985, 1000, 1053, 1157, 1187, 1216, 1230, 1311, 1313, 1314, 1318, 1344, 1346, 1357, 1373, 1375], "unique_column_valu": [273, 349], "unique_count": [842, 1357], "uniquekeepstrategi": [314, 349, 922, 958], "unit": [41, 71, 73, 145, 171, 172, 173, 174, 178, 182, 225, 349, 407, 448, 450, 456, 472, 478, 490, 496, 502, 586, 601, 725, 728, 752, 769, 783, 784, 785, 786, 792, 842, 901, 958, 964, 1016, 1061, 1063, 1069, 1089, 1095, 1107, 1114, 1116, 1122, 1207, 1311, 1314, 1345, 1357, 1388], "uniti": [187, 188, 190, 191, 192, 200, 854], "unity_catalog": 195, "univers": [204, 966], "unix": [70, 71, 456, 792, 1069], "unknown": [580, 696, 802, 1282], "unless": [41, 56, 132, 253, 306, 311, 349, 720, 721, 817, 886, 958, 1306, 1380], "unlik": [144, 239, 318, 349, 882, 925, 958], "unnam": [698, 1284], "unnest": [144, 349, 439, 637, 648, 697, 698, 717, 718, 738, 740, 753, 832, 842, 958, 1007, 1053, 1201, 1230, 1240, 1303, 1304, 1357, 1378, 1384], "unpivot": [264, 349, 896, 958], "unregist": [1368, 1369, 1370, 1385, 1387], "unsaf": [145, 842], "unset": [39, 160, 165, 177, 334, 349, 411, 412, 413, 415, 416, 473, 580, 842, 940, 1020, 1021, 1022, 1024, 1025, 1090, 1357, 1366], "unsign": [89, 90, 91, 92, 642, 842, 964, 1234, 1357], "unsigned_integ": 964, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72, 78, 127, 140, 141, 142, 143, 144, 150, 152, 158, 160, 162, 163, 164, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 296, 306, 311, 318, 349, 352, 353, 438, 439, 446, 458, 520, 589, 637, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 767, 769, 842, 863, 864, 874, 901, 914, 917, 925, 958, 1036, 1052, 1053, 1059, 1071, 1139, 1230, 1242, 1243, 1246, 1248, 1249, 1336, 1341, 1357, 1362], "unstack": 349, "unstackdirect": [317, 349], "unsuit": 128, "unsupport": [40, 349], "until": [48, 49, 50, 51, 95, 96, 239, 256, 349, 709, 710, 735, 882, 958, 1295, 1296, 1321], "up": [11, 41, 87, 151, 251, 254, 273, 283, 284, 290, 303, 349, 427, 428, 589, 702, 711, 712, 726, 842, 886, 887, 892, 912, 958, 964, 1038, 1288, 1297, 1298, 1312, 1357], "upcast": [364, 842], "upcast_integer_typ": [1, 59], "updat": [40, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 202, 217, 349, 868, 958], "updated_at": [193, 196, 197], "updated_bi": [193, 196, 197], "upgrad": 108, "upheld": [892, 958], "upon": 149, "upper": [148, 149, 150, 225, 239, 349, 428, 520, 526, 580, 615, 752, 762, 781, 782, 784, 785, 800, 801, 829, 830, 842, 882, 958, 1041, 1114, 1139, 1144, 1207, 1345, 1357, 1375, 1378], "upper_bound": [239, 349, 428, 526, 580, 842, 882, 958, 1041, 1144, 1207, 1357], "uppercas": [621, 734, 1320, 1380], "upsampl": [239, 349, 882, 958], "urandom": [407, 1016], "uri": [39, 40, 150, 151, 152, 163, 164, 349], "url": [150, 151, 160, 165, 167, 187, 696, 698, 1282, 1284], "urllib": 151, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 62, 63, 64, 65, 71, 87, 96, 97, 100, 104, 127, 131, 133, 134, 136, 138, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 187, 208, 209, 210, 213, 217, 219, 221, 222, 228, 229, 230, 232, 238, 239, 246, 248, 250, 251, 252, 254, 258, 264, 268, 269, 271, 272, 273, 277, 281, 282, 283, 284, 285, 287, 288, 290, 295, 296, 297, 301, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 324, 325, 326, 328, 335, 349, 352, 359, 361, 363, 365, 374, 375, 398, 403, 404, 406, 419, 421, 423, 424, 425, 428, 438, 441, 444, 445, 453, 472, 473, 474, 476, 479, 487, 490, 492, 495, 496, 497, 498, 499, 503, 504, 505, 509, 524, 525, 526, 538, 552, 568, 576, 580, 582, 588, 589, 592, 613, 616, 618, 620, 621, 630, 637, 640, 642, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 672, 674, 676, 677, 681, 683, 684, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 699, 700, 701, 704, 705, 706, 707, 708, 711, 712, 713, 715, 717, 719, 721, 722, 723, 724, 725, 727, 728, 732, 735, 736, 740, 748, 754, 755, 757, 758, 759, 760, 761, 764, 765, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 790, 792, 796, 797, 799, 800, 802, 804, 805, 806, 808, 810, 811, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 829, 830, 831, 832, 833, 838, 841, 842, 853, 854, 857, 858, 859, 860, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 881, 882, 887, 890, 896, 901, 904, 907, 908, 909, 910, 912, 914, 916, 917, 918, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 941, 958, 962, 963, 964, 971, 972, 974, 1003, 1007, 1012, 1013, 1015, 1032, 1033, 1036, 1052, 1054, 1057, 1058, 1066, 1075, 1076, 1089, 1090, 1091, 1093, 1096, 1104, 1107, 1110, 1115, 1116, 1117, 1118, 1123, 1124, 1130, 1136, 1143, 1144, 1159, 1173, 1189, 1196, 1201, 1209, 1230, 1232, 1234, 1236, 1238, 1240, 1241, 1242, 1243, 1255, 1256, 1258, 1259, 1262, 1268, 1270, 1272, 1273, 1274, 1275, 1277, 1278, 1281, 1282, 1283, 1285, 1286, 1287, 1292, 1293, 1294, 1297, 1298, 1299, 1301, 1303, 1311, 1313, 1314, 1318, 1321, 1332, 1333, 1335, 1338, 1339, 1347, 1357, 1366, 1367, 1368, 1369, 1370, 1372, 1373, 1380, 1381, 1385, 1387, 1388], "usag": [178, 182, 293, 349, 832, 964, 1263, 1357], "usd": [237, 349, 1388], "use_abs_path": 145, "use_pyarrow": [47, 51, 148, 152, 154, 156, 160, 163, 307, 349, 958, 1338, 1357], "use_pyarrow_extension_arrai": [308, 349, 1339, 1357], "use_pyarrow_write_to_dataset": [47, 349], "use_statist": [160, 167], "user": [39, 143, 145, 150, 151, 204, 258, 272, 335, 349, 588, 589, 634, 674, 790, 804, 842, 900, 941, 958, 962, 966, 1209, 1259, 1357], "user_conn": 150, "usernam": [148, 151, 154, 156], "userwarn": 1, "usr": 150, "usual": [104, 151, 202, 311, 349, 447, 1060], "utc": [152, 163, 447, 451, 453, 455, 473, 725, 728, 963, 964, 1060, 1064, 1068, 1090, 1311, 1314], "utc_tz": 964, "utf": [38, 48, 86, 349, 958], "utf8": [21, 148, 149, 162, 702, 715, 726, 1288, 1301, 1312], "utf8_borders_onli": 21, "utf8_ful": [21, 56, 137], "utf8_full_condens": [7, 21, 137], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [311, 349, 792, 958], "uvloop": 150, "uvw": [697, 1283], "v": [8, 9, 10, 47, 225, 349, 673, 758, 760, 842, 1257, 1357, 1369, 1370], "v1": 33, "v2": [8, 10, 154, 165], "val": [41, 280, 349, 589, 634, 746, 832, 842, 906, 958], "valid": [38, 41, 48, 71, 95, 143, 148, 150, 154, 156, 160, 162, 182, 202, 219, 225, 253, 254, 278, 349, 438, 688, 690, 696, 697, 698, 700, 705, 711, 712, 832, 842, 870, 886, 887, 905, 933, 958, 964, 1052, 1114, 1274, 1276, 1282, 1283, 1284, 1286, 1291, 1297, 1298, 1357, 1366, 1367], "validate_output_schema": [892, 958], "validate_schema": [95, 143], "vals_phys": [746, 842], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 48, 51, 52, 54, 55, 56, 64, 65, 68, 74, 75, 83, 84, 93, 97, 106, 132, 133, 135, 136, 141, 148, 149, 150, 151, 160, 162, 165, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 202, 206, 208, 209, 210, 217, 221, 222, 224, 227, 228, 229, 230, 234, 237, 239, 240, 241, 245, 249, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 271, 273, 274, 275, 277, 278, 281, 282, 283, 284, 285, 292, 295, 297, 298, 299, 300, 302, 303, 307, 308, 312, 313, 316, 317, 318, 319, 320, 327, 330, 331, 333, 336, 337, 339, 340, 349, 352, 353, 357, 358, 359, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 408, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 437, 438, 439, 442, 444, 445, 450, 454, 465, 470, 479, 488, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 543, 544, 545, 546, 549, 550, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 573, 575, 576, 577, 578, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 597, 608, 609, 610, 611, 612, 622, 623, 624, 625, 628, 630, 631, 634, 635, 637, 638, 640, 643, 644, 645, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 678, 679, 680, 681, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 726, 735, 737, 741, 742, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 765, 768, 770, 771, 773, 775, 776, 777, 778, 779, 789, 790, 795, 796, 797, 798, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 816, 817, 818, 819, 825, 826, 832, 842, 857, 858, 868, 871, 872, 876, 877, 878, 882, 884, 885, 886, 887, 893, 894, 895, 896, 898, 899, 902, 903, 904, 905, 907, 913, 916, 918, 919, 921, 924, 925, 926, 936, 937, 939, 942, 943, 945, 946, 958, 964, 969, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1028, 1029, 1032, 1033, 1034, 1038, 1041, 1043, 1044, 1045, 1047, 1052, 1053, 1054, 1055, 1057, 1058, 1063, 1067, 1082, 1087, 1096, 1105, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1122, 1123, 1124, 1128, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1162, 1163, 1164, 1165, 1166, 1167, 1170, 1171, 1172, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1194, 1196, 1197, 1198, 1199, 1202, 1203, 1209, 1210, 1211, 1213, 1214, 1216, 1218, 1219, 1221, 1222, 1224, 1225, 1229, 1230, 1231, 1232, 1236, 1237, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1261, 1265, 1266, 1267, 1268, 1270, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1312, 1321, 1324, 1328, 1329, 1330, 1331, 1338, 1339, 1340, 1344, 1346, 1348, 1357, 1366, 1371, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1383, 1385, 1387, 1388], "value1": [684, 842], "value2": [684, 842], "value_a": 1385, "value_b": 1385, "value_count": [751, 842, 1357], "value_cum_sum": [437, 842], "value_cum_sum_all_fil": [437, 842], "value_nam": [264, 316, 349, 896, 924, 958], "value_var": [264, 316, 349, 896, 924, 958], "valueerror": [10, 16, 21], "valueexcept": 802, "var": [41, 183, 349, 668, 669, 842, 958, 1357, 1374], "var_samp": 1374, "vari": [153, 159, 447, 1060, 1388], "variabl": [31, 38, 43, 47, 48, 49, 50, 51, 62, 63, 83, 158, 160, 162, 165, 166, 167, 181, 184, 192, 264, 304, 316, 349, 863, 864, 874, 896, 901, 914, 924, 958, 1333, 1357, 1367, 1369, 1385], "variable_nam": [264, 316, 349, 896, 924, 958], "variad": 150, "varianc": [320, 349, 498, 538, 668, 669, 754, 831, 842, 926, 958, 1118, 1159, 1252, 1347, 1357, 1378], "variou": [150, 207, 213, 349, 842, 865, 958, 963, 964, 1357], "vector": [653, 655, 657, 659, 661, 664, 666, 668, 842, 1244, 1245, 1247, 1250, 1251, 1252, 1357], "vector_index_format": 195, "vectoris": [466, 467, 1083, 1084], "vein": 202, "verbos": [30, 171, 173, 202, 697, 1283], "veri": [150, 251, 313, 349, 589, 842, 941, 1379], "verifi": [254, 349, 887, 958], "versicolor": [349, 352], "version": [39, 40, 54, 61, 65, 131, 148, 149, 152, 153, 163, 170, 175, 176, 177, 178, 182, 185, 192, 206, 208, 218, 240, 253, 264, 289, 296, 306, 307, 311, 325, 330, 349, 352, 441, 453, 466, 467, 479, 490, 511, 518, 596, 597, 603, 607, 644, 687, 695, 740, 755, 764, 772, 816, 821, 842, 857, 869, 874, 886, 896, 903, 911, 917, 930, 931, 936, 958, 964, 1066, 1075, 1076, 1083, 1084, 1096, 1107, 1136, 1137, 1236, 1273, 1281, 1336, 1338, 1341, 1357, 1362], "versu": [217, 349, 868, 958], "vertic": [64, 227, 317, 321, 349, 687, 703, 1273, 1289], "vertical_relax": 64, "via": [31, 148, 149, 150, 154, 158, 160, 162, 165, 166, 167, 205, 207, 218, 251, 283, 349, 441, 589, 698, 842, 869, 903, 958, 967, 1284], "view": [199, 589, 842], "virtual": 145, "visibl": [18, 225, 349, 1114, 1357], "visit": [438, 842, 1052, 1357], "visual": [246, 248, 349, 604, 914, 958], "volk": 144, "vote": [696, 698, 1282, 1284], "vowel": [711, 712, 1297, 1298], "vstack": [64, 227, 349], "w": [41, 150, 239, 284, 349, 690, 694, 696, 698, 758, 760, 882, 958, 964, 1276, 1280, 1282, 1284, 1307, 1369, 1370, 1373], "w_i": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "wa": [39, 61, 104, 153, 218, 306, 307, 349, 352, 441, 645, 713, 786, 842, 869, 958, 964, 1237, 1299, 1338, 1357, 1362, 1380], "wai": [96, 97, 130, 132, 133, 134, 136, 157, 158, 166, 238, 252, 272, 295, 328, 349, 474, 634, 684, 696, 773, 832, 838, 842, 866, 873, 881, 900, 908, 916, 927, 934, 941, 958, 962, 1091, 1282], "wait": [48, 49, 50, 51, 958], "walk": 771, "want": [63, 133, 135, 148, 153, 154, 158, 160, 162, 202, 227, 258, 269, 281, 296, 349, 423, 446, 458, 505, 588, 589, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 677, 689, 706, 711, 712, 713, 767, 776, 781, 784, 790, 814, 817, 833, 842, 864, 917, 933, 958, 964, 1032, 1059, 1071, 1121, 1209, 1275, 1292, 1297, 1298, 1299, 1357, 1372], "warehous": 151, "warn": [99, 100, 103, 104, 107, 114, 116, 117, 127, 164, 630, 800, 801, 842, 1357], "watermark": [47, 349], "wb": [41, 349], "we": [47, 146, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 207, 217, 218, 239, 254, 273, 281, 319, 349, 352, 441, 469, 474, 487, 520, 552, 580, 588, 589, 650, 654, 656, 658, 660, 662, 665, 667, 669, 698, 711, 712, 730, 780, 781, 782, 783, 784, 785, 802, 829, 830, 832, 842, 868, 869, 878, 882, 887, 892, 904, 907, 958, 1086, 1091, 1104, 1139, 1173, 1209, 1284, 1298, 1316, 1357, 1362, 1369], "weather": [711, 712, 1297, 1298], "wed": [349, 352], "wednesdai": [239, 349, 476, 479, 882, 958, 1093, 1096], "week": [239, 254, 281, 319, 349, 446, 458, 469, 474, 487, 489, 496, 650, 654, 656, 658, 660, 662, 665, 667, 669, 767, 781, 782, 784, 785, 786, 829, 830, 842, 882, 887, 907, 958, 964, 1059, 1071, 1086, 1091, 1104, 1106, 1116, 1357, 1381], "week_mask": [446, 458, 767, 1059, 1071], "weekdai": [454, 470], "weekend": [446, 458, 767, 1059, 1071], "weekli": [239, 349, 487, 882, 958, 1104], "weghorst": [698, 1284], "weight": [144, 495, 496, 497, 498, 652, 653, 655, 657, 659, 661, 664, 666, 668, 681, 842, 1115, 1116, 1117, 1118, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1268, 1357], "wei\u00df": 1380, "well": [41, 148, 149, 150, 162, 349, 526, 821, 842, 1144, 1357, 1385], "were": [202, 644, 645, 838, 842, 1236, 1237, 1357], "west": [74, 255, 349, 888, 958], "what": [52, 207, 269, 349, 446, 588, 689, 713, 842, 1059, 1275, 1299], "whatev": 202, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 55, 71, 87, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 143, 144, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 178, 182, 202, 209, 217, 223, 225, 227, 229, 230, 232, 239, 253, 255, 258, 265, 272, 278, 282, 284, 287, 288, 292, 295, 301, 304, 306, 307, 311, 312, 314, 318, 324, 349, 393, 406, 423, 424, 428, 446, 458, 495, 497, 498, 504, 573, 580, 601, 634, 644, 645, 675, 683, 684, 689, 695, 699, 701, 702, 706, 707, 713, 715, 720, 721, 722, 725, 726, 765, 767, 776, 790, 800, 842, 858, 868, 877, 882, 886, 888, 892, 897, 905, 909, 910, 913, 916, 921, 922, 925, 929, 955, 958, 1002, 1015, 1032, 1033, 1041, 1054, 1059, 1071, 1114, 1115, 1117, 1118, 1121, 1124, 1149, 1194, 1236, 1237, 1256, 1258, 1261, 1275, 1281, 1285, 1287, 1288, 1292, 1293, 1299, 1301, 1306, 1307, 1308, 1311, 1312, 1332, 1333, 1338, 1357, 1372, 1385], "when1": 832, "when2": 832, "when_matched_update_al": [40, 349], "when_not_matched_insert_al": [40, 349], "where": [41, 54, 56, 104, 150, 151, 153, 221, 222, 227, 230, 239, 251, 255, 264, 273, 277, 283, 296, 297, 306, 311, 316, 318, 320, 349, 375, 479, 489, 492, 494, 496, 505, 576, 582, 588, 625, 643, 673, 681, 684, 686, 713, 733, 754, 766, 772, 774, 818, 819, 821, 823, 831, 832, 842, 871, 872, 878, 882, 888, 896, 904, 917, 918, 924, 925, 926, 958, 984, 1096, 1106, 1110, 1112, 1116, 1121, 1125, 1221, 1257, 1268, 1272, 1299, 1319, 1347, 1348, 1357, 1366, 1374, 1384, 1385, 1387], "wherea": [148, 162, 281, 349, 421, 425, 474, 487, 622, 623, 650, 842, 907, 958, 1091, 1104, 1218, 1219, 1357], "wherev": [41, 258, 335, 349, 589, 842, 1209, 1357], "whether": [38, 48, 52, 54, 95, 134, 136, 143, 144, 153, 159, 160, 165, 167, 182, 186, 224, 250, 254, 290, 295, 349, 361, 363, 377, 378, 458, 459, 475, 517, 543, 544, 630, 674, 684, 699, 701, 765, 790, 842, 887, 892, 903, 912, 916, 958, 964, 971, 972, 986, 987, 1031, 1036, 1071, 1072, 1092, 1113, 1135, 1136, 1164, 1165, 1285, 1287, 1357, 1369, 1385], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 133, 135, 148, 149, 150, 151, 152, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167, 178, 181, 183, 202, 209, 210, 217, 218, 221, 222, 225, 227, 228, 238, 239, 244, 253, 254, 273, 281, 289, 306, 307, 312, 314, 318, 319, 349, 361, 398, 406, 441, 446, 458, 469, 474, 476, 487, 496, 502, 526, 528, 531, 533, 534, 535, 536, 580, 588, 589, 601, 603, 650, 654, 656, 658, 660, 662, 665, 667, 669, 712, 730, 767, 781, 782, 784, 785, 786, 800, 801, 829, 830, 832, 842, 858, 860, 863, 866, 868, 869, 871, 872, 873, 874, 882, 886, 887, 901, 903, 907, 911, 914, 921, 922, 925, 927, 958, 964, 1007, 1015, 1059, 1071, 1086, 1091, 1093, 1104, 1114, 1116, 1121, 1122, 1144, 1147, 1150, 1152, 1153, 1154, 1155, 1201, 1258, 1316, 1336, 1338, 1357, 1367, 1373, 1385, 1388], "while": [40, 63, 149, 152, 153, 163, 167, 178, 182, 192, 202, 251, 264, 313, 316, 318, 349, 424, 644, 707, 842, 864, 896, 924, 925, 958, 1033, 1236, 1293, 1357], "white": [41, 349], "whitespac": [137, 720, 721, 722, 1306, 1307, 1308, 1380], "whole": [588, 683, 684, 696, 842, 941, 958, 1282], "whose": [56, 98, 254, 273, 349, 499, 788, 842, 887, 958, 964], "why": [863, 874, 901, 914, 958], "wide": [150, 237, 264, 273, 316, 317, 349, 896, 924, 958], "width": [27, 41, 65, 148, 149, 162, 349, 352, 579, 769, 958, 1200, 1357, 1362], "wiki": 21, "wikipedia": 21, "wildcard": [145, 499, 736, 776, 777, 790, 816, 838, 842], "win_loss": [41, 349], "window": [148, 149, 162, 239, 281, 349, 438, 495, 497, 498, 589, 630, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 770, 818, 819, 842, 882, 907, 958, 1052, 1115, 1117, 1118, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357], "window_s": [651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 818, 819, 842, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1357], "windowmappingstrategi": [630, 842], "winter": [699, 701, 711, 712, 1285, 1287], "wise": [41, 56, 150, 232, 349, 366, 367, 368, 369, 370, 371, 429, 430, 431, 500, 584, 678, 679, 680, 744, 745, 790, 816, 842, 975, 976, 977, 978, 979, 980, 1043, 1044, 1045, 1119, 1205, 1206, 1265, 1266, 1267, 1330, 1331, 1357], "wish": [209, 312, 349, 418, 419, 747, 748, 842, 858, 921, 958, 1027, 1342, 1357], "with_column": [1, 13, 59, 62, 63, 129, 143, 239, 272, 281, 311, 317, 324, 349, 358, 360, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 391, 392, 393, 394, 398, 403, 404, 406, 407, 420, 421, 423, 424, 425, 428, 433, 434, 435, 436, 437, 439, 442, 446, 447, 449, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 488, 489, 491, 493, 494, 496, 503, 504, 509, 514, 516, 518, 524, 525, 526, 529, 530, 532, 533, 534, 535, 536, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 587, 588, 589, 609, 611, 613, 614, 616, 618, 620, 621, 624, 625, 626, 630, 631, 634, 635, 637, 640, 644, 645, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 675, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 730, 731, 733, 734, 735, 737, 740, 741, 746, 749, 756, 758, 760, 763, 767, 768, 769, 770, 771, 776, 777, 779, 780, 782, 783, 787, 797, 800, 801, 803, 806, 808, 811, 822, 826, 828, 830, 832, 838, 842, 863, 864, 874, 882, 884, 900, 901, 907, 914, 929, 958, 964, 1053, 1090, 1230, 1287, 1357, 1385], "with_column_nam": 162, "with_columns_seq": [349, 958], "with_context": 958, "with_field": [589, 842], "with_replac": [285, 349, 568, 672, 842, 1189, 1255, 1357], "with_row_count": [349, 958], "with_row_index": [1, 281, 325, 349, 654, 656, 658, 660, 662, 665, 667, 669, 842, 931, 958, 1256, 1357, 1362], "within": [47, 65, 75, 83, 171, 172, 173, 174, 193, 194, 196, 238, 239, 240, 254, 281, 319, 349, 518, 640, 684, 842, 882, 887, 907, 958, 1137, 1357, 1385], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 72, 78, 104, 107, 137, 140, 141, 142, 143, 144, 152, 155, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 175, 176, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 198, 253, 255, 296, 306, 307, 311, 317, 318, 349, 352, 353, 438, 439, 446, 458, 520, 589, 637, 651, 652, 654, 656, 658, 660, 662, 663, 665, 667, 669, 689, 699, 701, 713, 767, 769, 773, 800, 801, 820, 842, 863, 864, 886, 888, 917, 925, 958, 962, 1031, 1036, 1052, 1053, 1059, 1071, 1139, 1230, 1242, 1243, 1246, 1248, 1249, 1275, 1285, 1287, 1299, 1336, 1338, 1341, 1357, 1362, 1387], "without_fil": [152, 163, 164], "wod": [722, 1308], "womp": [315, 349, 923, 958], "word": [151, 711, 712, 721, 722, 733, 1319, 1380], "work": [41, 72, 78, 148, 149, 154, 158, 160, 168, 288, 324, 349, 361, 363, 399, 423, 424, 427, 428, 499, 508, 552, 581, 588, 589, 613, 614, 616, 618, 620, 621, 630, 702, 706, 707, 715, 726, 750, 800, 842, 903, 910, 929, 958, 962, 964, 971, 972, 1008, 1032, 1033, 1038, 1041, 1128, 1173, 1202, 1288, 1292, 1293, 1301, 1312, 1343, 1357], "workaround": 349, "workbook": [41, 153, 159, 349], "workday_raas_format": 195, "worker": [903, 958], "working_with_conditional_format": [41, 349], "working_with_sparklin": [41, 349], "worksheet": [41, 153, 159, 349], "workspac": 187, "workspace_url": 187, "world": [1, 21, 689, 713, 720, 721, 722, 964, 1180, 1275, 1299, 1306, 1307, 1308, 1368, 1371, 1380], "wors": [916, 958], "worth": [552, 1173], "worthwhil": [171, 173], "would": [103, 148, 149, 162, 207, 307, 311, 349, 352, 374, 385, 446, 458, 557, 588, 589, 600, 630, 640, 765, 767, 842, 983, 994, 1059, 1071, 1178, 1232, 1338, 1357, 1362, 1383], "wrap": [85, 137, 420, 526, 588, 842, 1028, 1357], "wrap_numer": [420, 842, 1028, 1357], "wrapper": [63, 864, 958], "writabl": [36, 38, 43, 44, 45, 46, 47, 289, 307, 349, 1338, 1357], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 147, 149, 154, 202, 213, 349, 428, 604, 607, 842, 890, 914, 958, 964, 1041, 1357], "write_avro": 349, "write_clipboard": [147, 349], "write_csv": [37, 149, 162, 349], "write_databas": 349, "write_delta": 349, "write_excel": 349, "write_iceberg": 349, "write_ipc": [154, 349], "write_ipc_stream": 349, "write_json": 349, "write_markdown_frame_to_stdout": 202, "write_ndjson": [45, 349], "write_parquet": 349, "write_t": [47, 349], "write_to_dataset": [47, 349], "writeabl": [307, 349, 1338, 1357], "writer": [40, 349], "writer_properti": [40, 349], "writerproperti": [40, 349], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 289, 349, 603, 911, 958], "ww": [1380, 1387], "www": [708, 738, 1294], "x": [28, 56, 64, 87, 106, 131, 137, 148, 149, 151, 153, 159, 162, 175, 176, 178, 206, 225, 243, 246, 248, 253, 273, 283, 284, 313, 316, 317, 349, 352, 358, 360, 362, 381, 386, 407, 433, 440, 493, 494, 509, 514, 516, 518, 540, 547, 559, 585, 587, 588, 589, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 629, 635, 643, 644, 645, 649, 678, 681, 717, 740, 741, 746, 749, 756, 758, 760, 763, 764, 770, 774, 776, 777, 779, 790, 802, 803, 806, 808, 811, 816, 821, 826, 832, 842, 886, 892, 915, 917, 924, 958, 963, 964, 995, 1035, 1047, 1124, 1143, 1209, 1236, 1237, 1265, 1268, 1303, 1336, 1340, 1341, 1357, 1362, 1369, 1370, 1373, 1379, 1380, 1385, 1387], "x00": [402, 403, 404, 405, 406, 408, 691, 1011, 1012, 1013, 1014, 1015, 1017, 1277], "x01": [406, 1015], "x05": [406, 1015], "x07": 407, "x1": 407, "x10": [406, 1015], "x80": 407, "x83": 407, "x88": 407, "x8e": 407, "x99": 407, "x_": [496, 842, 1116, 1357], "x_0": [317, 349, 495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357], "x_1": [317, 349, 496, 842, 1116, 1357], "x_2": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "x_i": [496, 842, 1116, 1357], "x_invers": [635, 842], "x_pow_8": 1379, "x_round": 1379, "x_round_1": 1379, "x_squar": [635, 842], "x_t": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "x_uniqu": [612, 842], "x_y": [386, 559], "xb": 407, "xb9neq": 407, "xbd": 407, "xc14": 407, "xd3": 407, "xdist": 1388, "xee": 407, "xf4v": 407, "xf9": 407, "xfb": 407, "xff": [402, 403, 404, 405, 408, 691, 1011, 1012, 1013, 1014, 1017, 1277], "xi": [697, 1283], "xl": 153, "xlog2": [611, 635, 842], "xlsb": 153, "xlsx": [41, 153, 349], "xlsx2csv": [153, 170], "xlsxwriter": [41, 170, 349], "xor": [417, 842, 1026, 1357, 1376], "xor_xi": [756, 842], "xx": [11, 57, 59, 182, 217, 296, 349, 868, 958, 964, 1373, 1380, 1387], "xxx": [221, 349, 738, 871, 958], "xy": [57, 59], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 358, 690, 697, 842, 1276, 1283, 1334, 1357, 1380], "y": [28, 56, 64, 87, 106, 131, 137, 175, 176, 178, 206, 225, 246, 248, 253, 273, 283, 284, 313, 316, 317, 349, 352, 358, 360, 362, 381, 386, 407, 476, 479, 493, 494, 514, 516, 540, 547, 559, 587, 589, 612, 614, 616, 618, 620, 621, 624, 625, 629, 643, 644, 645, 649, 725, 727, 728, 740, 749, 756, 758, 760, 763, 764, 774, 779, 786, 802, 806, 808, 811, 821, 826, 842, 886, 915, 917, 924, 958, 963, 964, 995, 1035, 1093, 1096, 1236, 1237, 1311, 1313, 1314, 1357, 1362, 1373, 1380, 1381, 1387], "y_": [495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357], "y_0": [317, 349, 495, 496, 497, 498, 842, 1115, 1116, 1117, 1118, 1357], "y_1": [317, 349], "y_i": [496, 842, 1116, 1357], "y_mul": 740, "y_t": [495, 497, 498, 842, 1115, 1117, 1118, 1357], "y_uniqu": [612, 842], "ya": [715, 1301], "ya29": 164, "ye": 832, "year": [52, 54, 239, 254, 281, 296, 319, 349, 446, 458, 459, 460, 469, 470, 472, 474, 487, 488, 650, 654, 656, 658, 660, 662, 665, 667, 669, 767, 780, 781, 782, 783, 784, 785, 829, 830, 842, 882, 887, 907, 958, 964, 1059, 1071, 1072, 1073, 1086, 1087, 1089, 1091, 1104, 1105, 1381], "yellow": [349, 353, 402, 403, 404, 405, 408], "yield": [134, 136, 148, 149, 150, 162, 225, 227, 250, 313, 349, 509, 588, 630, 842, 958, 1114, 1121, 1357], "you": [1, 11, 15, 41, 47, 51, 56, 63, 64, 130, 132, 133, 134, 135, 136, 145, 148, 149, 150, 151, 153, 154, 157, 158, 160, 162, 166, 168, 202, 209, 227, 230, 239, 250, 251, 254, 258, 269, 273, 277, 281, 282, 283, 284, 296, 303, 306, 312, 313, 314, 316, 335, 349, 352, 418, 419, 423, 446, 458, 466, 467, 469, 473, 476, 479, 499, 505, 526, 552, 580, 588, 589, 604, 630, 635, 642, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 677, 689, 706, 711, 712, 713, 733, 736, 747, 748, 767, 776, 781, 784, 786, 790, 800, 804, 814, 817, 821, 833, 842, 858, 864, 878, 882, 887, 903, 904, 907, 914, 917, 921, 922, 924, 933, 941, 958, 962, 964, 1027, 1032, 1059, 1071, 1083, 1084, 1090, 1093, 1096, 1121, 1144, 1173, 1209, 1228, 1234, 1275, 1292, 1297, 1298, 1299, 1319, 1336, 1342, 1357, 1362, 1367, 1372, 1388], "your": [39, 41, 55, 56, 97, 143, 148, 149, 150, 151, 153, 168, 202, 251, 253, 258, 283, 284, 287, 303, 323, 328, 335, 349, 352, 451, 496, 511, 589, 698, 725, 727, 728, 735, 804, 842, 886, 892, 909, 928, 934, 941, 958, 962, 1064, 1116, 1209, 1284, 1311, 1313, 1314, 1321, 1357, 1362, 1388], "yy": [11, 57, 59, 182, 217, 296, 349, 868, 958, 964, 1373, 1380, 1387], "yyi": [221, 349, 738, 871, 958], "yyyi": [41, 349], "yz": [57, 59], "z": [41, 64, 87, 137, 176, 225, 246, 248, 253, 283, 284, 313, 316, 317, 349, 358, 360, 362, 518, 547, 589, 614, 616, 618, 620, 621, 629, 643, 644, 645, 689, 697, 699, 701, 713, 725, 728, 758, 760, 779, 806, 808, 811, 817, 821, 826, 842, 886, 915, 917, 924, 958, 963, 964, 1124, 1236, 1237, 1275, 1283, 1285, 1287, 1299, 1311, 1314, 1357, 1369, 1373, 1385, 1387], "z_0": [317, 349], "z_1": [317, 349], "zap": 964, "zero": [29, 41, 130, 131, 146, 148, 149, 154, 156, 160, 177, 180, 206, 229, 239, 251, 282, 296, 301, 307, 308, 349, 504, 580, 585, 673, 681, 735, 749, 842, 861, 877, 882, 958, 1040, 1124, 1201, 1268, 1321, 1332, 1338, 1339, 1357, 1379, 1385], "zero_copy_onli": [1338, 1357], "zfill": [710, 756, 842, 1296], "zip": 1388, "zip_with": [232, 349, 1357], "zone": [71, 178, 179, 182, 447, 451, 473, 496, 728, 783, 784, 785, 842, 964, 1060, 1064, 1090, 1116, 1314, 1357], "zoneinfo": [71, 964], "zoom": [41, 349], "zstd": [40, 43, 44, 47, 49, 51, 349, 958], "zz": [182, 217, 296, 349, 868, 958, 1373, 1380, 1387], "zzz": 738, "\u03bc": [137, 210, 239, 251, 281, 283, 284, 303, 319, 349, 447, 448, 450, 451, 452, 453, 455, 457, 461, 463, 464, 466, 467, 468, 469, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 650, 654, 656, 658, 660, 662, 665, 667, 669, 725, 728, 783, 784, 785, 786, 792, 842, 860, 882, 907, 958, 964, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1076, 1077, 1081, 1083, 1084, 1085, 1086, 1090, 1091, 1094, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1311, 1314, 1380], "\u0441\u0438\u043d\u0438\u0439": 1380, "\u0967\u096f\u096f\u096f": 964, "\u0968\u0966\u096d\u096d": 964, "\u4eac\u90fd": 964, "\u5927\u962a": 964, "\u6771\u4eac": [423, 424, 706, 707, 964, 1032, 1033, 1292, 1293], "\u90fd\u5e02": 964, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [708, 1294], "\uff54\uff45\uff53\uff54": 1380, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1380, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1380, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1380, "\ud835\udf0b": 1379}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1373, 1386], "IF": 1377, "__array__": [204, 966], "__arrow_c_stream__": [205, 967], "__dataframe__": 206, "__getitem__": [207, 968], "__iter__": 327, "ab": [357, 969, 1379], "aco": 1382, "acosd": 1382, "add": 358, "add_business_dai": [446, 1059], "agg": [328, 934], "agg_group": 359, "aggreg": [203, 356, 856, 965, 1374], "alia": [360, 970], "alias": [1374, 1379, 1380], "align_fram": 56, "all": [329, 361, 377, 543, 757, 935, 971, 986, 1164, 1386], "all_horizont": 758, "and_": 362, "ani": [363, 378, 544, 759, 972, 987, 1165], "any_horizont": 760, "api": [1, 57, 58, 59, 60, 854, 1385], "append": [364, 973], "approx_n_uniqu": [208, 365, 761, 857, 974], "arang": 762, "arcco": [366, 975], "arccosh": [367, 976], "arcsin": [368, 977], "arcsinh": [369, 978], "arctan": [370, 979], "arctan2": 763, "arctan2d": 764, "arctanh": [371, 980], "arg_max": [372, 379, 545, 981, 988, 1166], "arg_min": [373, 380, 546, 982, 989, 1167], "arg_sort": [374, 983], "arg_sort_bi": 765, "arg_tru": [375, 984], "arg_uniqu": [376, 985], "arg_wher": 766, "arr": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "arrai": [65, 834, 1349, 1375], "array_agg": 1375, "array_contain": 1375, "array_get": 1375, "array_length": 1375, "array_low": 1375, "array_mean": 1375, "array_revers": 1375, "array_sum": 1375, "array_to_str": 1375, "array_uniqu": 1375, "array_upp": 1375, "asin": 1382, "asind": 1382, "assert": 1388, "assert_frame_equ": 171, "assert_frame_not_equ": 172, "assert_series_equ": 173, "assert_series_not_equ": 174, "atan": 1382, "atan2": 1382, "atan2d": 1382, "atand": 1382, "attribut": [344, 953, 1350], "avail": 1, "avg": 1374, "avro": 855, "backward_fil": [401, 1010], "base_utc_offset": [447, 1060], "basepartitioncontext": 140, "batched_read": 139, "batchedcsvread": 139, "bin": [402, 403, 404, 405, 406, 407, 408, 1011, 1012, 1013, 1014, 1015, 1016, 1017], "binari": [66, 835, 848, 1351], "bit_and": 1376, "bit_count": 1376, "bit_length": 1380, "bit_or": 1376, "bit_xor": 1376, "bitwis": 1376, "bitwise_and": [409, 1018], "bitwise_count_on": [410, 1019], "bitwise_count_zero": [411, 1020], "bitwise_leading_on": [412, 1021], "bitwise_leading_zero": [413, 1022], "bitwise_or": [414, 1023], "bitwise_trailing_on": [415, 1024], "bitwise_trailing_zero": [416, 1025], "bitwise_xor": [417, 1026], "boolean": [67, 836, 1352], "bottom_k": [209, 418, 858, 1027], "bottom_k_bi": 419, "build_info": 61, "business_day_count": 767, "cach": 859, "cancel": 950, "cast": [210, 420, 860, 1028, 1383], "cast_time_unit": [448, 1061], "cat": [421, 422, 423, 424, 425, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "catalog": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "cataloginfo": 193, "categor": 68, "categori": [837, 1353], "categoricalremappingwarn": 99, "cbrt": [426, 1037, 1379], "ceil": [427, 1038, 1379], "centuri": [449, 1062], "chronoformatwarn": 100, "chunk_length": 1039, "claus": 1373, "clear": [211, 861, 1040], "clip": [428, 1041], "clipboard": 855, "clone": [212, 862, 1042], "cloud": 855, "co": [429, 1043, 1382], "coalesc": [768, 1377], "col": 838, "collect": 863, "collect_al": 62, "collect_all_async": 63, "collect_async": 864, "collect_schema": [213, 865], "column": [175, 176, 214, 839, 866], "columninfo": 194, "columnnotfounderror": 101, "combin": [450, 1063], "comparison": [848, 1361], "comput": [345, 840, 1354], "computeerror": 102, "concat": [64, 547, 687, 1168, 1273, 1380], "concat_arr": 769, "concat_list": 770, "concat_str": 771, "concat_w": 1380, "condit": 1377, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 202], "conjunct": 848, "contain": [381, 402, 548, 688, 990, 1011, 1169, 1274], "contains_ani": [689, 1275], "context": 202, "convers": 853, "convert_time_zon": [451, 1064], "corr": [215, 772], "cosd": 1382, "cosh": [430, 1044], "cot": [431, 1045, 1382], "cotd": 1382, "count": [216, 330, 432, 773, 867, 936, 1046, 1374], "count_match": [382, 549, 690, 991, 1170, 1276], "cov": 774, "creat": 1387, "create_list_strategi": 177, "credenti": 855, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [139, 855], "cum_count": [433, 775, 1047], "cum_fold": 776, "cum_max": [434, 1048], "cum_min": [435, 1049], "cum_prod": [436, 1050], "cum_reduc": 777, "cum_sum": [437, 778, 1051], "cum_sum_horizont": 779, "cumulative_ev": [438, 1052], "customufuncwarn": 103, "cut": [439, 1053], "dai": [454, 1067], "data": 354, "databas": 855, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 178, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 349], "dataorientationwarn": 104, "dataset": 855, "datasourceformat": 195, "datatyp": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 354], "date": [70, 452, 780, 1065, 1380], "date_part": 1381, "date_rang": [781, 782], "datetim": [71, 453, 783, 1066], "datetime_rang": [784, 785], "decim": 72, "decod": [403, 691, 1012, 1277], "decor": 202, "defer": 95, "degre": [440, 1382], "delet": 1387, "delta": 855, "describ": [217, 868, 1054], "descript": [346, 954, 1355], "deseri": [218, 441, 869], "diff": [442, 550, 1055, 1171], "disable_string_cach": 96, "distinct": 1373, "div": 1379, "document": 1385, "dot": [443, 1056], "drop": [219, 870, 1387], "drop_in_plac": 220, "drop_nan": [221, 444, 871, 1057], "drop_nul": [222, 445, 551, 872, 1058, 1172], "dst_offset": [455, 1068], "dt": [446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108], "dtype": [179, 223, 873, 1109], "duplicateerror": 105, "durat": [73, 786], "element": 787, "enable_string_cach": 97, "encod": [404, 692, 1013, 1278], "ends_with": [405, 421, 693, 1014, 1029, 1279, 1380], "engine_config": 933, "entropi": [492, 1110], "enum": 74, "epoch": [456, 1069], "eq": [493, 593, 1111], "eq_miss": [494, 1112], "equal": [224, 1113], "error": 355, "escape_regex": [98, 694, 1280], "estimated_s": [225, 1114], "eval": [552, 1173], "ewm_mean": [495, 1115], "ewm_mean_bi": [496, 1116], "ewm_std": [497, 1117], "ewm_var": [498, 1118], "exampl": [1, 964, 1388], "excel": 855, "except": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 355, 1386], "exclud": [499, 788], "execut": 1366, "execute_glob": 1367, "exp": [500, 1119, 1379], "explain": [874, 1387], "explain_al": 129, "explod": [226, 383, 501, 553, 695, 875, 992, 1120, 1174, 1281], "export": [347, 1356], "expr": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756], "express": [842, 962, 1385], "extend": [1, 227, 1121], "extend_const": [502, 1122], "extract": [696, 1282, 1381], "extract_al": [697, 1283], "extract_group": [698, 1284], "extract_mani": [699, 1285], "feather": 855, "fetch": 951, "fetch_block": 952, "field": [75, 736, 1322, 1323], "fill_nan": [228, 503, 876, 1123], "fill_nul": [229, 504, 877, 1124], "filter": [230, 505, 878, 1125], "find": [700, 1286], "find_mani": [701, 1287], "first": [331, 384, 506, 554, 789, 879, 937, 993, 1126, 1175, 1374], "flag": [231, 1127], "flatten": 507, "float32": 76, "float64": 77, "floor": [508, 1128, 1379], "floordiv": 509, "fold": [232, 790], "format": 791, "forward_fil": [510, 1129], "frame": 1385, "from": 1373, "from_arrow": 130, "from_datafram": 131, "from_dict": [132, 133], "from_epoch": 792, "from_json": 511, "from_numpi": 134, "from_panda": 135, "from_record": 136, "from_repr": 137, "function": [1, 841, 853, 964, 1378], "gather": [512, 555, 1130, 1176], "gather_everi": [233, 513, 556, 880, 1131, 1177], "ge": [514, 1132], "get": [385, 515, 557, 994, 1178], "get_categori": [422, 1030], "get_chunk": 1133, "get_column": [234, 236], "get_column_index": 235, "get_index_typ": 138, "get_polars_schema": 198, "get_table_info": 188, "glimps": 237, "global": 1385, "gpuengin": [933, 955], "greatest": 1377, "group": [793, 1373], "group_bi": [238, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 881, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949], "group_by_dynam": [239, 882], "groupbi": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 348, 956], "gt": [516, 1134], "has_multiple_output": 594, "has_nul": [517, 1135], "has_valid": 1136, "hash": [518, 1137], "hash_row": 240, "have": 1373, "head": [241, 332, 519, 558, 702, 794, 883, 938, 1138, 1179, 1288], "height": 242, "helper": 1388, "hist": [520, 1139], "hour": [457, 1070], "hstack": 243, "iceberg": 855, "ifnul": 1377, "implod": [521, 795, 1140], "import": 964, "in_process": [950, 951, 952], "index": 0, "index_of": [522, 1141], "initcap": 1380, "inprocessqueri": [950, 951, 952, 957], "input": 855, "insert_column": 244, "inspect": [523, 884], "instanc": 202, "int128": 78, "int16": 79, "int32": 80, "int64": 81, "int8": 82, "int_rang": [796, 797], "interfac": 1384, "interpol": [245, 524, 885, 1142], "interpolate_bi": [525, 1143], "intersect": 1386, "introduct": 1385, "invalidoperationerror": 106, "io": [139, 140, 141, 142, 143, 962], "ipc": 855, "is_between": [526, 1144], "is_business_dai": [458, 1071], "is_column": 595, "is_column_select": 596, "is_dupl": [246, 527, 1145], "is_empti": [247, 1146], "is_finit": [528, 1147], "is_first_distinct": [529, 1148], "is_in": [530, 1149], "is_infinit": [531, 1150], "is_last_distinct": [532, 1151], "is_leap_year": [459, 1072], "is_liter": 597, "is_loc": 1031, "is_nan": [533, 1152], "is_not_nan": [534, 1153], "is_not_nul": [535, 1154], "is_nul": [536, 1155], "is_regex_project": 598, "is_sort": 1156, "is_uniqu": [248, 537, 1157], "iso_year": [460, 1073], "item": [249, 1158], "iter_column": 250, "iter_row": 251, "iter_slic": 252, "join": [253, 386, 559, 703, 886, 995, 1180, 1289, 1373], "join_asof": [254, 887], "join_wher": [255, 888], "json": 855, "json_decod": [704, 1290], "json_encod": [737, 1324], "json_norm": 144, "json_path_match": [705, 1291], "keep": 613, "keyedpartit": 141, "keyedpartitioncontext": 142, "kurtosi": [538, 1159], "lake": 855, "last": [333, 387, 539, 560, 798, 889, 939, 996, 1160, 1181, 1374], "lazi": [256, 890], "lazyfram": [48, 49, 50, 51, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 958], "lazygroupbi": [934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949], "le": [540, 1161], "least": 1377, "left": 1380, "len": [334, 541, 561, 799, 940, 1162, 1182], "len_byt": [423, 706, 1032, 1292], "len_char": [424, 707, 1033, 1293], "length": 1380, "limit": [257, 542, 891, 1163, 1373], "linear_spac": [800, 801], "list": [83, 180, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 843, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1358], "list_catalog": 189, "list_namespac": 190, "list_tabl": 191, "lit": 802, "ln": 1379, "load": [2, 202], "load_from_fil": 3, "load_profil": 181, "log": [583, 1204, 1379], "log10": [584, 1205, 1379], "log1p": [585, 1206, 1379], "log2": 1379, "lower": 1380, "lower_bound": [586, 1207], "lt": [587, 1208], "ltrim": 1380, "manag": 202, "manipul": [351, 846, 960, 1360], "map": 614, "map_batch": [588, 803, 892], "map_el": [589, 1209], "map_field": 615, "map_group": [335, 804, 941], "map_row": 258, "mapwithoutreturndtypewarn": 107, "math": 1379, "max": [259, 336, 388, 562, 590, 805, 893, 942, 997, 1074, 1183, 1210, 1374], "max_horizont": [260, 806], "mean": [261, 337, 563, 591, 807, 894, 943, 1075, 1184, 1211], "mean_horizont": [262, 808], "median": [263, 338, 389, 564, 592, 809, 895, 944, 998, 1076, 1185, 1212, 1374], "melt": [264, 896], "merge_sort": [265, 897], "meta": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 844], "metadata": 961, "method": 1385, "microsecond": [461, 1077], "millennium": [462, 1078], "millisecond": [463, 1079], "min": [266, 339, 390, 565, 608, 810, 898, 945, 999, 1080, 1186, 1213, 1374], "min_horizont": [267, 811], "minut": [464, 1081], "miscellan": [350, 845, 853, 959, 1359], "mod": [609, 1379], "mode": [610, 1214], "moduleupgraderequirederror": 108, "month": [465, 1082], "month_end": [466, 1083], "month_start": [467, 1084], "mul": 611, "multipl": [202, 853], "n_chunk": [268, 1215], "n_uniqu": [269, 340, 391, 566, 612, 812, 946, 1000, 1187, 1216], "name": [613, 614, 615, 616, 617, 618, 619, 620, 621, 839, 847, 1217, 1386], "namespaceinfo": 196, "nan_max": [622, 1218], "nan_min": [623, 1219], "nanosecond": [468, 1085], "ne": [599, 624, 1220], "ne_miss": [625, 1221], "neg": 626, "nest": 354, "new": 1, "new_from_index": 1222, "next_batch": 139, "nodataerror": 109, "normal": [708, 1294, 1380], "norowsreturnederror": 110, "not_": [627, 1223], "nth": 813, "null": 84, "null_count": [270, 628, 899, 1224], "nullif": 1377, "numer": [354, 848, 1361], "object": 85, "octet_length": 1380, "od": 855, "offset": 1373, "offset_bi": [469, 1086], "ones": 814, "oper": [848, 964, 1361, 1386, 1387], "option": 202, "or_": 629, "order": 1373, "ordinal_dai": [470, 1087], "other": 354, "outofboundserror": 111, "output": 855, "output_nam": 600, "over": 630, "pad_end": [709, 1295], "pad_start": [710, 1296], "panic": 355, "panicexcept": 112, "parametercollisionerror": 113, "parametr": [175, 176, 177, 178, 179, 180, 181, 182, 183, 1388], "parquet": 855, "partit": [140, 141, 142, 855], "partition_bi": 271, "partitionbykei": 52, "partitionmaxs": 53, "partitionpart": 54, "pct_chang": [631, 1225], "peak_max": [632, 1226], "peak_min": [633, 1227], "performancewarn": 114, "pi": 1379, "pipe": [272, 634, 900], "pivot": 273, "plot": [352, 1362], "plugin": [143, 145, 962], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1388], "polarserror": 115, "polarsinefficientmapwarn": 116, "polarswarn": 117, "pop": 601, "pow": [635, 1228, 1379], "prefix": 616, "prefix_field": 617, "product": [274, 636, 1229], "profil": [901, 1388], "provid": 1, "pyarrow": 855, "python": [854, 1385], "qcut": [637, 1230], "quantil": [275, 341, 638, 815, 902, 947, 1231], "quantile_cont": 1374, "quantile_disc": 1374, "quarter": [471, 1088], "queri": [853, 1385], "radian": [639, 1382], "random": 853, "rank": [640, 1232], "read_avro": 146, "read_clipboard": 147, "read_csv": 148, "read_csv_batch": 149, "read_databas": 150, "read_database_uri": 151, "read_delta": 152, "read_excel": 153, "read_ipc": 154, "read_ipc_schema": 155, "read_ipc_stream": 156, "read_json": 157, "read_ndjson": 158, "read_od": 159, "read_parquet": 160, "read_parquet_schema": 161, "rechunk": [276, 641, 1233], "reduc": 816, "refer": 854, "regexp_lik": 1380, "regist": 1368, "register_dataframe_namespac": 57, "register_expr_namespac": 58, "register_glob": 1369, "register_io_sourc": 143, "register_lazyframe_namespac": 59, "register_mani": 1370, "register_plugin_funct": 145, "register_series_namespac": 60, "registr": 1, "reinterpret": [406, 642, 1015, 1234], "remot": 903, "remov": [277, 904], "renam": [278, 905, 1235], "rename_field": [738, 1325], "repeat": 817, "repeat_bi": 643, "replac": [472, 644, 711, 1089, 1236, 1297, 1380], "replace_al": [712, 1298], "replace_column": 279, "replace_mani": [713, 1299], "replace_strict": [645, 1237], "replace_time_zon": [473, 1090], "reshap": [646, 1238], "restore_default": 4, "revers": [280, 392, 567, 647, 714, 906, 1001, 1188, 1239, 1300, 1380], "right": 1380, "rle": [648, 1240], "rle_id": [649, 1241], "roll": [281, 650, 907], "rolling_corr": 818, "rolling_cov": 819, "rolling_kurtosi": [651, 1242], "rolling_map": [652, 1243], "rolling_max": [653, 1244], "rolling_max_bi": 654, "rolling_mean": [655, 1245], "rolling_mean_bi": 656, "rolling_median": [657, 1246], "rolling_median_bi": 658, "rolling_min": [659, 1247], "rolling_min_bi": 660, "rolling_quantil": [661, 1248], "rolling_quantile_bi": 662, "rolling_skew": [663, 1249], "rolling_std": [664, 1250], "rolling_std_bi": 665, "rolling_sum": [666, 1251], "rolling_sum_bi": 667, "rolling_var": [668, 1252], "rolling_var_bi": 669, "root_nam": 602, "round": [474, 670, 1091, 1253, 1379], "round_sig_fig": [671, 1254], "row": [282, 283], "rows_by_kei": 284, "rowserror": 118, "rtrim": 1380, "sampl": [285, 568, 672, 1189, 1255], "save": [5, 202], "save_to_fil": 6, "scan_csv": 162, "scan_delta": 163, "scan_iceberg": 164, "scan_ipc": 165, "scan_ndjson": 166, "scan_parquet": 167, "scan_pyarrow_dataset": 168, "scan_tabl": 192, "scatter": 1256, "schema": [286, 908, 963, 1326], "schemaerror": 121, "schemafieldnotfounderror": 122, "search_sort": [673, 1257], "second": [475, 1092], "select": [287, 351, 820, 846, 909, 960, 1360, 1373], "select_seq": [288, 910], "selector": 964, "seri": [182, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1357], "serial": [289, 350, 603, 911, 959], "set": [964, 1258, 1386], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [569, 1190], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [570, 1191], "set_profil": 183, "set_random_se": 169, "set_sort": [290, 674, 912, 1259], "set_streaming_chunk_s": 15, "set_symmetric_differ": [571, 1192], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [572, 1193], "set_verbos": 30, "shape": [291, 1260], "shapeerror": 123, "shift": [292, 393, 573, 675, 913, 1002, 1194, 1261], "show": 1387, "show_graph": [604, 914], "show_vers": 170, "shrink_dtyp": [676, 1262], "shrink_to_fit": [293, 1263], "shuffl": [677, 1264], "sign": [678, 1265, 1379], "sin": [679, 1266, 1382], "sind": 1382, "sinh": [680, 1267], "sink_csv": 48, "sink_ipc": 49, "sink_ndjson": 50, "sink_parquet": 51, "size": [407, 1016], "skew": [681, 1268], "slice": [294, 574, 682, 715, 915, 1195, 1269, 1301], "sort": [295, 394, 575, 683, 916, 1003, 1196, 1270], "sort_bi": 684, "split": [716, 1302], "split_exact": [717, 1303], "split_part": 1380, "splitn": [718, 1304], "sql": [296, 821, 917, 1373, 1378, 1384, 1385], "sql_expr": 822, "sqlcontext": [1366, 1367, 1368, 1369, 1370, 1371, 1372, 1385], "sqlinterfaceerror": 119, "sqlsyntaxerror": 120, "sqrt": [685, 1271, 1379], "starts_with": [408, 425, 719, 1017, 1034, 1305, 1380], "state": [31, 202], "std": [297, 395, 576, 686, 823, 918, 1004, 1197, 1272], "stddev": 1374, "str": [687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321], "strategi": 1388, "strftime": [476, 1093, 1381], "string": [86, 354, 849, 1363, 1380], "string_to_arrai": 1380, "stringcach": [55, 853], "stringcachemismatcherror": 124, "strip_char": [720, 1306], "strip_chars_end": [721, 1307], "strip_chars_start": [722, 1308], "strip_prefix": [723, 1309], "strip_suffix": [724, 1310], "strpo": 1380, "strptime": [725, 1311, 1380], "struct": [87, 736, 737, 738, 739, 740, 824, 850, 1322, 1323, 1324, 1325, 1326, 1327, 1364], "structfieldnotfounderror": 125, "style": 353, "sub": 741, "substr": 1380, "suffix": 618, "suffix_field": 619, "sum": [298, 342, 396, 577, 742, 825, 919, 948, 1005, 1198, 1328, 1374], "sum_horizont": [299, 826], "tabl": [1371, 1387], "tableinfo": [197, 198], "tabletyp": 199, "tail": [300, 343, 578, 726, 743, 827, 920, 949, 1199, 1312, 1329], "tan": [744, 1330, 1382], "tand": 1382, "tanh": [745, 1331], "tempor": [354, 851, 1365, 1381], "test": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 1388], "thread_pool_s": 184, "threadpool_s": 185, "time": [88, 477, 828, 1094], "time_rang": [829, 830], "timestamp": [478, 1095, 1380], "to_arrai": [579, 1200], "to_arrow": [301, 1332], "to_dat": [727, 1313], "to_datetim": [728, 1314], "to_decim": [729, 1315], "to_dict": [302, 303], "to_dummi": [304, 1333], "to_fram": 1334, "to_init_repr": [305, 1335], "to_integ": [730, 1316], "to_jax": [306, 1336], "to_list": [397, 1006, 1337], "to_loc": 1035, "to_lowercas": [620, 731, 1317], "to_numpi": [307, 1338], "to_panda": [308, 1339], "to_phys": [746, 1340], "to_seri": 309, "to_str": [479, 1096], "to_struct": [310, 398, 580, 1007, 1201], "to_tim": [732, 1318], "to_titlecas": [733, 1319], "to_torch": [311, 1341], "to_uppercas": [621, 734, 1320], "toomanyrowsreturnederror": 126, "top_k": [312, 747, 921, 1342], "top_k_bi": 748, "total_dai": [480, 1097], "total_hour": [481, 1098], "total_microsecond": [482, 1099], "total_millisecond": [483, 1100], "total_minut": [484, 1101], "total_nanosecond": [485, 1102], "total_second": [486, 1103], "transpos": 313, "tree_format": 605, "trigonometri": 1382, "truediv": 749, "truncat": [487, 1104, 1387], "try_cast": 1383, "type": [354, 1383], "uint16": 89, "uint32": 90, "uint64": 91, "uint8": 92, "undo_alias": 606, "union": 1386, "uniqu": [314, 399, 581, 750, 922, 1008, 1202, 1343], "unique_count": [751, 1344], "uniti": [193, 194, 195, 196, 197, 198, 199, 201], "unknown": 93, "unnest": [315, 739, 923, 1327, 1375, 1387], "unpivot": [316, 924], "unregist": 1372, "unstablewarn": 127, "unstack": 317, "unsuitablesqlerror": 128, "updat": [318, 925], "upper": 1380, "upper_bound": [752, 1345], "upsampl": 319, "us": 202, "uses_lexical_ord": 1036, "using_string_cach": 186, "utf8": 94, "value_count": [753, 1346], "var": [320, 400, 582, 754, 831, 926, 1009, 1203, 1347], "varianc": 1374, "vstack": 321, "warn": 355, "week": [488, 1105], "weekdai": [489, 1106], "when": 832, "where": [755, 1373], "width": [322, 927], "window": 852, "with_column": [323, 928], "with_columns_seq": [324, 929], "with_context": 930, "with_field": 740, "with_row_count": [325, 931], "with_row_index": [326, 932], "with_time_unit": [490, 1107], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 607], "write_ndjson": 46, "write_parquet": 47, "xor": 756, "year": [491, 1108], "zero": 833, "zfill": [735, 1321], "zip_with": 1348}})